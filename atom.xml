<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生活中的tree</title>
  
  <subtitle>日富一日</subtitle>
  <link href="http://bootree.cn/atom.xml" rel="self"/>
  
  <link href="http://bootree.cn/"/>
  <updated>2024-07-31T15:02:27.294Z</updated>
  <id>http://bootree.cn/</id>
  
  <author>
    <name>大白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WPF从入门到入坟 - 19数据绑定</title>
    <link href="http://bootree.cn/2024/07/31/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/19%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://bootree.cn/2024/07/31/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/19%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</id>
    <published>2024-07-31T12:34:33.000Z</published>
    <updated>2024-07-31T15:02:27.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提高大列表的性能"><a href="#提高大列表的性能" class="headerlink" title="提高大列表的性能"></a>提高大列表的性能</h2><p>&emsp;&emsp;如果处理大量数据——例如，数万条记录而不止几百条--您知道良好的数据绑定系统不仅仅需要绑定功能,还需要能够处理超大量的数据而不会严重降低显示速度或消耗大量的内存幸运的是，WPF 优化了其列表控件以为您提供帮助。</p><div class="note info flat"><p>&emsp;&emsp;所有WOF列表控件（所有继承自<code>ItemsControl</code>的控件）都支持这些增强特性，包括低级的<code>ListBox</code>和<code>ComboBox</code></p></div><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>&emsp;&emsp;<strong>WPF列表控件提供的最重要功能是UI虚拟化（<code>UI virtualization</code>），UI虚拟化是列表仅为当前显示项创建容器对象的一种技术。</strong> <em>例如，如果有一个具有50 000条记录的ListrBox控件，但可见区域只能包含30条记录，ListBox控件将只创建30个ListBoxItem对象（为了确保良好的滚动性能，会再增加即可ListBoxItem对象）。如果ListBox控件不支持UI虚拟化，就需要生成全部50 000个ListBoxItem对象，这显然需要占用更多的内存。更有意义的是，分配这些对象需要的时间能够明显感觉到，当代码设置ListBox.ItemsSource属性时这会短暂锁定应用程序。</em></p><p>&emsp;&emsp;<strong>UI虚拟化支持实际上没有呗构建进<code>ListBox</code>或<code>ItemsControl</code>类。相反，而是被硬编码到<code>VirtualizingStackPanel</code>容器，除增加了虚拟化支持，该面板和<code>StackPanel</code>面板的功能类似。</strong> ListBox、ListView 以及 DataGrid 都自动使用 VirtualizingStackPanel 面板来布局它们的子元素。所以，为了获得虚拟化支持，不需要采取任何额外的步骤。然而，<strong>ComboBox 类使用标准的没有虚拟化支持的StackPanel面板。如果需要虚拟化支持，就必须明确地通过提供新的ItemsPanelTemmplate来添加虚拟化支持</strong>，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ComboBox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ComboBox.ItemsPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ItemsPanelTemplate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">VirtualizingStackPanel</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ItemsPanelTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ComboBox.ItemsPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ComboBox</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;TreeView是另一个支持虚拟化的控件，当在默认情况下，它关闭该支持。问题是在早期的WPF发布版本中，<code>VirtualizingStackPanel</code>面板不支持层次化数据。现在虽然支持，但TreeView禁用了该特性以确保向后兼容性。幸运的是，<strong>只通过设置一个属性即可启用该特性，在包含大量数据的树控件中总是推荐启用该特性：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TreeView</span> <span class="attr">VirtualizingStackPanel.IsVirtualizing</span>=<span class="string">&quot;True&quot;</span> <span class="attr">...</span>/&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>&emsp;&emsp;从技术角度该，<code>VirtualizingStackPanel</code>继承自抽象类<code>VirtualizingPanel</code>。如果想要使用不同类型的虚拟化面板，比如支持虚拟化的Grid面板，就需要成第三方组件供应商那里购买</p></div><blockquote><p>有许多因素可能会破坏UI虚拟化支持，而且有时是意想不到的：</p></blockquote><ul><li><strong>在ScrollViewer中放置列表控件</strong>。<em>ScrollViewer</em>为其子内容提供了一个窗口。问题是为子内容提供了无限的“虚拟”空间。在这个虚拟空间中，<em>ListBox</em>以完整尺寸渲染自身，显示所有子项。副作用是，每项在内存中都有各自的<em>ListBoxItem</em>。只要将ListBox控件放入不会视图限制其尺寸的容器中，就会发生这一问题：<em>例如，如果将ListBox控件放到StackPanel面板而不是Grid面板中，也会发生类似问题。</em></li><li><strong>改变列表控件的模板并且没有使用ItemsPresenter</strong>。<em>ItemsPresenter</em>使用<em>ItemsPanelTemplate</em>，该模板指定了<code>VirutalizingStackPanel</code>面板。如果破坏了这种关系或自己改变了<em>ItemsPanelTemplate</em>，从而使其不使用<code>VirtualizingStackPanel</code>面板，将会丢失虚拟化特性。</li><li><strong>不实用数据绑定</strong>。这应当是显而易见的，当如果通过编程填充列表——<em>例如，通过动态创建需要的ListBoxItem对象——那么不会发生虚拟化。当然，个考虑使用自己的优化策略，例如创建所需的对象并只在需要时创建</em></li></ul><p>&emsp;&emsp;<strong>如果有一个大列表，需要避免这些问题以确保得到良好的性能。</strong></p><p>&emsp;&emsp;<em>即使当使用U虚拟化时，仍然必须为实例化内存中的数据对象付出代价。例如，在具有50000 项的 ListBox控件示例中，仍有50000个数据对象，每个对象具有与产品、客户、订单记录或其他内容相关的不同数据。如果希望优化应用程序的这一部分，可考虑使用数据虚拟化(data virtualization)--每次只获取一批记录的一种技术。数据虚拟化是更复杂的技术，因为它假定检索数据的代价比保存数据的代价更低。根据数据的大小和检索数据所需的时间，这不一定是正确的。例如，如果当用户在列表中滚动时，应用程序不断地连接到网络数据库以获取更多的产品信息，最终结果会降低滚动性能，并会增加数据库服务器的负担。</em></p><p>&emsp;&emsp;当前，WPF没有提供任何支持数据虚拟化的控件或类。然而，这不会阻止且以及开发人员创建这一缺失的功能：假装具有所有项的“伪”集合，但直到控件需要数据时才成后台数据源中查询数据。</p><h3 id="项容器再循环"><a href="#项容器再循环" class="headerlink" title="项容器再循环"></a>项容器再循环</h3><p>&emsp;&emsp;通常当滚动支持虚拟化列表时，控件不断地创建新的项容器对象以保存新的可见项。例如，当在具有 50 000个项的 ListBox 控件中滚动时，ListBox控件将生成新的 ListBoxItem 对象。但<strong>如果启用了项容器再循环，ListBox 控件将只保持少量 ListBoxItem 对象存活，并当滚动时通过新数据加载这些 ListBoxItem 对象，从而重复使用它们。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">VirtualizingStackPanel.VirtualizationMode</span>=<span class="string">&quot;Recycling&quot;</span> <span class="attr">...</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>项容器再循环提高了滚动性能，降低了内存消耗量，因为垃圾收集器不需要查找旧的项对象并释放它们。</strong>通常，为确保向后兼容，对于除<em>DataGrid</em>之外的所有控件，该特性默认是禁用的。<code>如果有一个大列表，应当总是启用该特性。</code></p><h3 id="缓存长度"><a href="#缓存长度" class="headerlink" title="缓存长度"></a>缓存长度</h3><p>&emsp;&emsp;如前所述，<code>VirtualizingStackPanel</code>创建了即可超过其显示范围的附加项。这样，在开始滚动时，可以立即显示这些项。<br>&emsp;&emsp;在以前的WPF版本中，将多个附加项硬编码到<code>VirtualizlingStackPanel</code>中。当在WPF4.5中，您个使用<code>CacheLength</code>和<code>CacheLengthUnit</code>这两个<code>VirtualizlingStackPanel</code>属性进一步调整精确数量。<code>CacheLengthUnit</code>允许选择如何指定附加项的数量：<strong>项数、页数（其中，单页包含适用于控件可视“窗口”的所有项）或像素数（如果项显示不同大小的图片，这将是合理选择）。</strong></p><p>&emsp;&emsp;默认的<code>CacheLength</code>和<code>CacheLengthUnit</code>属性在当前可见项之前和之后存储项的附加页，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">VirtualizingStackPanel.CacheLength</span>=<span class="string">&quot;1&quot;</span> <span class="attr">VirtualizingStackPanel.CacheLengthUnit</span>=<span class="string">&quot;Page&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>下面的代码正在在当前可见项之前存储100项，在当前可见项之后存储100项：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">VirtualizingStackPanel.CacheLength</span>=<span class="string">&quot;100&quot;</span> <span class="attr">VirtualizingStackPanel.CacheLengthUnit</span>=<span class="string">&quot;Item&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>下面的代码在当前可见项之前存储100项，在当前可见项之后存储500项（原因可能是您预估用户将耗费大部分时间向下滚动，而不是向上滚动）：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">VirtualizingStackPanel.CacheLength</span>=<span class="string">&quot;100,500&quot;</span> <span class="attr">VirtualizingStackPanel.CacheLengthUnit</span>=<span class="string">&quot;Item&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;有必要指出，<strong>附加项的缓存用背景来填充。这意味着，<code>VirtualizingStackPanel</code>将立即显示创建的可见项集。此后，<code>VirtualizingStackPanel</code>将开始在优先级较低的后台线程上填充缓存，因此不能锁定应用程序。</strong></p><h3 id="延迟滚动"><a href="#延迟滚动" class="headerlink" title="延迟滚动"></a>延迟滚动</h3><p>&emsp;&emsp;当为进一步提高滚动性能，可开启延迟滚动(deferred scrolling)特性。使用延迟滚动特性，用户在滚动条上拖动滚动滑块时不会更新列表显示。<strong>只有当用户释放了滚动滑块时才刷新。</strong>比较起来，当使用常规滚动时，在拖动的同时会刷新列表，从而使列表显示正在改变的位置。</p><p>&emsp;&emsp;与为列表控件使用项容器再循环一样，需要明确地启用延迟滚动特性:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">ScrollViewer.IsDeferredScrollingEnabled</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;显然，需要在响应性和易用性之间取得平衡。如果有一个复杂的模板和大量数据，对于提高速度可能更愿意使用延迟滚动特性。但与此相反，当滚动时用户可能更愿意能够查看目前滚动到了什么位置。</p><p>&emsp;&emsp;VirtualizingStackPanel通常使用基于项的滚动(item-based scrolling)。这意味着当向下滚动少许时，下一项将显示出来。无法滚动查看项的一部分。无论是单击滚动条，单击滚动箭头，还是调用诸如 ListBox.ScrolllntoViewO的方法，<strong>在面板上至少会滚动一个完整项。</strong></p><p>&emsp;&emsp;然而，可通过将 VirtualizingStackPanel.ScrollUnit 属性设置为 Pixel 来覆盖该行为，并使用基于像素的滚动:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">VirtualizingStackPanel.ScrollUnit</span>=<span class="string">&quot;Pixel&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;应该根据在列表中显示的内容类型以及个人爱好，在“基于项的滚动”与“基于像素的滚动”之间加以选择。一般而言，<strong>基于像素的滚动更流畅，因为它允许使用较小的滚动间隔;而基于项的滚动更清晰，因为可看到项的全部内容。</strong></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>&emsp;&emsp;在任何数据绑定中，另一个要素是验证（<code>validation</code>）——换句话说，是指用于捕获非法数值并拒绝这些非法数值的逻辑。可直接在控件中构建验证（例如，通过响应文本框中的输入并拒绝非法字符），但这种低级的方法限制了灵活性。</p><p>&emsp;&emsp;供了以下两种方法用于捕获非法值:幸运的是，WPF提供了能与前面讨论过的数据绑定系统紧密协作的验证功能。验证另外提</p><ul><li><strong>可在数据对象中引发错误</strong>。为告知WPF发生了错误，只需要成属性设置过程中跑出异常。通常，WPF会忽略所有在设置属性时跑出的异常，但可以进行配置，从而显示更有帮助的可视化指示。另一种选择是在自定义的数据类中实现<code>INotifyDataErrorInfo</code>或<code>IDataErrorInfo</code>接口，从而可得到错误的功能而不会抛出异常。</li><li><strong>个在绑定级别上定义验证</strong>。这种方法个获得使用相同验证的灵活性，而不必考虑使用的是哪个输入控件。更好的是，因为是在不同的类中定义验证，所以个很容易地在存类似数据类型的多个绑定中重用验证。</li></ul><p>&emsp;&emsp;如果数据对象已经在它们的属性设置过程中硬编码了验证逻辑并且希望使用该逻辑，通常将使用第一种方法。当第一次定义验证逻辑，并希望在不同上下文和不同控件中重用时，将使用第二种方法。然而，一些开发人员同时选用这两种方法。他们<strong>在数据对象中使用验证预防一小部分基本的错误，并在绑定中使用验证捕获更大范围的用户输入错误。</strong></p><div class="note warning flat"><p>&emsp;&emsp;只有当来自目标的值正被用于更新源时才会应用验证——换句话说，只有当使用<code>TwoWay</code>模式或<code>OneWayToSource</code>模式的绑定时才应用验证</p></div><h3 id="在数据对象中进行验证"><a href="#在数据对象中进行验证" class="headerlink" title="在数据对象中进行验证"></a>在数据对象中进行验证</h3><p>&emsp;&emsp;一些开发人员直接在数据对象中构建错误检查逻辑，如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">decimal</span> _unitCost;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">decimal</span> UnitCost</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _unitCost; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;UnitCost cannot be nagative.&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _unitCost = <span class="keyword">value</span>;</span><br><span class="line">            OnPropertyChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个示例中显示的验证逻辑防止使用负的价格值，但不能为用户提供任何与问题相关的反馈信息。正如在前面学过的,WPF 会不加通告地忽略当设置和获取属性时发生的数据绑定错误。对于这种情况，用户无法知道更新已经被拒绝。实际上，非法的值仍然保留在文本框中——只是没有被应用于绑定的数据对象。为改善这一状况，需要借助于<code>ExceptionValidationRule</code> 验证规则，稍后将介绍该验证规则。</p><h4 id="ExceptionValidationRule验证规则"><a href="#ExceptionValidationRule验证规则" class="headerlink" title="ExceptionValidationRule验证规则"></a>ExceptionValidationRule验证规则</h4><p>&emsp;&emsp;<code>ExceptionValidationRule</code>是预先构建的验证规则，它项WPF报告所有异常。要使用<code>ExceptionValidationRule</code>验证规则，必须将它添加到<code>Binding.ValidationRules</code>集合中，如下所示：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240731220925.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Width</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox.Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Binding</span> <span class="attr">Path</span>=<span class="string">&quot;UnitCost&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Binding.ValidationRules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ExceptionValidationRule</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Binding.ValidationRules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBox.Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个示例同时使用了值转换器和验证规则。通常是在转换值之前执行验证，但ExceptionValidationRule 验证规则是一个例外。<strong>它捕获在任何位置发生的异常，包括当编辑的值不能转换成正确数据类型时发生的异常、由属性设置器抛出的异常以及由值转换器抛出的异常。</strong></p><p>&emsp;&emsp;那么，当验证失败时会发生什么情况? <code>System.Windows.Controls.Validation</code> 类的附加属性记录下了验证错误。对于每个失败的验证规则，WPF采取以下三个步骤:</p><ul><li>在绑定的元素上（在此是TextBox控件），将<code>Validation.HasError</code>附加属性设置为true。</li><li>创建包含错误细节的<code>ValidationError</code>对象（作为<code>ValidationRule.Validate()</code>方法的返回值），并将该对象添加到关联的<code>Validation.Erros</code>集合中</li><li>如果<code>Bindfing.NotifyOnValidationError</code>属性被设置为true，WPF就在元素上引发<code>Validation.Error</code>附加事件</li></ul><p>&emsp;&emsp;<strong>当发生错误时，绑定控件的可视化外观也会发生变化。当控件的 Validation.HasError 属性被设置为 true 时，WPF 自动将控件使用的模板切换为由 Validation.ErorTemplate 附加属性定义的模板。在文本框中，新模板将文本框的轮廓改成一条细的红色边框。</strong></p><p>&emsp;&emsp;在大多数情况下，您会希望以某种方式增强错误指示，并提供与引发问题的错误相关的特定信息。可使用代码处理 Error 事件，或提供自定义控件模板，从而提供不同的可视化指示信息。但在执行这些任务之前，有必要分析一下 WPF 提供的其他两种捕获错误的方式—— <strong>通过使用数据对象中的 INotifyDataErrorInfo 或 IDataErrorInfo 接口以及通过编写自定义验证规则捕获错误。</strong></p><h4 id="INotifyDataErrorInfo接口"><a href="#INotifyDataErrorInfo接口" class="headerlink" title="INotifyDataErrorInfo接口"></a>INotifyDataErrorInfo接口</h4><p>&emsp;&emsp;许多面向对象的支持者更愿意引发异常来提示用户输入错误，这样做的原因有很多。例如，用户输入错误并非异常条件，错误条件可能依赖于多个属性值之间的交互，以及有时不应立即丢弃错误值而值得保留它们以便进一步加以处理。<strong>WPF提供了两个接口，允许您构建报告错误的对象而不会抛出异常，这两个接口名为<code>IDataErrorInfo</code>和 <code>INotifyDataErrorInfo</code>。</strong></p><div class="note warning flat"><p>&emsp;&emsp;IDataErorInfo 和 INotifyDataErrorInfo 接口具有共同的目标,即用更加人性化的错误通知系统替换未处理的异常。IDataErrorInf0 是初始的错误跟踪接口,可追溯至第一个,NET版本，WPF包含它是为了达到向后兼容的目的。INotifyDataErrorInfo 接口具有类似的作用，但界面更丰富,是针对 Silverlight 创建的，并且已移植到了 WPF 4.5。它还支持其他功能，如每个属性多个错误以及异步验证。</p></div><p>&emsp;&emsp;下面演示如何使用<code>INotifyDataErrorInfo</code>接口来检测<em>Product</em>对象存在的问题。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span> : <span class="title">ObservableObject</span>, <span class="title">INotifyDataErrorInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>INotifyDataErrorInfo</code>接口需要三个成员。<code>ErrorChanged</code>事件在添加或删除错误时引发。<code>HasErros</code>属性返回true或false来指示数据对象是否包含错误。最佳选择是使用私有集合，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt; _errors = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt;();</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;需要了解两个事实。首先，该集合初看起来有些怪异。为理解其中的原因，INotifyDataErrorInfo 接口要求将错误链接到特定属性。<strong>其次，每个属性可以有多个错误。要跟踪此错误信息，最简单的方法是使用 Dictionary&lt;T,K&gt;集合，按属性名为该集合编写索引</strong></p><p>&emsp;&emsp;然后，可使用功能完备的错误对象，将多个错误信息片段绑定在一起，包括文本消息、错误代码和严重级别等详情。<br>&emsp;&emsp;准备好该集合后，只需要在错误发生时添加即可（如果错误得到纠正，就删除错误信息）。为简化该过程，该例中的<em>Product</em>类添加了一堆名为<code>SetErros()</code>和<code>ClearErrors()</code>的私有方法：</p><p>&emsp;&emsp;下面显示了错误处理逻辑，这段代码确保将 Product.ModeINumber 属性限制为包含字母和数字的字符串(不允许使用标点符号、空格以及其他特殊字符):</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240731225557.png"/><div class="tabs" id="inotifydataerrorinfo"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="inotifydataerrorinfo-1">Define</button><button type="button" class="tab " data-href="inotifydataerrorinfo-2">Use</button></ul><div class="tab-contents"><div class="tab-item-content active" id="inotifydataerrorinfo-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span> : <span class="title">ObservableObject</span>, <span class="title">INotifyDataErrorInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _modelNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ModelNumber</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _modelNumber; &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            _modelNumber = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> _modelNumber)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">char</span>.IsLetterOrDigit(c))</span><br><span class="line">                &#123;</span><br><span class="line">                    valid = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!valid)</span><br><span class="line">            &#123;</span><br><span class="line">                List&lt;<span class="built_in">string</span>&gt; erros = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">                erros.Add(<span class="string">&quot;The ModelNumber can only contain letters and numbers.&quot;</span>);</span><br><span class="line">                SetErrors(<span class="keyword">nameof</span>(ModelNumber), erros);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ClearErros(<span class="keyword">nameof</span>(ModelNumber));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            OnPropertyChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt; _errors = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, List&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> HasErrors</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Indicate whether the entire Product object is error-free.</span></span><br><span class="line">            <span class="keyword">return</span> (_errors.Count &gt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;DataErrorsChangedEventArgs&gt;? ErrorsChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable <span class="title">GetErrors</span>(<span class="params"><span class="built_in">string</span>? propertyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(propertyName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Provide all the error collections</span></span><br><span class="line">            <span class="keyword">return</span> (_errors.Values);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Provice the error collection for the requested property (if it has erros)</span></span><br><span class="line">            <span class="keyword">if</span> (_errors.ContainsKey(propertyName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _errors[propertyName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetErrors</span>(<span class="params"><span class="built_in">string</span> propertyName, List&lt;<span class="built_in">string</span>&gt; propertyErros</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Clear any erros that already exist for this property.</span></span><br><span class="line">        _errors.Remove(propertyName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the list collection for the specified property.</span></span><br><span class="line">        _errors.Add(propertyName, propertyErros);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Raise the error-nottificatio event.</span></span><br><span class="line">        <span class="keyword">if</span> (ErrorsChanged != <span class="literal">null</span>)</span><br><span class="line">            ErrorsChanged(<span class="keyword">this</span>, <span class="keyword">new</span> DataErrorsChangedEventArgs(propertyName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ClearErros</span>(<span class="params"><span class="built_in">string</span> propertyName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Remove the error list for this propertry</span></span><br><span class="line">        _errors.Remove(propertyName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Raise the error-notification event.</span></span><br><span class="line">        <span class="keyword">if</span> (ErrorsChanged != <span class="literal">null</span>)</span><br><span class="line">            ErrorsChanged(<span class="keyword">this</span>, <span class="keyword">new</span> DataErrorsChangedEventArgs(propertyName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="inotifydataerrorinfo-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:lib</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;375&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;260&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;displayErrorMsgFomatte&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  Placeholder for the TextBox itself  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">AdornedElementPlaceholder</span> <span class="attr">x:Name</span>=<span class="string">&quot;textBox&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ItemsControl</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;Binding&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ItemsControl.ItemTemplate</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Foreground</span>=<span class="string">&quot;Red&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding ErrorContent&#125;&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">DataTemplate</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ItemsControl.ItemTemplate</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ItemsControl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;10&quot;</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Name</span>=<span class="string">&quot;txtModelNumber&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;10,0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Text</span>=<span class="string">&quot;ModelNumber:&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBox</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Width</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Product.ModelNumber, Mode=TwoWay, ValidatesOnNotifyDataErrors=True, NotifyOnValidationError=True&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Validation.ErrorTemplate</span>=<span class="string">&quot;&#123;StaticResource displayErrorMsgFomatte&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Command</span>=<span class="string">&quot;&#123;Binding DisplayCommand&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Display&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;为告知 WPF 使用 INotifyDataErrorInfo 接口，并通过该接口在修改属性时检査错误，绑定的 ValidatesOnNotifyDataErrors 属性必须为 true。</p><p>&emsp;&emsp;从技术角度看，<em>并非一定要明确设置 ValidatesOnNotifyDataErrors，因为默认情况下其值为true(类似的 ValidatesOnDataErrors属性与IDataErrorlnfo 接口一起使用，该属性与ValidatesOnNotifyDataErrors 是不同的)。但最好还是明确设置，以便清晰地表明准备在标记中使用它。</em></p><p>&emsp;&emsp;另外，可通过创建数据对象来综合使用这两种方法;数据对象为某些错误类型抛出异常并使用 IDataErrorlnfo 或 INotifDataErrorInfo 报告其他错误。但务必记住，这两种方法差异极大。<strong>当触发异常时,不会在数据对象中更新属性。但当使用 IDataErrorInfo或INotifyDataErrorinfo接口时，允许使用非法值，但会标记出来。数据对象会被更新，但您可使用通知和BindingValidationFailed 事件告知用户。</strong></p><h3 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;提高大列表的性能&quot;&gt;&lt;a href=&quot;#提高大列表的性能&quot; class=&quot;headerlink&quot; title=&quot;提高大列表的性能&quot;&gt;&lt;/a&gt;提高大列表的性能&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;如果处理大量数据——例如，数万条记录而不止几百条--您知道良好的数据</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 18自定义元素</title>
    <link href="http://bootree.cn/2024/07/27/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/18%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E7%B4%A0/"/>
    <id>http://bootree.cn/2024/07/27/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/18%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E7%B4%A0/</id>
    <published>2024-07-27T07:38:23.000Z</published>
    <updated>2024-07-31T12:29:46.132Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;WPF支持样式、内容控件和模板，因此不再强调自定义控件。这些特性为每位开发人员提供了多种方式来完善和扩展标准的控件，而不用派生新的控件类。下面是几种可能的选择：</p><ul><li><strong>样式</strong>。可使用样式方便地重用控件属性的组合。甚至可使用触发器应用效果</li><li><strong>内容控件</strong>。所有继承自<code>ContentControl</code>类的控件都支持嵌套的内容。使用内容控件，可以快速创建聚集其他元素的复合控件</li><li><strong>控件模板</strong>。所有WPF控件都是无外观的。这意味着它们具有硬编码的功能，但它们的外观是通过控件模板单独定义的。使用其他新的控件模板代替默认模板，可重新构建基本控件</li><li><strong>数据模板</strong>。所有派生自<code>ItemsControl</code>的类都支持数据模板，通过数据模板可创建某些数据对象类型的富列表示。通过恰当的数据模板，可使用许多元素的组合显示每个项，这些组合元素可以是文本、图像甚至可以是可编辑控件（都在所需的布局容器中）</li></ul><div class="note info flat"><p>&emsp;&emsp;如果可能的话，在决定创建自定义控件或其他了；诶新的自定义元素之前，可继续使用这些方法。这是因为这些解决方案更简单，更容易实现，并且通常更容易重用</p></div><blockquote><p>那么，何时应创建自定义元素呢?</p></blockquote><p>&emsp;&emsp;<strong>当希望微调元素的外观时，自定义元素并非最佳选择，但当希望改变底层的功能时，自定义元素就十分有用了</strong>。例如，WPF为TextBox控件和PasswordBox 控件使用不同的类是有原因的。它们使用不同的方法处理按键，以不同方式在内部保存它们的数据，以不同的方式与其他组件(如剪贴板)进行交互，等等。同样，<strong>如果希望设计一个具有不同属性、方法和事件集合的控件，就需要自己构建该控件。</strong></p><h2 id="理解WPF中的自定义元素"><a href="#理解WPF中的自定义元素" class="headerlink" title="理解WPF中的自定义元素"></a>理解WPF中的自定义元素</h2><p>&emsp;&emsp;尽管可在任意WPF项目中编写自定义元素，但通常希望在专门的类库程序集(DLL)中放置自定义元素。这样，可在多个WPF应用程序之间共享自定义元素。</p><p>&emsp;&emsp;为确保具有正确的程序集引用和名称空间导入，当在Visual Studio中创建应用程序时，应当选择<code>Custom Control Library(WPF)</code>项目类型。在类库中，可创建任意数量的控件。</p><p>&emsp;&emsp;通常自定义控件的第一步是选择争取的基类进行继承，下图列出了创建自定义控件时一些常用的基类：</p><center>用于创建自定义元素的基类</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>FrameworkElement</td><td>当创建自定义元素时，这是常用的最低级的基类。通常，只希望重写<code>OnRender()</code>方法并使用<code>System.Windows.Media.DrawingContext</code>成头绘制内容，才会使用这种方法。FrameworkElement类为那些不打算与用户进行交互的元素提供了一些基本的属性和事件</td></tr><tr><td>Control</td><td><strong>当从头开始创建控件时，这是最常用的起点。该类是所有用户交互小组讲的基类。</strong>Control类添加了用于设置背景、前景、字体和内容对其方式的属性。控件类还为自身设置了Tab顺序(通过IsTabStop属性)，并且引入了鼠标双击功能(通过MouseDoubleClick和PreviewMouseDoubleClick事件)。但最重要的是，Control类定义了<code>Teamplate</code>属性，为了得到武义县的灵活性，该属性允许使用自定义元素树替换其外观</td></tr><tr><td>ContentControl</td><td>这是能够显示单一内容的控件的基类。显示的内容可以是元素或结合使用模板的自定义对象(内容通过Content属性设置，并且可以通过ContentTemplate属性提供可选的模板)。许多控件都封装了特定的、类型在一定范围内的内容(例如，文本框中的文本字符串)。因为这些控件不支持所有元素，所以它们不是内容控件</td></tr><tr><td>UserControl</td><td>这是可使用设计视图进行配置的内容控件。尽管用户控件和普通的内容控件是不同的，但当希望在多个窗口中快速重用用户界面中的不变模块时(而不是创建真正的能在不同应用程序之间转移的独立控件)，通常使用该基类</td></tr><tr><td>ItemsControl或Selector</td><td>ItemsControl是封装项列表的控件的基类，当不支持选择，而Selector类是支持选择的控件的更具体的基类。创建自定义控件不经常使用这些类，因为ListBox、ListView以及TreeView控件的数据绑定特性提供了很大的灵活性</td></tr><tr><td>Panel</td><td>该类是具有布局逻辑控件的基类。布局控件能够包含多个子元素，并根据特定的布局语义安排这些子元素。通常，面板提供了用于设置子元素的附加属性，配置如何安排子元素</td></tr><tr><td>Decorator</td><td>封装其他元素的元素的基类，并且提供了一种图形效果或特定的功能。两个明显的例子是Border和Viewbox，其中Border控件在元素的周围绘制线条、Viewbox控件使用变换动态缩放其内容。其他装饰元素包括为普通控件提供熟悉边框和背景色的装饰类</td></tr><tr><td>特殊控件类</td><td>如果希望改进现有控件，可直接继承该控件，例如，可创建具有内置验证逻辑的TextBox控件。然而，在采取这一步之前，应当首先分析是否可通过事件处理代码或单独的组件达到同一目的。这两种方法都可使自定义逻辑和控件相分离，从而在其他控件中重用</td></tr></tbody></table><center>元素和控件基类</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240727165055.png" width="50%"/><div class="note info flat"><p>&emsp;&emsp;尽管可创建会控件的自定义元素，当在WPF中创建的大部分自定义元素都是控件——也就是说，它们能够接收焦点，并能与用户的按键操作和鼠标操作进行交互。所以在WPF开发领域，术语“自定义元素”和“自定义控件”有时互换使用。</p></div><h2 id="构建基本的用户控件"><a href="#构建基本的用户控件" class="headerlink" title="构建基本的用户控件"></a>构建基本的用户控件</h2><blockquote><p>接下来的示例中，首先创建一个基本的颜色拾取器</p></blockquote><p>&emsp;&emsp;可为颜色拾取器创建自定义对话框。但如果希望创建能集成进不同窗口的颜色拾取器，使用自定义控件是更好的选择。最简单的自定义控件类型是用户控件，当设计窗口或页面时通过用户控件可以使用相同的方式组装多个元素。因为仅通过直接组合现有控件并添加功能并不能实现颜色拾取器，所以用户控件看起来是更合理的选择。</p><h3 id="定义依赖项属性"><a href="#定义依赖项属性" class="headerlink" title="定义依赖项属性"></a>定义依赖项属性</h3><p>&emsp;&emsp;创建颜色拾取器的第一步是为自定义控件库添加用户控件。当添加用户控件后，Visual Studio会创建XAML标记我文件和响应的包含初始化代码与事件处理代码的自定义类。这与创建新的窗口或页面是相同的——唯一的区别在于顶级容器是UserControl类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ColorPicker</span> : <span class="title">System.Windows.Controls.UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorPicker</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最简单的起点是设计用户控件对外界公开的公共接口。换句话说，就是设计控件使用者(使用控件的应用程序)使用的与颜色拾取器进行交互的属性、方法和事件。<br>&emsp;&emsp;最基本的细节是 Color属性——毕竟，颜色拾取器不过是用于显示和选择颜色值的特定工为支持 WPF 特性，如数据绑定、样式以及动画，控件的可写属性几乎都是依赖项属性。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ColorPicker</span> : <span class="title">UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorPicker</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Color Color</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Color)GetValue(ColorProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(ColorProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty ColorProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">&quot;Color&quot;</span>, <span class="keyword">typeof</span>(Color), <span class="keyword">typeof</span>(ColorPicker), <span class="keyword">new</span> PropertyMetadata(Colors.Black, OnColorChanged));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnColorChanged</span>(<span class="params">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Color newColor = (Color)e.NewValue;</span><br><span class="line">        </span><br><span class="line">        ColorPicker colorPicker = (ColorPicker)d;</span><br><span class="line">        colorPicker.Red = newColor.R;</span><br><span class="line">        colorPicker.Green = newColor.G;</span><br><span class="line">        colorPicker.Blue = newColor.B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> Red</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">byte</span>)GetValue(RedProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(RedProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty RedProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">&quot;Red&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">byte</span>), <span class="keyword">typeof</span>(ColorPicker), <span class="keyword">new</span> PropertyMetadata(OnColorRGBChanged));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> Green</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">byte</span>)GetValue(GreenProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(GreenProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty GreenProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">&quot;Green&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">byte</span>), <span class="keyword">typeof</span>(ColorPicker), <span class="keyword">new</span> PropertyMetadata(OnColorRGBChanged));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> Blue</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">byte</span>)GetValue(BlueProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(BlueProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty BlueProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">&quot;Blue&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">byte</span>), <span class="keyword">typeof</span>(ColorPicker), <span class="keyword">new</span> PropertyMetadata(OnColorRGBChanged));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnColorRGBChanged</span>(<span class="params">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ColorPicker colorPicker = (ColorPicker)d;</span><br><span class="line">        Color color = colorPicker.Color;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e.Property == RedProperty)</span><br><span class="line">            color.R = (<span class="built_in">byte</span>)e.NewValue;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.Property == GreenProperty)</span><br><span class="line">            color.G = (<span class="built_in">byte</span>)e.NewValue;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.Property == BlueProperty)</span><br><span class="line">            color.B = (<span class="built_in">byte</span>)e.NewValue;</span><br><span class="line"></span><br><span class="line">        colorPicker.Color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尽管很明显，但当各个属性试图改变其他属性时，<strong>上面的代码不会引起一系列无休止的调用。因为 WPF 不允许重新进入属性变化回调函数。</strong>例如，如果改变Color 属性，就会触发OnColorChanged( )方法。0nColorChanged( )方法会修改 Red、Green 以及 Blue 属性，从而触发OnColorRGBChanged( )回调方法三次(每个属性触发一次)。然而，OnColorRGBChanged( )方法不会再次触发 OnColorChanged( )方法。</p><h3 id="定义路由事件"><a href="#定义路由事件" class="headerlink" title="定义路由事件"></a>定义路由事件</h3><p>&emsp;&emsp;您可能还希望添加路由事件，当发生一些事情时用于通知控件使用者。在颜色拾取器示例中，当颜色发生变化后，触发一个事件是很有用处的。尽管可将这个事件定义为普通的.NET事件，但使用路由事件可提供事件冒泡和隧道特性，从而可在更高层次的父元素(如包含窗口)中处理事件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnColorChanged</span>(<span class="params">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Color newColor = (Color)e.NewValue;</span><br><span class="line">    Color oldColor = (Color)e.OldValue;</span><br><span class="line"></span><br><span class="line">    ColorPicker colorPicker = (ColorPicker)d;</span><br><span class="line">    colorPicker.Red = newColor.R;</span><br><span class="line">    colorPicker.Green = newColor.G;</span><br><span class="line">    colorPicker.Blue = newColor.B;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// +++</span></span><br><span class="line">    RoutedPropertyChangedEventArgs&lt;Color&gt; args = <span class="keyword">new</span> RoutedPropertyChangedEventArgs&lt;Color&gt;(oldColor, newColor);</span><br><span class="line">    args.RoutedEvent = ColorPicker.ColorChangedEvent;</span><br><span class="line"></span><br><span class="line">    colorPicker.RaiseEvent(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> RoutedEvent ColorChangedEvent =</span><br><span class="line">    EventManager.RegisterRoutedEvent(<span class="string">&quot;ColorChanged&quot;</span>, RoutingStrategy.Bubble, <span class="keyword">typeof</span>(RoutedPropertyChangedEventHandler&lt;Color&gt;), <span class="keyword">typeof</span>(ColorPicker));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件后，需要创建标准的&gt;NET事件封装器来公开事件。事件封装器可用于关联和删除事件监听程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> RoutedPropertyChangedEventHandler&lt;Color&gt; ColorChanged</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">add</span> &#123; AddHandler(ColorChangedEvent, <span class="keyword">value</span>); &#125;</span><br><span class="line">    <span class="keyword">remove</span></span><br><span class="line">    &#123;</span><br><span class="line">        RemoveHandler(ColorChangedEvent, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;不一定要为事件签名创建新的委托，有时可重用已经存在的委托。两个有用的委托是<code>ReoutedEventHandler(用于不带有额外信息的路由事件)</code>和<code>RoutedPropertyChangedEventHandler(用于提供属性发生变化之后的旧值和新值的路由事件)</code>。上例中使用的<code>RoutedPropertyChangedEventHandler</code>委托，是被类型参数化了的泛型委托。所以，可为任何属性数据类型使用该委托，而不会牺牲类型安全功能。</p><h3 id="添加标记"><a href="#添加标记" class="headerlink" title="添加标记"></a>添加标记</h3><p>&emsp;&emsp;现在已经定义好用户控件的公有结构，需要做的所有工作就是创建控件外观的标记。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;CustomControlLibrary.ColorPicker&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Name</span>=<span class="string">&quot;colorPicker&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">d:DesignWidth</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;sliderRed&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding ElementName=colorPicker, Path=Red&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;sliderGreen&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding ElementName=colorPicker, Path=Green&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;sliderBlue&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding ElementName=colorPicker, Path=Blue&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Grid.RowSpan</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Color</span>=<span class="string">&quot;&#123;Binding ElementName=colorPicker, Path=Color&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用于用户控件的标记和无外观控件的控件模板扮演相同的角色。如果希望使标记中的一细节是可配置的，可使用将它们连接到控件属性的绑定表达式。例如，目前Rectangle 元素的宽度被固定为 50个单位。然而，可使用数据绑定表达式从用户控件的依赖项属性中提取数值来代替这些细节。这样，控件使用者可通过修改属性来选择不同的宽度。同样，可使画颜色和宽度也是可变的。<strong>然而，如果希望使控件具有真正的灵活性，最好创建无外观的控件，并在模板中定义标记，</strong>如稍后所述。</p><div class="note danger no-icon modern"><p>推荐在UserControl中采用RelativeSource绑定依赖项属性</p></div><p>&emsp;&emsp;在此演示的示例中，为顶级的 UserControl 控件指定了名称(colorPicker)，从而可以直接编写绑定到自定义用户控件类中属性的数据绑定表达式。然而，这种技术导致了一个明显的问题。当在窗口(或页面)中创建用户控件的实例并为之指定新名称时，会发生什么情况呢?<br>&emsp;&emsp;幸运的是，这种情况可以工作，不会出现问题，因为用户控件在包含它的窗口之前执行初始化。首先初始化用户控件，并连接它的数据绑定。接下来初始化窗口，并且在窗口标记中设置的名称被应用到用户控件。窗口中的数据绑定表达式和事件处理程序现在可使用在窗口中定义的名称访问用户控件，而且所有工作都如您所期望的那样进行。<br>&emsp;&emsp;尽管这听来简单，但如果使用代码检查 UserControl.Name 属性，可能会注意到一些奇怪的问题。例如，如果在用户控件的某个事件处理程序中检查Name 属性，将看到在窗口中定义的新名称。类似地，如果没有在窗口标记中设置名称，用户控件会继续保留来自用户控件标记的名称。如果在窗口代码中检查Name属性，就会看到这个名称。<br>&emsp;&emsp;虽然这些奇怪的事情并不表示存在问题，但更好的方法是避免在用户控件的标记中命名用户控件，并使用 Bimding.RelativeSource 属性查找元素树，直到找到 UserControl 父元素。下面是完成该工作的更长一些的语法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Name</span>=<span class="string">&quot;sliderRed&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding Path=Red, RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=&#123;x:Type UserControl&#125;&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用控件"><a href="#使用控件" class="headerlink" title="使用控件"></a>使用控件</h3><p>&emsp;&emsp;</p><div class="tabs" id="usecolorpicker"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="usecolorpicker-1">MainWindow.xaml</button><button type="button" class="tab " data-href="usecolorpicker-2">MainWindow.xaml.cs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="usecolorpicker-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:lib</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;375&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;240&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lib:ColorPicker</span> <span class="attr">ColorChanged</span>=<span class="string">&quot;ColorPicker_ColorChanged&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Beige&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;lblColor&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Bottom&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="usecolorpicker-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ColorPicker_ColorChanged</span>(<span class="params"><span class="built_in">object</span> sender, RoutedPropertyChangedEventArgs&lt;System.Windows.Media.Color&gt; e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (lblColor != <span class="literal">null</span>)</span><br><span class="line">            lblColor.Text = <span class="string">&quot;The new color is &quot;</span> + e.NewValue.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="命令支持"><a href="#命令支持" class="headerlink" title="命令支持"></a>命令支持</h3><p>&emsp;&emsp;许多控件具有命令支持。可使用以下两种方法为自定义控件添加命令支持：</p><ul><li>添加将控件链接到特定命令的命令绑定。通过这种方式，控件可以响应命令，而且不需要借助于任何外部代码</li><li>为命令创建新的<code>ReoutedUICommand</code>对象，作为自定义控件的静态字段。然后为这个命令对象添加命令绑定。这种方法可使自定义控件自动支持没有在基本命令类集合中定义的命令</li></ul><p>&emsp;&emsp;在颜色拾取器中为了支持Undo功能，需要使用成员字段跟踪以前选择的颜色：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColorPicker</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line"></span><br><span class="line">    SetUpCommands();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetUpCommands</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Set up command bindings.</span></span><br><span class="line">    CommandBinding binding = <span class="keyword">new</span> CommandBinding(ApplicationCommands.Undo, UndoCommand_Executed, UndoCommand_CanExecute); ;</span><br><span class="line">    <span class="keyword">this</span>.CommandBindings.Add(binding);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UndoCommand_Executed</span>(<span class="params"><span class="built_in">object</span> sender, ExecutedRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_previousColor != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.Color = (Color)_previousColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UndoCommand_CanExecute</span>(<span class="params"><span class="built_in">object</span> sender, CanExecuteRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    e.CanExecute = _previousColor.HasValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更可靠的命令"><a href="#更可靠的命令" class="headerlink" title="更可靠的命令"></a>更可靠的命令</h4><p>&emsp;&emsp;前面描述的技术是将命令链接到控件的相当合理的方法，但这不是在WPF元素和专业控件中使用的技术。<strong>这些元素使用更可靠的方法，并使用<code>CommandManager.RegisterClassCommandBinding()</code>方法关联静态的命令处理程序。</strong></p><p>&emsp;&emsp;上一个示例中样式的实现存在问题：<strong>使用<code>CommandBindings</code>集合。这使得命令比较脆弱，因为客户可自由地修改<code>CommandBindings</code>集合。而使用<code>RegisterClassCommandBinding()</code>方法无法做到这一点。</strong>WPF控件使用的就是这种方法。</p><p>&emsp;&emsp;这种技术非常简单。不在实例构造函数中创建命令绑定，而<strong>必须在静态构造函数中创建命令绑定</strong>，使用如下所示的代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">ColorPicker</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    CommandManager.RegisterClassCommandBinding(</span><br><span class="line">        <span class="keyword">typeof</span>(ColorPicker),</span><br><span class="line">        <span class="keyword">new</span> CommandBinding(</span><br><span class="line">            ApplicationCommands.Undo,</span><br><span class="line">            UndoCommand_Executed,</span><br><span class="line">            UndoCommand_CanExecute</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UndoCommand_Executed</span>(<span class="params"><span class="built_in">object</span> sender, ExecutedRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ColorPicker colorPicker = (ColorPicker)sender;</span><br><span class="line">    colorPicker.Color = (Color)colorPicker._previousColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UndoCommand_CanExecute</span>(<span class="params"><span class="built_in">object</span> sender, CanExecuteRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ColorPicker colorPicker = (ColorPicker)sender;</span><br><span class="line">    e.CanExecute = colorPicker._previousColor.HasValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此外，这种技术不局限于命令。<strong>如果希望将事件处理逻辑硬编码到自定义控件，可通过<code>EventManager.RegisterClassHandler()</code>方法使用类事件处理程序。类事件处理程序总在实例事件处理程序之前调用，从而允许开发人员很容易地抑制事件。</strong></p><h3 id="深入分析用户控件"><a href="#深入分析用户控件" class="headerlink" title="深入分析用户控件"></a>深入分析用户控件</h3><p>&emsp;&emsp;用户控件提供了一种非常简单，但是有一定限制的创建自定义控件的方法。为理解其中的原因，深入分析用户控件的工作原理是很有帮助的。<br>&emsp;&emsp;在后台，<code>UserControl</code>类的工作方式和其分类<code>ContentControl</code>非常类似。实际上，只有几个重要的区别：</p><ul><li><code>UserControl 类改变了一些默认值</code>。即该类<strong>将 IsTabStop 和 Focusable 属性设置为 false</strong>(从而在Tab 顺序中没有占据某个单独的位置)，并<strong>将HorizontalAlignment和 VerticalAlignment 属性设置为 Stretch</strong>(而非 Left 或 Top)，从而可以填充可用空间。</li><li><code>UserControl 类应用了一个新的控件模板</code>，该模板由包含 ContentPresenter 元素的 Border元素组成。ContentPresenter元素包含了用标记添加的内容。</li><li><code>UserControl 类改变了路由事件的源。</code>当事件从用户控件内的控件向用户控件外的元素冒泡或隧道路由时，事件源变为指向用户控件而不是原始元素。这提供了更好的封装性(例如，如果在包含颜色拾取器的布局容器中处理 UIElement,MouseLeftButtonDown 事件，当单击内部的 Rectangle 元素时将接收到事件。然而，这个事件的源不是 Rectangle 元素，而是包含 Rectangle 元素的 ColorPicker 对象。如果作为普通的内容控件创建相同的颜色拾取器，情况就不同了--您需要在控件中拦截事件、处理事件并且重新引发事件)。</li></ul><p>&emsp;&emsp;<code>用户控件与其他类型的自定义控件之间最重要的区别是设计用户控件的方法。</code>与所有控件样，用户控件有控件模板。然而，很少改变控件模板——反而，将作为自定义用户控件类的一部分提供标记，并且当创建了控件后，会使用InitializeComponent()方法处理这个标记。另一方面，无外观控件是没有标记的——需要的所有内容都在模板中。</p><blockquote><p>简单的UserControl模板</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type UserControl&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;&#123;TemplateBinding Control.Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Panel.Background&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding Border.BorderBrush&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">            <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding Control.HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding Control.VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding ContentControl.Content&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ContentTemplate</span>=<span class="string">&quot;&#123;TemplateBinding ContentControl.ContentTemplate&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding UIElement.SnapsToDevicePixels&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从技术角度看，可改变用户控件的模板。实际上，只需要进行很少的调整，就可以将所有标记移到模板中。但确实没有理由采取该方法——如果希望得到更灵活的控件，使可视化外观和由自定义控件类定义的接口分开，创建无外观的自定义控件可能会更好一些。</p><h2 id="创建无外观控件"><a href="#创建无外观控件" class="headerlink" title="创建无外观控件"></a>创建无外观控件</h2><p>&emsp;&emsp;<strong>用户控件的目标是提供增补控件模板的设计表面，提供一种定义控件的快速方法，代价是失去了将来的灵活性。</strong>如果喜欢用户控件的功能，但需要修改其可视化外观，使用这种方法就有问题了。例如，设想希望使用相同的颜色拾取器，但希望使用不同的“皮肤”，将其更好地融合到已有的应用程序窗口中。可以通过样式来改变用户控件的某些方面，但该控件的一些部分是在内部锁定的，并硬编码到标记中。例如，无法将预览矩形移动到滑动条的左边。</p><p>&emsp;&emsp;<strong>解决方法是创建无外观控件——继承自控件基类，但没有设计表面的控件。</strong>相反，这个控件将其标记放到默认模板中，可替换默认模板而不会影响控件逻辑。</p><h3 id="修改颜色拾取器的代码"><a href="#修改颜色拾取器的代码" class="headerlink" title="修改颜色拾取器的代码"></a>修改颜色拾取器的代码</h3><p>&emsp;&emsp;将颜色拾取器改成无外观的，只需要修改类的声明，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ColorPicker</span> : <span class="title">System.Windows.Controls.Control</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个示例中，<strong>ColorPicker类继承自Control类。继承自FrameworkElement 类是不合适的因为颜色拾取器允许与用户进行交互，而且其他高级的类不能准确地描述颜色拾取器的行为例如，颜色拾取器不允许在内部嵌套其他内容，所以继承自ContentControl类也是不合适的。</strong></p><p>&emsp;&emsp;ColorPicker类中的代码与用于用户控件的代码是相同的(除了必须删除构造函数中的ImitializeComponent()方法调用)。可使用相同的方法定义依赖项属性和路由事件。<code>唯一的区别是需要通知 WPF，将为控件类提供新样式</code>。该样式将提供新的控件模板(如果不执行该步骤，将继续使用在基类中定义的模板)。</p><blockquote><p>为通知WPF正在提供新的样式，需要在自定义控件类的静态构造函数中调用<code>DefaultStyleKeyProperty.OverrideMetadata()</code>，该属性是为自定义控件定义默认央视的依赖项属性。需要的代码如下所示：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DefaultStyleKeyProperty.OverrideMetadata(</span><br><span class="line">    <span class="keyword">typeof</span>(ColorPicker),</span><br><span class="line">    <span class="keyword">new</span> FrameworkPropertyMetadata(<span class="keyword">typeof</span>(ColorPicker))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果希望使用其他控件类的模板，可提供不同的类型，当几乎总是为每隔自定义控件创建特定的样式。</p><h3 id="修改颜色拾取器的标记"><a href="#修改颜色拾取器的标记" class="headerlink" title="修改颜色拾取器的标记"></a>修改颜色拾取器的标记</h3><p>&emsp;&emsp;添加对<code>OverrideMetadata()</code>方法的调用后，只需要插入正确的样式。需要将样式房子啊名为<code>Generic.xaml</code>的资源字典中，该资源字典必须放在项目文件夹的<code>Themes</code>子文件夹中。这样，该样式就会被识别为自定义控件的默认样式。下面列出添加<code>Generic.xaml</code>文件的具体步骤：</p><ol><li>在<em>Solution Explorer</em>中右击类库项目，并选择<em>Add|New Folder</em>菜单项</li><li>将新文件夹命名为<code>Themes</code></li><li>右击<em>Themes</em>文件夹，并选择<em>Add|New Item</em>菜单项</li><li>在<em>Add New Item</em>对话框中选择<em>Resource Dictionary File</em>，输入名称<code>Generic.xaml</code>，并单击<em>Add</em>按钮</li></ol><blockquote><p>主题专用的样式和Generic.xaml文件</p></blockquote><p><em>&emsp;&emsp;您已经看到，ColorPicker从generic.xaml 文件获取默认的控件模板，generic.xaml 文件位于Themes 项目文件夹中。这个稍有些怪异的约定实际上是旧式WPF 功能的一部分:Windows 主题支持<br>&emsp;&emsp;Windows 主题支持的初衷是使开发人员创建控件的自定义版本来匹配不同的 Windows 主题。Wimndows XP 计算机使用主题来控制 Windows 应用程序的总体颜色方案，Windows 主题支持在此类计算机上最有意义。Windows Vista 引入了 Aero 主题，该主题有效地取代了旧的主题选项，后续 Widows 版本尚未改变这种事态，因此人们现在普遍忽略了原本就不怎么常用的WPF 中的 Windows主题功能。<br>&emsp;&emsp;不过，当今的 WPF 应用程序开发人员总是使用 generic.xam 文件来设置默认的控件样式generic.xaml 文件的名称(及其所在的 Themes 文件夹)被延用下来。</em></p><p>&emsp;&emsp;通常，自定义控件库会包含几个控件。为了保持它们的样式相互独立以便编辑，<code>Generic.xaml</code>文件通常使用资源字典合并功能。下面的标记显示了<code>Generic.xaml</code>文件，该文件成<code>ColorPicker.xaml</code>资源字典中提取资源，该资源字典位于<em>CustomControls</em>控件库的<em>Themes</em>子文件夹中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;/CustomControlLibrary;component/Themes/ColorPicker.xaml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;自定义的控件样式必须使用<code>TargetType</code>特性将自身自动关联到颜色拾取器。下面是<em>ColorPicker.xaml</em>文件中标记的基本结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:ColorPicker&#125;&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可使用样式设置控件类中的任意属性（无论是继承自基类的属性还是新增属性）。但在此，样式最有用的任务是应用新模板，新模板定义了控件的默认可视化外观。<br>&emsp;&emsp;很容易就能将普通标记（如颜色拾取器使用的标记）转换到控件模板中。但要注意以下几点：</p><ul><li>当创建链接到父控件类属性的绑定表达式时，不能使用<code>ElementName</code>属性。而需要使用<code>RelativeSource</code>属性指示希望绑定到父控件。如果单向绑定完全满足需要，通常可以使用轻量级的<code>TeamplateBinding</code>标记表达式，而不需要使用功能完备的数据绑定。</li><li>不能在控件模板中关联事件处理程序。相反，需要为元素提供能够识别的名称，并在控件构造函数中通过代码为它们关联事件处理程序。</li><li>除非希望关联事件处理程序或通过代码与它们进行交互，否则不要在控件模板中命名元素。当命名希望使用的元素时，使用“<code>PART_元素名</code>”的形式进行命名</li></ul><blockquote><p>遵循上面几点，可为颜色拾取器创建以下模板：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:ColorPicker&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:ColorPicker&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Slider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding Red, RelativeSource=&#123;RelativeSource TemplatedParent&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Slider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding Green, RelativeSource=&#123;RelativeSource TemplatedParent&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Slider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding Blue, RelativeSource=&#123;RelativeSource TemplatedParent&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Rectangle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Grid.RowSpan</span>=<span class="string">&quot;3&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Color</span>=<span class="string">&quot;&#123;Binding Color, RelativeSource=&#123;RelativeSource TemplatedParent&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用 TemplateBinding 扩展替换一些绑定表达式。其他一些绑定表达式仍使用 Binding 扩展，但将 RelativeSource 设置为指向模板的父元素(自定义控件)。<strong>尽管TemplateBinding 和将 RelativeSource 属性设置为 TemplatedParent 值的 Binding 的作用相同从自定义控件的属性中提取数据——但是使用量级更轻的 TemplateBinding 总是合适的。</strong>如果需要双向绑定(与滑动条一样)或绑定到继承自Freezable的类(如 SolidColorBrush 类)的属性TemplateBinding 就不能工作了。</p><h3 id="精简控件模板"><a href="#精简控件模板" class="headerlink" title="精简控件模板"></a>精简控件模板</h3><p>&emsp;&emsp;现在，所有希望提供自定义模板的控件使用者都必须添加大量绑定表达式，以确保控制能够继续工作。这并不难，但很繁琐。另一种选择是，在控件自身的初始化代码中配置所有绑定表达式。这样，模板就不需要指定这些细节了。</p><div class="note info flat"><p>&emsp;&emsp;当为构成自定义控件的元素关联事件处理程序时使用的是相同的技术。通过代码关联事件处理程序，而不是在模板中使用事件特性</p></div><h4 id="添加部件名称"><a href="#添加部件名称" class="headerlink" title="添加部件名称"></a>添加部件名称</h4><p>&emsp;&emsp;为了让这一系统能够工作，代码要能找到所需的元素。WPF控件通过名称定位它们需要的元素。所以，元素的名称就成自定义控件公有结构的一部分，而且需要恰当的描述性名称。根据约定，这些名称以<code>PART_开头</code>，后跟元素名称。元素的名称的首字母要大写，就像属性名称。对于需要的元素名称，<code>PART_RedSlider</code>是适合的选择，而<em>PART_sldRed、PART_redSlider</em>以及<em>RedSlider</em>等名称都不合适。</p><p>&emsp;&emsp;下面的标记样式了如何通过删除三个滑动条的<em>Value</em>属性的绑定表达式，并为三个滑动条添加*<code>PART_名称</code>*，从而为通过代码设置绑定做好准备：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Name</span>=<span class="string">&quot;PART_RedSlider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Name</span>=<span class="string">&quot;PART_GreenSlider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Slider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Name</span>=<span class="string">&quot;PART_BlueSlider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Maximum</span>=<span class="string">&quot;255&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.RowSpan</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Name</span>=<span class="string">&quot;PART_PreviewBrush&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="操作模板部件"><a href="#操作模板部件" class="headerlink" title="操作模板部件"></a>操作模板部件</h4><p>&emsp;&emsp;在初始化控件后，可连接绑定表达式，但有一种更好的方法。<strong>WPF有一个专用的<code>OnApplyTemplate()</code>方法，如果需要在模板中查找元素并关联事件处理程序或添加数据绑定表达式，应重写该方法。在该方法中，可以使用<code>GetTemplateChild()</code>方法（该方法继承自<code>FrameworkElement</code>）查找所需的元素。</strong></p><p>&emsp;&emsp;如果没有找到希望处理的元素，推荐的模式就不起作用。也可添加代码来检查该元素，如果元素存在，再检查类型是否正确；如果类型不正确，就引发异常（此处的想法是，不存在的元素代表有意丢失某个特定功能，但元素类型不正确代表错误）。</p><p>&emsp;&emsp;下面的代码演示了如何在<code>OnApplyTemplate()</code>方法中连接其中一个滑动条的数据绑定表达式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnApplyTemplate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnApplyTemplate();</span><br><span class="line"></span><br><span class="line">    RangeBase redSlider = GetTemplateChild(<span class="string">&quot;PART_RedSlider&quot;</span>) <span class="keyword">as</span> RangeBase;</span><br><span class="line">    <span class="keyword">if</span> (redSlider != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Bind to the Red property in the control, using a two-way binding.</span></span><br><span class="line">        Binding binding = <span class="keyword">new</span> Binding(<span class="keyword">nameof</span>(Red));</span><br><span class="line">        binding.Source = <span class="keyword">this</span>;</span><br><span class="line">        binding.Mode = BindingMode.TwoWay;</span><br><span class="line">        redSlider.SetBinding(RangeBase.ValueProperty, binding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RangeBase greenSlider = GetTemplateChild(<span class="string">&quot;PART_GreenSlider&quot;</span>) <span class="keyword">as</span> RangeBase;</span><br><span class="line">    <span class="keyword">if</span> (greenSlider != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Bind to the Red property in the control, using a two-way binding.</span></span><br><span class="line">        Binding binding = <span class="keyword">new</span> Binding(<span class="keyword">nameof</span>(Green));</span><br><span class="line">        binding.Source = <span class="keyword">this</span>;</span><br><span class="line">        binding.Mode = BindingMode.TwoWay;</span><br><span class="line">        greenSlider.SetBinding(RangeBase.ValueProperty, binding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RangeBase blueSlider = GetTemplateChild(<span class="string">&quot;PART_BlueSlider&quot;</span>) <span class="keyword">as</span> RangeBase;</span><br><span class="line">    <span class="keyword">if</span> (blueSlider != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Bind to the Red property in the control, using a two-way binding.</span></span><br><span class="line">        Binding binding = <span class="keyword">new</span> Binding(<span class="keyword">nameof</span>(Blue));</span><br><span class="line">        binding.Source = <span class="keyword">this</span>;</span><br><span class="line">        binding.Mode = BindingMode.TwoWay;</span><br><span class="line">        blueSlider.SetBinding(RangeBase.ValueProperty, binding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SolidColorBrush brush = GetTemplateChild(<span class="string">&quot;PART_PreviewBrush&quot;</span>) <span class="keyword">as</span> SolidColorBrush;</span><br><span class="line">    <span class="keyword">if</span> (brush != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Binding binding = <span class="keyword">new</span> Binding(<span class="keyword">nameof</span>(Color));</span><br><span class="line">        binding.Source = brush;</span><br><span class="line">        binding.Mode = BindingMode.OneWayToSource;</span><br><span class="line">        <span class="keyword">this</span>.SetBinding(ColorPicker.ColorProperty, binding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意，上面代码使用的是 <code>System,Windows.Controls,Primitives.RangeBase</code> 类(Slider 类继承自该类)而不是 Slider 类。因为 RangeBase 类提供了需要的最小功能——在本例中是指 Value 属性通过尽可能提高代码的通用性，控件使用者可获得更大自由。例如，现在可提供自定义模板，使用不同的派生自 RangeBase 类的控件代替颜色滑动条。</p><blockquote><p>为查看这种设计变化的优点，需要创建一个使用颜色拾取器的控件，并提供一个新的控件模板</p></blockquote><center>具有两个不同模板的颜色拾取器自定义控件</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240728162520.png" width="50%"/><h4 id="记录模板部件"><a href="#记录模板部件" class="headerlink" title="记录模板部件"></a>记录模板部件</h4><p>&emsp;&emsp;良好的设计指导原则建议为控件声明添加<code>TemplatePart</code>特性，以记录在控件模板中使用了那些部件名称，以及为每个部件使用了什么类型的控件。成技术角度该，这一步不是必需的，但该文档可为其他使用自定义类的用户提供帮助（还可通过允许构建自定义控件模板的设计工具(如Expression Blend)来进行检查）。</p><p>&emsp;&emsp;下面是应当为<code>ColorPicker</code>控件类添加的<code>TemplatePart</code>特性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TemplatePart(Name = <span class="string">&quot;PART_RedSlider&quot;</span>, Type = typeof(RangeBase))</span>]</span><br><span class="line">[<span class="meta">TemplatePart(Name = <span class="string">&quot;PART_GreenSlider&quot;</span>, Type = typeof(RangeBase))</span>]</span><br><span class="line">[<span class="meta">TemplatePart(Name = <span class="string">&quot;PART_BlueSlider&quot;</span>, Type = typeof(RangeBase))</span>]</span><br><span class="line">[<span class="meta">TemplatePart(Name = <span class="string">&quot;PART_PreviewBrush&quot;</span>, Type = typeof(SolidColorBrush))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ColorPicker</span> : <span class="title">System.Windows.Controls.Control</span></span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>&emsp;&emsp;每个控件都有默认样式。可调用控件类静态构造函数的<code>DefaultStyleProperty.OverrideMetadata()</code>方法来指示自定义控件应使用的默认样式。否则，自定义控件将简单地使用为基类控件定义的默认样式</p></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Style style = Application.Current.FindResource(<span class="keyword">typeof</span>(Button));</span><br></pre></td></tr></table></figure><h2 id="支持可视化状态"><a href="#支持可视化状态" class="headerlink" title="支持可视化状态"></a>支持可视化状态</h2><p>&emsp;&emsp;ColorPicker控件是控件设计的极佳示例。因为其行为风格实话外观是精心分离的，所以其他设计人员可开发动态改变其外观的新模板。<br>&emsp;&emsp;ColorPicker 控件如此简单的一个原因是它不涉及状态。换句话说,它不根据是否具有焦点、鼠标是否在它上面悬停、是否禁用等状态区分其可视化外观。接下来的FlipPanel 自定义控件有些不同。</p><p>&emsp;&emsp;FlipPanel 控件背后的基本思想是，为驻留内容提供两个表面，但每次只有一个表面是可见的。为看到其他内容，需要在两个表面之间进行“翻转”。可通过控件模板定制翻转效果，但默认效果使用在前面和后面之间进行过渡的淡化效果。根据应用程序，可以使用 FlinPanel 控件把数据条目表单与一些有帮助的文档组合起来，以便为相同的数据提供一个简单或较复杂的视图，或在一个简单游戏中将问题和答案融合在一起。</p><p>&emsp;&emsp;可通过代码执行翻转（通过设置名为IsFlipped的属性），也可使用一个便捷的按钮来翻转面板（除非控件使用者从模板中移除了该按钮）<br>&emsp;&emsp;<em>显然，控件模板需要指定两个独立部分:FlipPanel控件的前后内容区域。然而，还有一个细节--FlipPanel控件需要一种方法在两个状态之间进行切换:翻转过的状态与未翻转过的状态。可通过为模板添加触发器来完成该工作。当单击按钮时，可使用一个触发器隐藏前面的面板并显示第二个面板，而使用另一个触发器翻转这些更改。这两个触发器都可以使用您喜欢的任何动画。但通过使用可视化状态，可向控件使用者清晰地指明这两个状态是模板的必需部分。不是为适当的属性或事件编写触发器，控件使用者只需要填充适当的状态动画。如果使用Expression Blend，该任务甚至变得更简单。</em></p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/GmN6LQGNRk.gif"/><h3 id="开始编写FlipPanel类"><a href="#开始编写FlipPanel类" class="headerlink" title="开始编写FlipPanel类"></a>开始编写FlipPanel类</h3><p>&emsp;&emsp;<em>FlipPanel的基本骨架非常简单。包含用户可用单一元素(最有可能是包含各种元素的布局容器)填充的两个内容区域。从技术角度看，这意味着FlipPanel 控件不是真正的面板，因为不能使用布局逻辑组织一组子元素。然而，这不会造成问题，因为FlipPanel 控件的结构是清晰直观的。FlipPanel控件还包含一个翻转按钮，用户可使用该按钮在两个不同的内容区域之间进行切换。</em></p><p>&emsp;&emsp;尽管可通过继承自<code>ContentControl</code>或<code>Panel</code>等控件类来创建自定义控件，但是<em>FlipPanl</em>直接继承自<code>Control</code>基类。如果不需要特定控件类的功能，这是最好的起点。不应当继承自更简单的<code>FrameworkworkElement</code>类，除非希望创建不实用标准控件和模板基础架构的元素：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlipPanel</span> : <span class="title">System.Windows.Controls.Control</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">FlipPanel</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        DefaultStyleKeyProperty.OverrideMetadata(</span><br><span class="line">            <span class="keyword">typeof</span>(FlipPanel),</span><br><span class="line">            <span class="keyword">new</span> FrameworkPropertyMetadata(<span class="keyword">typeof</span>(FlipPanel))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> FrontContent</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">object</span>)GetValue(FrontContentProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(FrontContentProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty FrontContentProperty =</span><br><span class="line">        DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;FrontContent&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(<span class="built_in">object</span>),</span><br><span class="line">            <span class="keyword">typeof</span>(FlipPanel),</span><br><span class="line">            <span class="keyword">new</span> PropertyMetadata(<span class="literal">null</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> BackContent</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">object</span>)GetValue(BackContentProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(BackContentProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty BackContentProperty = DependencyProperty.Register(</span><br><span class="line">        <span class="string">&quot;BackContent&quot;</span>,</span><br><span class="line">        <span class="keyword">typeof</span>(<span class="built_in">object</span>),</span><br><span class="line">        <span class="keyword">typeof</span>(FlipPanel),</span><br><span class="line">        <span class="keyword">new</span> PropertyMetadata(<span class="literal">null</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsFlipped</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">bool</span>)GetValue(IsFlippedProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(IsFlippedProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty IsFlippedProperty = DependencyProperty.Register(</span><br><span class="line">        <span class="string">&quot;IsFlipped&quot;</span>,</span><br><span class="line">        <span class="keyword">typeof</span>(<span class="built_in">bool</span>),</span><br><span class="line">        <span class="keyword">typeof</span>(FlipPanel),</span><br><span class="line">        <span class="keyword">new</span> PropertyMetadata(<span class="literal">false</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CornerRadius CornerRadius</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (CornerRadius)GetValue(CornerRadiusProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(CornerRadiusProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty CornerRadiusProperty =</span><br><span class="line">        DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;CornerRadius&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(CornerRadius),</span><br><span class="line">            <span class="keyword">typeof</span>(FlipPanel),</span><br><span class="line">            <span class="keyword">new</span> PropertyMetadata(<span class="literal">default</span>)</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择部件和状态"><a href="#选择部件和状态" class="headerlink" title="选择部件和状态"></a>选择部件和状态</h3><p>&emsp;&emsp;现在已经具备了基本结构，并且已经准备好确定将在控件模板中国使用的部件和状态了。显然，<code>FlipPanel</code>需要两个状态：</p><ul><li><em>正常状态</em>。该故事板确保只有前面的内容是可见的，后面的内容被翻转、淡化或移除视图。</li><li><em>翻转状态</em>。该故事板确保只有后面的内容是可见的，前面的内容通过动画被移出视图。</li></ul><p>&emsp;&emsp;此外，需要两个部件：</p><ul><li><em>FlipButton</em>。这是一个按钮，当单击该按钮时，将视图成前面改到后面（或成后面改到前面）。<em>FlipPanel</em>控件通过处理该按钮的事件提供该服务</li><li><em>FlipButtonAlternate</em>。这是一个可选元素，与<em>FlipButton</em>的工作方式相同。允许控件使用者在自定义模板中使用两种不同的方法。一种选择是使用在可翻转区域外的单个翻转按钮，另一种选择是在可翻转区域的面板两侧放置独立的翻转按钮。</li></ul><blockquote><p>为表明<code>FlipPanel</code>使用这些部件和状态的事实，应为自定义控件类应用<code>TemplatePart</code>特性，如下所示：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TemplateVisualState(Name = <span class="string">&quot;Normal&quot;</span>, GroupName = <span class="string">&quot;ViewStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplateVisualState(Name = <span class="string">&quot;Flipped&quot;</span>, GroupName = <span class="string">&quot;ViewStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplatePart(Name = <span class="string">&quot;FlipButton&quot;</span>, Type = typeof(ToggleButton))</span>]</span><br><span class="line">[<span class="meta">TemplatePart(Name = <span class="string">&quot;FlipButtonAlternate&quot;</span>, Type = typeof(ToggleButton))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlipPanel</span> : <span class="title">System.Windows.Controls.Control</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;FlipButton 和 FlipButtonAlternate 部件都受到限制——每个部件只能是 ToggleButton 控件或ToggleButton 派生类的实例(ToggleButton 是可单击的按钮，能够处于两个状态中的某个状态。对于FlipPanel控件，ToggleButton 的状态对应于普通的前向视图或翻转的后向视图)。</p><div class="note info flat"><p>&emsp;&emsp;为确保最好、最灵活的模板支持,尽可能使用最通用的元素类型。例如,除非需要 ContentControl提供的某些属性或行为，使用FrameworkElement比使用ContentControl更好。</p></div><h3 id="默认控件模板"><a href="#默认控件模板" class="headerlink" title="默认控件模板"></a>默认控件模板</h3><p>&emsp;&emsp;现在，可将这些内容投入到默认控件模板中。根元素是具有两行的Grid 面板，该面板包含内容区域(在顶行)和翻转按钮(在底行)。用两个相互重叠的 Border 元素填充内容区域，代表前面和后面的内容，但一次只显示前面或后面内容。</p><p>&emsp;&emsp;<em>为了填充前面和后面的内容区域，FlipPanel控件使用ContentPresenter 元素。该技术几乎和自定义按钮示例相同，只是需要两个ContentPresenter 元素，分别用于 FlipPanel 控件的前面和后面。FlipPanel控件还包含独立的 Border 元素来封装每个 ContentPresenter 元素。从而让控件使用者能通过设置FlipPanel的几个直接属性勾勒出可翻转内容区域(BorderBrushBorderThickness、Background 以及 CorerRadius)，而不是强制性地手动添加边框。</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:FlipPanel&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:FlipPanel&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="comment">&lt;!--  This is the front content.  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">x:Name</span>=<span class="string">&quot;FrontContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">CornerRadius</span>=<span class="string">&quot;&#123;TemplateBinding CornerRadius&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding FrontContent&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="comment">&lt;!--  This is the back content.  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">x:Name</span>=<span class="string">&quot;BackContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">CornerRadius</span>=<span class="string">&quot;&#123;TemplateBinding CornerRadius&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding BackContent&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="comment">&lt;!--  This the flip button.  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ToggleButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">x:Name</span>=<span class="string">&quot;FlipButton&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Width</span>=<span class="string">&quot;19&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Height</span>=<span class="string">&quot;19&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Margin</span>=<span class="string">&quot;0,10,0,0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">RenderTransformOrigin</span>=<span class="string">&quot;0.5,0.5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ToggleButton.Template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Fill</span>=<span class="string">&quot;AliceBlue&quot;</span> <span class="attr">Stroke</span>=<span class="string">&quot;#FFA9A9A9&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Path</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Data</span>=<span class="string">&quot;M1,1.5 L4.5,5 8,1.5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Stroke</span>=<span class="string">&quot;#FF666666&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">StrokeThickness</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">ToggleButton.Template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ToggleButton.RenderTransform</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">x:Name</span>=<span class="string">&quot;FlipButtonTransform&quot;</span> <span class="attr">Angle</span>=<span class="string">&quot;-90&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">ToggleButton.RenderTransform</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">ToggleButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">VisualStateGroup</span> <span class="attr">x:Name</span>=<span class="string">&quot;ViewStates&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="comment">&lt;!--  统一设置相同的过渡时间  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="comment">&lt;!--&lt;VisualTransition GeneratedDuration=&quot;0:0:0.7&quot; /&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="comment">&lt;!--  单独设置切换的过渡时间  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span> <span class="attr">To</span>=<span class="string">&quot;Flipped&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButtonTransform&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">To</span>=<span class="string">&quot;90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span> <span class="attr">To</span>=<span class="string">&quot;Normal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButtonTransform&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">To</span>=<span class="string">&quot;-90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;Normal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;BackContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Opacity&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Duration</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;Flipped&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButtonTransform&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Duration</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FrontContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Opacity&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Duration</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">VisualStateGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实例中的实现注意细节</p></blockquote><h4 id="翻转动画"><a href="#翻转动画" class="headerlink" title="翻转动画"></a>翻转动画</h4><p>&emsp;&emsp;使用旋转动画前，需要先声明<code>RotateTransform</code>；这里的<code>RotateTransform</code>是通过<em>x:Name</em>直接命名的，如果不采用命名需要使用原始的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButton&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(UIElement.RenderTransform).(RotateTransform.Angle)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">To</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="定义状态动画"><a href="#定义状态动画" class="headerlink" title="定义状态动画"></a>定义状态动画</h4><p>&emsp;&emsp;状态动画是控件模板中最有趣的部分。它们是提供翻转行为的要素，它们还是为<em>FlipPanel</em>创建自定义模板的开发人员最有可能修改的细节。为定义状态组，必须在控件模板的跟元素中添加<code>VisualStateManager.VisualStateGroups</code>元素，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:FlipPanel&#125;&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- VisualStateManager只能附加到FrameworkElement元素中，所以需要放在Grid中，不能直接放在ControlTemplate根下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用具有合适名称的VisualStateGroup，同一组的状态放在一起 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">VisualStateGroup</span> <span class="attr">x:Name</span>=<span class="string">&quot;GroupName1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;StateName1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;StateName2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">VisualStateGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>&emsp;&emsp;为给模板添加 VisualStateManager 元素，模板必须使用布局面板。布局面板包含控件的两个可视化对象和 VisualStateManager 元素(该元素不可见)。VisualStateManager 定义具有动画的故事板，控件在合适的时机使用动画改变其外观。</p></div><p>&emsp;&emsp;每隔状态对应一个具有一个或多个动画的故事板。如果存在这些故事板，就会在适当的时机触发它们(如果不存在，控件将按正常方式降级，而不会引发错误)</p><blockquote><p>这里将可视化状态持续时间设置为0，这意味着动画立即应用其效果。这看起来可能有些怪——毕竟，不是需要更平缓的改变从而能够注意到动画效果吗？</p></blockquote><p>&emsp;&emsp;<strong>实际上，该设计完全正确，因为可视化状态用于表示控件在适当状态时的外观。</strong>；<em>例如，当翻转面板处于翻转过的状态时，简单地显示其背面内容。翻转过程是在 FlipPanel 控件进入翻转状态前的过渡，而不是翻转状态本身的一部分(状态和过渡之间的这个区别是很重要的，因为有些控件确实具有在状态期间运行的动画。)</em></p><h4 id="定义状态过渡"><a href="#定义状态过渡" class="headerlink" title="定义状态过渡"></a>定义状态过渡</h4><p>&emsp;&emsp;过渡是成当前状态到新状态的动画。变换模型的优点之一是不需要为动画创建故事板。例如，如果添加如下标记，WPF会创建持续时间为0.7秒的动画以改变<em>FlipPanel</em>控件的透明度，从而创建希望的悦目的褪色效果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VisualStateGroup</span> <span class="attr">x:Name</span>=<span class="string">&quot;ViewStates&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;Normal&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;Flipped&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;过渡会应用到状态组。当定义过渡时，必须将其添加到<code>VisualStateGroup.Transitions</code>集合。上面的示例使用最简单的过渡类型：默认过渡。默认过渡应用于该组中的所有状态变化.</p><p>&emsp;&emsp;默认过渡是很方便的，但用于所有情况的解决方案不可能总是适合的。例如，您可能希望FlipPanel控件根据其进入的状态以不同的速度过渡。为实现该效果，需要定义多个过渡，并且需要设置 To 属性以指示何时应用过渡效果。例如，如果有以下过渡：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">To</span>=<span class="string">&quot;Flipped&quot;</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">To</span>=<span class="string">&quot;Normal&quot;</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个示例显示了当进入特定状态时应用的过渡，但<strong>还可使用From 属性创建当离开某个状态时应用的过渡,并且可结合使用 To 和 From 属性来创建更特殊的只有当在特定的两个状态之间移动时才会应用的过渡。当应用过渡时 WPF遍历过渡集合，在所有应用的过渡中查找最特殊的过渡，并只使用最特殊的那个过渡。</strong></p><p>&emsp;&emsp;为了进一步加以控制，可创建自定义过渡动画来替换 WPF 通常使用的自动生成的过渡。您可能会由于几个原因而创建自定义过渡。下面是一些例子:使用更复杂的动画控制动画的步长，使用动画缓动、连续运行几个动画或在运行动画时播放声音</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span> <span class="attr">To</span>=<span class="string">&quot;Flipped&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButtonTransform&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Angle&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">To</span>=<span class="string">&quot;90&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span> <span class="attr">To</span>=<span class="string">&quot;Normal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButtonTransform&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Angle&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">To</span>=<span class="string">&quot;-90&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>&emsp;&emsp;当使用自定义过渡时，仍必须设置 VisualTransition.GeneratedDuration 属性以匹配动画的持续时间。如果没有设置该细节，VisualStateManager 就不能使用自定义过渡，而且它将立即应用新状态(使用的实际时间值对于您的自定义过渡仍无效果，因为它只应用于自动生成的动画)。</p></div><p>&emsp;&emsp;但许多控件需要自定义过渡，而且编写自定义过渡是非常乏味的工作。仍需保持零长度的状态动画，这还会不可避免地在可视化状态和过渡之间复制一些细节。</p><h4 id="关联元素"><a href="#关联元素" class="headerlink" title="关联元素"></a>关联元素</h4><p>&emsp;&emsp;现在，已经得到了一个相当好的控件模板，需要在 <em>FlipPanel</em> 控件中添加一些内容以使该模板工作。</p><p>&emsp;&emsp;诀窍是使用<code>OnApplyTemplate()</code>方法，该方法还用于在<code>ColorPicker</code>控件中设置绑定。对于<code>FlipPanel</code>控件，<code>OnApplyTemplate()</code>方法用于为<code>FlipButton</code>和<code>FlipButtonAlternate</code>部件检索<code>ToggleButton</code>，并为每个部件关联事件处理程序，从而当用户单击以翻转控件时能够进行响应。最后，<code>OnApplyTemplate()</code>方法调用名为<code>ChangeVisualState()</code>的自定义方法，该方法确保控件的可视化外观和当前状态匹配：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnApplyTemplate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnApplyTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wire up the ToggleButton.Click event.</span></span><br><span class="line">    ToggleButton? flipButton = GetTemplateChild(<span class="string">&quot;FlipButton&quot;</span>) <span class="keyword">as</span> ToggleButton;</span><br><span class="line">    <span class="keyword">if</span> (flipButton != <span class="literal">null</span>) flipButton.Click += FlipButton_Click;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for two flip buttons if needed (one for each side of the panel).</span></span><br><span class="line">    ToggleButton? flipButtonAlternate = GetTemplateChild(<span class="string">&quot;FlipButtonAlternate&quot;</span>) <span class="keyword">as</span> ToggleButton;</span><br><span class="line">    <span class="keyword">if</span> (flipButtonAlternate != <span class="literal">null</span>) flipButtonAlternate.Click += FlipButton_Click;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the visuals match the current state.</span></span><br><span class="line">    <span class="keyword">this</span>.ChangeVisualState(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FlipButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.IsFlipped = !<span class="keyword">this</span>.IsFlipped;</span><br><span class="line">    ChangeVisualState(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangeVisualState</span>(<span class="params"><span class="built_in">bool</span> useTransitions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IsFlipped)</span><br><span class="line">    &#123;</span><br><span class="line">        VisualStateManager.GoToState(<span class="keyword">this</span>, <span class="string">&quot;Normal&quot;</span>, useTransitions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        VisualStateManager.GoToState(<span class="keyword">this</span>, <span class="string">&quot;Flipped&quot;</span>, useTransitions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>&emsp;&emsp;当调用 GetTemplateChild()方法时，需要给出希望获取的元素的字符串名称。为避免可能的错误，可在控件中将该字符串声明为常量。然后在TemplatePart 特性中以及调用GetTemplateChild()方法时可以使用该常量。</p></div><p>&emsp;&emsp;幸运的是，不需要手动触发状态动画。既不需要创建也不需要触发过渡动画。相反，<strong>为从一个状态改变到另一个状态，只需要调用静态方法 VisualStateManager.GoToState()。</strong>当调用该方法时，传递正在改变状态的控件对象的引用、新状态的名称以及确定<strong>是否显示过渡的 Boolean值。</strong> <strong>如果是由用户引发的改变(例如，当用户单击 ToggleButon 按钮时)，该值应当为true;如果是由属性设置引发的改变(例如，如果使用页面的标记设置IsFlipped 属性的初始值)，该值为 false。</strong></p><p>&emsp;&emsp;<em>处理控件支持的所有不同状态可能会变得很凌乱。为避免在整个控件代码中分散调用GoToState( )方法，大多数控件添加了与在 FlipPanel 控件中添加的 ChangeVisualState()类似的方法。该方法负责应用每个状态组中的正确状态。该方法中的代码使用if语句块(或 switch 语句)应用每个状态组的当前状态。该方法之所以可行，是因为它完全可以使用当前状态的名称调用GoToState()方法。在这种情况下，<code>如果当前状态和请求的状态相同，那么什么也不会发生。</code></em></p><blockquote><p>通常在以下为止调用<code>ChangeVisualState()</code>方法或与其等效的方法：</p></blockquote><ul><li>在<code>OnApplyTemplate()</code>方法的结尾，在初始化控件之后</li><li>当响应代表状态改变的事件时，例如鼠标移动或单击<em>ToggleButton</em>按钮</li><li>当响应属性改变或通过代码触发时（例如，<code>IsFlipped</code>属性设置器调用<code>ChangeVisualState()</code>方法并且总是提供true，所以显示过渡动画。如果希望为控件使用者提供不显示过渡的机会，可添加<code>Flip()</code>方法，该方法接受与为<code>ChangeVisualState()</code>方法传递相同的Boolean参数）。</li></ul><p>&emsp;&emsp;正如上面介绍的，FlipPanel控件非常灵活。例如，可使用该控件并且不使用ToggleButon 按钮，通过代码进行翻转(可能是当用户单击不同的控件时)。也可在控件模板中包含一两个翻转按钮并且允许用户进行控制。</p><h3 id="使用FlipPanel控件"><a href="#使用FlipPanel控件" class="headerlink" title="使用FlipPanel控件"></a>使用FlipPanel控件</h3><p>&emsp;&emsp;现在已经完成了 FlipPanel 控件的控件模板和代码，已经准备好在应用程序中使用该控件假定已添加了必需的程序集引用，然后可将XML前缀映射到包含自定义控件的名称空间:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:lib</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;375&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;260&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lib:FlipPanel</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;panel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">&quot;DarkOrange&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">CornerRadius</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lib:FlipPanel.FrontContent</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TextBlock</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">FontSize</span>=<span class="string">&quot;16&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Foreground</span>=<span class="string">&quot;DarkOrange&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">TextWrapping</span>=<span class="string">&quot;Wrap&quot;</span>&gt;</span></span><br><span class="line">                        This is the front side of the FlipPanel.</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Padding</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;Button One&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Padding</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;Button Two&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Padding</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;Button Three&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Padding</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;Button Four&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">lib:FlipPanel.FrontContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lib:FlipPanel.BackContent</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TextBlock</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">FontSize</span>=<span class="string">&quot;16&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Foreground</span>=<span class="string">&quot;DarkMagenta&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">TextWrapping</span>=<span class="string">&quot;Wrap&quot;</span>&gt;</span></span><br><span class="line">                        This is the back side of the FlipPanel.</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Click</span>=<span class="string">&quot;cmdFlip_Click&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;Flip Back to Front&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">lib:FlipPanel.BackContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">lib:FlipPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当单击<code>FlipPanel</code>背面的按钮时，通过编程翻转面板：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdFlip_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    panel.IsFlipped = !panel.IsFlipped;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用不同的控件模板"><a href="#使用不同的控件模板" class="headerlink" title="使用不同的控件模板"></a>使用不同的控件模板</h3><p>&emsp;&emsp;已经恰当设计好的自定义控件极其灵活。对于FlipPanel控件，可提供新模板来更改ToggleButton 按钮的外观和位置，并修改当在前后内容区域之间进行切换时应用的动画效果。</p><p>&emsp;&emsp;<em>在此，翻转按钮被放置到一个特殊的栏中，该栏位于前面的底部并且位于后面的顶部。当翻转面板时，它不是像一页纸那样翻转内容。相反，它缩小前面内容的同时在后面展开后面的内容。当反向翻转面板时，后面的内容从下面开始挤向后面，前面的内容从上面展开。为实现更精彩的效果，甚至还借助于BlurEfect 类模糊正在变形的内容。</em></p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/7stMFZb0Xf.gif"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:FlipPanel&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type local:FlipPanel&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="comment">&lt;!--  This is the front content.  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">x:Name</span>=<span class="string">&quot;FrontContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">CornerRadius</span>=<span class="string">&quot;&#123;TemplateBinding CornerRadius&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Border.RenderTransform</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ScaleTransform</span> <span class="attr">x:Name</span>=<span class="string">&quot;FrontContentTransform&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Border.RenderTransform</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Border.Effect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">BlurEffect</span> <span class="attr">x:Name</span>=<span class="string">&quot;FrontContentEffect&quot;</span> <span class="attr">Radius</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Border.Effect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding FrontContent&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Rectangle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Fill</span>=<span class="string">&quot;LightSteelBlue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ToggleButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">x:Name</span>=<span class="string">&quot;FlipButton&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Padding</span>=<span class="string">&quot;15,0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Content</span>=<span class="string">&quot;^&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">FontSize</span>=<span class="string">&quot;12&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">FontWeight</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="comment">&lt;!--  This is the back content.  --&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">x:Name</span>=<span class="string">&quot;BackContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">CornerRadius</span>=<span class="string">&quot;&#123;TemplateBinding CornerRadius&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Border.RenderTransform</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ScaleTransform</span> <span class="attr">x:Name</span>=<span class="string">&quot;BackContentTransform&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Border.RenderTransform</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Border.Effect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">BlurEffect</span> <span class="attr">x:Name</span>=<span class="string">&quot;BackContentEffect&quot;</span> <span class="attr">Radius</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Border.Effect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding BackContent&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Rectangle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Fill</span>=<span class="string">&quot;LightSteelBlue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ToggleButton</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">x:Name</span>=<span class="string">&quot;FlipButtonAlternate&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Padding</span>=<span class="string">&quot;15,0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">Content</span>=<span class="string">&quot;^&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">FontSize</span>=<span class="string">&quot;12&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">FontWeight</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">VisualStateGroup</span> <span class="attr">x:Name</span>=<span class="string">&quot;ViewStates&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span> <span class="attr">To</span>=<span class="string">&quot;Flipped&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButton&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(UIElement.RenderTransform).(RotateTransform.Angle)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">To</span>=<span class="string">&quot;90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">VisualTransition</span> <span class="attr">GeneratedDuration</span>=<span class="string">&quot;0:0:0.7&quot;</span> <span class="attr">To</span>=<span class="string">&quot;Normal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FlipButton&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(UIElement.RenderTransform).(RotateTransform.Angle)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">To</span>=<span class="string">&quot;-90&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">VisualTransition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">VisualStateGroup.Transitions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;Normal&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;BackContent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Opacity&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Duration</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">VisualState</span> <span class="attr">x:Name</span>=<span class="string">&quot;Flipped&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FrontContentTransform&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;ScaleY&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;FrontContentEffect&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Radius&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;BackContentTransform&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;ScaleY&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;BackContentEffect&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Radius&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">VisualState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">VisualStateGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">VisualStateManager.VisualStateGroups</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建自定义面板"><a href="#创建自定义面板" class="headerlink" title="创建自定义面板"></a>创建自定义面板</h2><p>&emsp;&emsp;创建自定义面板是一种特殊但较常见的自定义控件开发子集。面板驻留一个或多个子元素，并且实现了特定的布局逻辑以恰当地安排其子元素。如果希望构建自己的可拖动的工具栏或可停靠的窗口系统，自定义面板是很重要的元素。当创建需要非标准特定布局的组合控件时，自定义面板通常是很有用的，例如花哨的停工具栏。</p><p>&emsp;&emsp;<em>现在，对于 WPF 提供的用于组织内容的基本类型的面板(如 StackPanel、DockPanel、WrapPanel、Canvas 以及 Grid)已经很熟悉了，也已经看到了一些使用它们自己自定义面板的 WPF 元素(如TabPanel、ToolBarOverflowPanel 以及 VirtualizingPanel)。可以在线査找更多有关自定义面板的示例。下面是一些值得研究的示例:</em></p><ul><li>允许拖动其子元素而不需要额外事件处理代码的自定义Canvas面板</li><li>针对项列表实现了鱼眼效果和螺旋效果的两个面板</li><li>使用基于帧的动画成一种布局变换到其他布局的面板</li></ul><blockquote><p>接下来的几节讲将介绍创建自定义面板，并且还将分析两个简单的示例——一个基本的Canvas面板副本，以及一个增强版本的WrapPanel面板</p></blockquote><h2 id="两步布局过程"><a href="#两步布局过程" class="headerlink" title="两步布局过程"></a>两步布局过程</h2><p>&emsp;&emsp;<strong>每个面板都使用相同的设备:负责改变子元素尺寸和安排子元素的两步布局过程。第一个阶段是测量阶段(measure pass)，在这一阶段面板决定其子元素希望具有多大的尺寸。第二个阶段是排列阶段(layoutpass)，在这一阶段为每个控件指定边界。</strong>这两个步骤是必需的，因为在决定如何分割可用空间时，面板需要考虑所有子元素的期望。</p><p>&emsp;&emsp;可以通过重写<code> MeasureOveride()</code>和 <code>ArangeOveride()</code>方法，为这两个步骤添加自己的逻辑，这两个方法是作为 WPF布局系统的一部分在FrameworkElement类中定义的。</p><h3 id="MeasureOverride-方法"><a href="#MeasureOverride-方法" class="headerlink" title="MeasureOverride()方法"></a>MeasureOverride()方法</h3><p>&emsp;&emsp;第一步是首先使用 MeasureOverride()方法决定每个子元素希望多大的空间。然而，<strong>即使是在 MeasureOverride()方法中，也不能为子元素提供无限空间。至少，也应当将子元素限制在能够适应面板可用空间的范围之内。此外，可能希望更严格地限制子元素。</strong>例如，具有按比例分配尺寸的两行的 Grid 面板，会为子元素提供可用高度的一半。StackPanel 面板会为第一个元素提供所有可用空间，然后为第二个元素提供剩余的空间，等等。</p><p>&emsp;&emsp;每个 MeasureOverride()方法的实现负贵遍历子元素集合，并调用每个子元素的 Measure()方法。当调用 Measure()方法时，需要提供边界框—— 决定每个子控件最大可用空间的 Size 对象。在 MeasureOverride()方法的最后，面板返回显示所有子元素所需的空间，并返回它们所期望的尺寸。</p><p>&emsp;&emsp;下面是MeasureOverride()方法的基本结构，其中没有具体的尺寸细节：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">MeasureOverride</span>(<span class="params">Size constraint</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Examine all the children.</span></span><br><span class="line">    <span class="keyword">foreach</span>(UIElement element <span class="keyword">in</span> <span class="keyword">base</span>.InternalChildren)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Ask each child how much space it would like, given the availableSize constraint.</span></span><br><span class="line">        Size availableSize = <span class="keyword">new</span> Size(...);</span><br><span class="line">        element.Measure(availableSize);</span><br><span class="line">        <span class="comment">// (You can now read element.DesiredSize to get the requested size.)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicate how much space this panel requires.</span></span><br><span class="line">    <span class="comment">// This will be used to set the DesiredSize property of the panel.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Size(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<em>Measure()方法不返回数值。在为每个子元素调用 Measure()方法之后，子元素的 DesiredSize属性提供了请求的尺寸。可以在为后续子元素执行计算时(以及决定面板需要的总空间时)使用这一信息。</em></p><p>&emsp;&emsp;<em>因为许多元素直到调用了 Measured()方法之后才会渲染它们自身，所以必须为每个子元素调用 Measure()方法，即使不希望限制子元素的尺寸或使用 DesiredSize 属性也同样如此。如果希望让所有子元素能够自由获得它们所希望的全部空间，可以传递在两个方向上的值都是Double.PositiveInfinity 的 Size 对象(ScrollViewer 是使用这种策略的一个元素，原因是它可以处理任意数量的内容)。然后子元素会返回其中所有内容所需要的空间。否则，子元素通常会返回其中内容需要的空间或可用空间——返回较小者。</em></p><p>&emsp;&emsp;在测量过程的结尾，布局容器必须返回它所期望的尺寸。在简单的面板中，可以通过组合每个子元素的期望尺寸计算面板所期望的尺寸。</p><div class="note warning flat"><p>&emsp;&emsp;不能为面板的期望尺寸简单地返回传递给 MeasureOverride()方法的限制范围。尽管这看起来是获取所有可用空间的好方法，但如果容器传递 Size 对象，而且 Size 对象的一个方向或两个方向上的数值是 Double.PositiveInfinity(这意味着“占用需要的所有控件空间”)，这时就会出现麻烦。尽管对于尺寸限制范围来说，无限的尺寸是允许的，但是对于尺寸结果，无限的尺寸是不允许的，因为 WPF 不能计算出元素应当多大。另外，实际上不应当使用超出需要的更大空间。如果这样做的话，可能会导致额外的空白空间,并且布局面板之后的元素会在窗口中进一步下移</p></div><p>&emsp;&emsp;为每个子元素调用的 Measure()方法和定义面板布局逻辑第步的 MeasureOverride()方法极其相似。实际上，Measure()方法会触发 MeasureOverride()方法。所以，如果在一个布局容器中放置另一个布局容器，当调用 Measure()方法时，将会得到布局容器及其所有子元素所需的总尺寸。</p><div class="note info flat"><p>&emsp;&emsp;通过两步执行测量过程(触发 MeasureOverride()方法的 Measure()方法)的一个原因是为了处理外边距。当调用 Measure()方法时，传递总的可用空间。当WPF 调用 MeasureOverride()方法时，考虑到外边距空间，会自动减少可用空间(除非传递无限的尺寸)。</p></div><h3 id="ArrangeOverride-方法"><a href="#ArrangeOverride-方法" class="headerlink" title="ArrangeOverride()方法"></a>ArrangeOverride()方法</h3><p>&emsp;&emsp;测量完所有元素后，就可以在可用的空间中排列元素了。布局系统调用面板的<code>ArrangeOverride()</code>方法，而面板为每个子元素调用<code>Arrange()</code>方法，以告诉子元素为它分配了多大的空间（<strong>Arange()方法会触发 ArrangeOvemide()方法，这与 Measure()方法会触发 MeasureOverride()方法非常类似</strong>）。</p><p>&emsp;&emsp;当使用Measure()方法测量条目时，传递能够定义可用空间边界的Size对象。当使用Arrange()方法放置条目时，传递能够定义条目尺寸和位置的 System.Windows.Rect对象。这时，就像使用 Canvas 面板风格的X和Y坐标放置每个元素一样(坐标确定布局容器左上角与元素左上角之间的距离)。</p><blockquote><p>下面是<code>ArrangeOveride()</code>方法的基本结构，其中没有给出具体的尺寸细节：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">ArrangeOveride</span>(<span class="params">Size arrangeSize</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Examine all the children.</span></span><br><span class="line">    <span class="keyword">foreach</span>(UIElement element <span class="keyword">in</span> <span class="keyword">base</span>.InternalChildren)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Assign the child it&#x27;s bounds.</span></span><br><span class="line">        Rect bounds = <span class="keyword">new</span> Rect(...);</span><br><span class="line">        element.Arrange(bounds);</span><br><span class="line">        <span class="comment">// (You can now element.ActualHeight and element.ActualWidth to find out the size it used...)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicate how much space this panel occupies.</span></span><br><span class="line">    <span class="comment">// This will be used to set the ActualHeight and ActualWidth properties of the panel</span></span><br><span class="line">    <span class="keyword">return</span> arrangeSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当排列元素时，不能传递无限尺寸。然而，可以通过传递来自DesiredSize属性的值，为元素提供它所期望的数值。也可以为元素提供比所需尺寸更大的空间。实际上，经常会出现这种情况。例如，垂直的 StackPanel 面板为其子元素提供所请求的高度，但是为子元素提供面板本身的整个宽度。同样，Grid 面板使用具有固定尺寸或按比例计算尺寸的行，这些行的尺寸可能大于其内部元素所期望的尺寸。即使已经在根据内容改变尺寸的容器中放置了元素，如果使用Height 和 Width 属性明确设置了元素的尺寸，那么仍可以扩展该元素。</p><p>&emsp;&emsp;当使元素比所期望的尺寸更大时，就需要使用HorizontalAlignment和 VerticalAlignment 属元素内容被放在指定边界内部的某个位置</p><p>&emsp;&emsp;因为 ArrangeOverride()方法总是接收定义的尺寸(而非无限的尺寸)，所以为了设置面板的最终尺寸，可以返回传递的 Size对象。实际上，许多布局容器就是采用这一步骤来占据提供的所有空间(不能冒险占用其他控件可能需要的空间，因为除非有可用空间，否则布局系统的测量步骤一定不会为元素提供超出需要的空间)。</p><h3 id="Canvas面板的副本"><a href="#Canvas面板的副本" class="headerlink" title="Canvas面板的副本"></a>Canvas面板的副本</h3><p>&emsp;&emsp;理解这两个方法的最快捷方式是研究<code>Canvas</code>类的内部工作原理，<code>Canvas</code>是最简单的布局容器。为了创建自己的<code>Canvas</code>风格的面板，只需要简单地继承<code>Panel</code>类，并且添加<code>MeasureOverride()</code>和<code>ArrangeOverride()</code>方法，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CanvasClone</span> : <span class="title">System.Windows.Controls.Panel</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>Canvas面板在它们希望的为止放置子元素，并且为子元素设置它们希望的尺寸。所以，Canvas面板不需要计算如何分割可用空间。</strong> 这使得<code>MeasureOverride()</code>方法非常简单。为每个子元素提供无限的空间：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">MeasureOverride</span>(<span class="params">Size availableSize</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// PositiveInfinity：正无穷大</span></span><br><span class="line">    Size size = <span class="keyword">new</span> Size(<span class="built_in">double</span>.PositiveInfinity, <span class="built_in">double</span>.PositiveInfinity);</span><br><span class="line">    <span class="keyword">foreach</span> (UIElement element <span class="keyword">in</span> <span class="keyword">base</span>.InternalChildren)</span><br><span class="line">    &#123;</span><br><span class="line">        element.Measure(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意，<strong>MeasureOverride()方法返回空的Size对象。这意味着Canvas面板根本不请求任何空间，而是由您明确地为Canvas面板指定尺寸，或者将其放置到布局容器中进行拉伸以填充整个容器的可用空间。</strong></p><p>&emsp;&emsp;<code>ArrangeOverride()</code>方法包含的内容稍微多一些。为了确定每个元素的正确为止，<code>Canvas</code>面板使用附加属性（<em>Left、Right、Top以及Bottom</em>），附加属性是使用定义类中的来了哥哥辅助方法实现的：<code>GetProperty()和SetProperty()</code>。</p><blockquote><p>在此分析的Canvas面板副本简单一些——<em>只使用Left和Top附加属性</em>。下面是用于排列元素的代码：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">ArrangeOverride</span>(<span class="params">Size finalSize</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (UIElement element <span class="keyword">in</span> <span class="keyword">base</span>.InternalChildren)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">double</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">double</span> left = Canvas.GetLeft(element);</span><br><span class="line">        <span class="keyword">if</span> (!Double.IsNaN(left))</span><br><span class="line">        &#123;</span><br><span class="line">            x = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">double</span> top = Canvas.GetTop(element);</span><br><span class="line">        <span class="keyword">if</span> (!Double.IsNaN(top))</span><br><span class="line">        &#123;</span><br><span class="line">            y = top;</span><br><span class="line">        &#125;</span><br><span class="line">        element.Arrange(<span class="keyword">new</span> Rect(<span class="keyword">new</span> Point(x, y), element.DesiredSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> finalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更好的WrapPanel面板"><a href="#更好的WrapPanel面板" class="headerlink" title="更好的WrapPanel面板"></a>更好的WrapPanel面板</h3><p>&emsp;&emsp;WrapPanel面本执行一个简单的功能，该功能有时十分有用。该面板逐个地布置其子元素，一旦当前行的宽度用完，就会切换到下一行。但有时您需要<strong>采用一种方法来强制立即换行，以便在新行中启动某个特定控件。</strong>尽管WrapPanel面板原本没有提供这一功能，但通过创建自定义控件可方便地添加该功能。只需要添加一个请求换行的附加属性即可。此后，面板中的子元素可使用该属性在适当位置换行。</p><p>&emsp;&emsp;下面的代码清单显示了<code>WrapBreakPanel</code>类，该类添加了<code>LineBreakBeforeProperty</code>附加属性。当将该属性设置为true时，这个属性会导致在元素之前立即换行。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240730213831.png"/><div class="tabs" id="wrapbreakpanel"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="wrapbreakpanel-1">WrapBreakPanel</button><button type="button" class="tab " data-href="wrapbreakpanel-2">Use WrapBreakPanel</button></ul><div class="tab-contents"><div class="tab-item-content active" id="wrapbreakpanel-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WrapBreakPanel</span> : <span class="title">System.Windows.Controls.Panel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">GetLineBreakBefore</span>(<span class="params">DependencyObject obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">bool</span>)obj.GetValue(LineBreakBeforeProperty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetLineBreakBefore</span>(<span class="params">DependencyObject obj, <span class="built_in">bool</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.SetValue(LineBreakBeforeProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty LineBreakBeforeProperty =</span><br><span class="line">        DependencyProperty.RegisterAttached(</span><br><span class="line">            <span class="string">&quot;LineBreakBefore&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(<span class="built_in">bool</span>),</span><br><span class="line">            <span class="keyword">typeof</span>(WrapBreakPanel),</span><br><span class="line">            <span class="keyword">new</span> FrameworkPropertyMetadata(<span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 指明该属性影响布局过程</span></span><br><span class="line">                AffectsArrange = <span class="literal">true</span>,</span><br><span class="line">                AffectsMeasure = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 测量阶段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;availableSize&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">MeasureOverride</span>(<span class="params">Size availableSize</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Size currentLineSize = <span class="keyword">new</span> Size();</span><br><span class="line">        Size panelSize = <span class="keyword">new</span> Size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (UIElement element <span class="keyword">in</span> <span class="keyword">base</span>.InternalChildren)</span><br><span class="line">        &#123;</span><br><span class="line">            element.Measure(availableSize);</span><br><span class="line">            Size desiredSize = element.DesiredSize; <span class="comment">// 所需尺寸</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (GetLineBreakBefore(element) ||</span><br><span class="line">                currentLineSize.Width + desiredSize.Width &gt; availableSize.Width)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 切换到新行（要么是因为元素请求了它，要么是因为空间用完了）。</span></span><br><span class="line">                panelSize.Width = Math.Max(currentLineSize.Width, panelSize.Width);</span><br><span class="line">                panelSize.Height += currentLineSize.Height;</span><br><span class="line">                currentLineSize = desiredSize;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果元素太宽，无法使用线的最大宽度进行匹配，只需给它一条单独的线。</span></span><br><span class="line">                <span class="keyword">if</span> (desiredSize.Width &gt; availableSize.Width)</span><br><span class="line">                &#123;</span><br><span class="line">                    panelSize.Width = Math.Max(desiredSize.Width, panelSize.Width);</span><br><span class="line">                    panelSize.Height += desiredSize.Height;</span><br><span class="line">                    currentLineSize = <span class="keyword">new</span> Size();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 继续添加到当前行。</span></span><br><span class="line">                currentLineSize.Width += desiredSize.Width;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 确保线条与其最高的元素一样高。</span></span><br><span class="line">                currentLineSize.Height = Math.Max(desiredSize.Height, currentLineSize.Height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回适合所有元素所需的尺寸。</span></span><br><span class="line">        <span class="comment">// 通常，这是约束的宽度，高度基于元素的大小。但是，如果元素比面板的宽度宽，则所需的宽度将是该线的宽度</span></span><br><span class="line">        panelSize.Width = Math.Max(currentLineSize.Width, panelSize.Width);</span><br><span class="line">        panelSize.Height += currentLineSize.Height;</span><br><span class="line">        <span class="keyword">return</span> panelSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">ArrangeOverride</span>(<span class="params">Size finalSize</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Size currentLineSize = <span class="keyword">new</span> Size(); <span class="comment">// 当前行的尺寸</span></span><br><span class="line">        <span class="built_in">double</span> accumulatedHeight = <span class="number">0</span>; <span class="comment">// 累积的高度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (UIElement element <span class="keyword">in</span> <span class="keyword">base</span>.InternalChildren)</span><br><span class="line">        &#123;</span><br><span class="line">            Size desiredSize = element.DesiredSize; <span class="comment">// 获取元素所需的尺寸</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (GetLineBreakBefore(element) ||</span><br><span class="line">                currentLineSize.Width + desiredSize.Width &gt; finalSize.Width)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 切换到新行（要么是因为元素请求了它，要么是因为空间用完了）</span></span><br><span class="line">                accumulatedHeight += currentLineSize.Height; <span class="comment">// 累加当前行的高度</span></span><br><span class="line">                currentLineSize = <span class="keyword">new</span> Size(desiredSize.Width, desiredSize.Height); <span class="comment">// 重置当前行尺寸为新元素的尺寸</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果元素太宽，无法使用行的最大宽度进行匹配，只需给它一条单独的行</span></span><br><span class="line">                <span class="keyword">if</span> (desiredSize.Width &gt; finalSize.Width)</span><br><span class="line">                &#123;</span><br><span class="line">                    element.Arrange(<span class="keyword">new</span> Rect(<span class="keyword">new</span> Point(<span class="number">0</span>, accumulatedHeight), desiredSize)); <span class="comment">// 布置元素</span></span><br><span class="line">                    accumulatedHeight += desiredSize.Height; <span class="comment">// 累加元素的高度</span></span><br><span class="line">                    currentLineSize = <span class="keyword">new</span> Size(); <span class="comment">// 重置当前行尺寸</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    element.Arrange(<span class="keyword">new</span> Rect(<span class="keyword">new</span> Point(<span class="number">0</span>, accumulatedHeight), desiredSize)); <span class="comment">// 布置元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 继续添加到当前行</span></span><br><span class="line">                element.Arrange(<span class="keyword">new</span> Rect(<span class="keyword">new</span> Point(currentLineSize.Width, accumulatedHeight), desiredSize)); <span class="comment">// 布置元素</span></span><br><span class="line">                currentLineSize.Width += desiredSize.Width; <span class="comment">// 增加当前行的宽度</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 确保行的高度与其最高的元素一样高</span></span><br><span class="line">                currentLineSize.Height = Math.Max(desiredSize.Height, currentLineSize.Height); <span class="comment">// 设置当前行的高度为最大元素高度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回面板的最终大小</span></span><br><span class="line">        accumulatedHeight += currentLineSize.Height; <span class="comment">// 累加最后一行的高度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Size(finalSize.Width, accumulatedHeight); <span class="comment">// 返回面板尺寸</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="wrapbreakpanel-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:lib</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;375&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;260&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel.Resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span> <span class="attr">Background</span>=<span class="string">&quot;LightGray&quot;</span>&gt;</span></span><br><span class="line">            Content above the WQrapBreakPanel</span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lib:WrapBreakPanel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">lib:WrapBreakPanel.LineBreakBefore</span>=<span class="string">&quot;True&quot;</span> <span class="attr">FontWeight</span>=<span class="string">&quot;Bold&quot;</span>&gt;</span>Button with Break<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>No Break Here<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">lib:WrapBreakPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span> <span class="attr">Background</span>=<span class="string">&quot;LightGray&quot;</span>&gt;</span></span><br><span class="line">            Content below the WrapBreakPanel</span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;唯一保留的细节是当执行布局逻辑时需要考虑该属性。WrapBreakPanel面板的布局逻辑以WrapPanel 面板的布局逻辑为基础。在测量阶段，元素按行排列，从而使面板能够计算需要的总空间。除非太大或LineBreakBefore属性被设置为tue，否则每个元素都被添加到当前行中。</p><h2 id="自定义绘图元素"><a href="#自定义绘图元素" class="headerlink" title="自定义绘图元素"></a>自定义绘图元素</h2><p>&emsp;&emsp;前面已经开始分析 WPF元素的内部工作原理--允许每个元素插入到WPF布局系统的MeasureOverride()和 ArrangeOverride()方法中。本节将进一步深入分析和研究元素如何渲染它们自身。</p><p>&emsp;&emsp;<em>大多数 WPF 元素通过组合方式创建可视化外观。换句话说，典型的元素通过其他更基础的元素进行构建。在本章的整个内容中您已经看到了这种工作模式。例如，使用标记定义用户控件的组合元素，处理标记的方式与自定义窗口中的XAML 相同。使用控件模板为自定义控件定义可视化树。并且当创建自定义面板时，根本不必定义任何可视化细节。组合元素由控件使用者提供，并添加到 Children 集合中。</em></p><h3 id="OnRender-方法"><a href="#OnRender-方法" class="headerlink" title="OnRender()方法"></a>OnRender()方法</h3><p>&emsp;&emsp;为了执行自定义渲染，元素必须重写0nRender()方法，该方法继承自UIElement 基类OnRender()方法未必不需要替换组合——<strong>一些控件使用OnRender()方法绘制可视化细节并使用组合在其上叠加其他元素。</strong>Border和Panel类是两个例子，Border 类在 OnRender()方法中绘制边框，Panel类在 OnRender()方法中绘制背景。Border和 Panel类都支持子内容，并且这些子内容在自定义的绘图细节之上进行渲染。</p><p>&emsp;&emsp;<em>OnRender()方法接收一个 DrawingContext 对象，该对象为绘制内容提供了一套很有用的方法。第一次学习 DrawingContext 类的相关内容是在第14章，在该章中使用该类为 Visual 对象绘制内容。在 OnRender()方法中执行绘图的主要区别是不能显式地创建和关闭 DrawingContext对象。这是因为几个不同的 OnRender()方法可能使用相同的 DrawingContext对象。例如，派生的元素可以执行一些自定义绘图操作并调用基类中的 OnRender()方法来绘制其他内容。这种方法是可行的，因为当开始这一过程时，WPF会自动创建 DrawingContext 对象，并且当不再需要时关闭该对象。</em></p><div class="note info flat"><p>&emsp;&emsp;从技术角度看，OnRender()方法实际上没有将内容绘制到屏幕上，而是绘制到 DrawingContext对象上，然后 WPF 缓存这些信息。WPF 决定元素何时需要重新绘制并绘制使用 DrawingContext对象创建的内容。这是 WPF 保留模式图形系统的本质-- 由您定义内容，WPF 无缝地管理绘制和刷新过程。</p></div><blockquote><p>关于 WPF 渲染，最令人惊奇的细节是实际上只需要使用很少的类。大多数类是通过其他更简单的类构建的，并且对于典型的控件，为了找到实际重写OnRender()方法的类，需要进入到控件元素树中非常深的层次。下面是一些重写了OnRender()方法的类:</p></blockquote><ul><li><strong>TextBlock</strong>类。无论在何处放置文本，都有<em>TextBlock</em>对象使用<code>OnRender()</code>方法绘制文本</li><li><strong>Image</strong>类。<em>Image</em>类重写<code>OnRender()</code>方法，使用*DrawingContext.DrawImage()*方法绘制图形内容</li><li><strong>MediaElement</strong>类。如果正在使用该类播放视频文件，该类会重写<code>OnRender()</code>方法以绘制视频帧</li><li><strong>各种形状</strong>类。<em>Shape</em>基类重写了<code>OnRender()</code>方法，通过使用<em>DrawingContext.DrawGeometry()<em>方法，绘制在其内部存储的</em>Geometry</em>对象。根据<em>Shape</em>类的特定派生类，<em>Geometry</em>对象可以表示椭圆、矩形或更复杂的由直线和曲线构成的路径。许多元素使用形状绘制小的可视化细节</li><li><strong>各种修饰</strong>类。这些类（如<em>ButtonChrome</em>和<em>ListBoxChrome</em>）绘制通用控件的外侧外观，并在具体指定的内部放置内容。其他许多继承自<code>Decorator</code>的类，如<em>Border</em>类，都重写了<code>OnRender()</code>方法</li><li><strong>各种面板</strong>类。尽管面板的内容是由其子元素提供的，但是<code>OnRender()</code>方法绘制具有背景色（假设设置了<em>background</em>属性）的矩形</li></ul><blockquote><p>通常，<code>OnRender()</code>方法的实现看起来很简单。例如，下面是继承自<code>Shape</code>类的所有渲染代码：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnRender</span>(<span class="params">DrawingContext dc</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.EnsureRenderedGeometry();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._renderedGeometry != Geometry.Empty)</span><br><span class="line">    &#123;</span><br><span class="line">        dc.DrawGeometry(<span class="keyword">this</span>.Fill, <span class="keyword">this</span>.GetPen(), <span class="keyword">this</span>._renderedGeometry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;请记住，重写 OnRender()方法不是渲染内容并且将其添加到用户界面的唯一方法。也可以创建 DrawingVisual 对象，并使用 AddVisualChild()方法为 UElement对象添加该可视化对象(并实现其他一些细节，正如在第 14 章中描述的那样)。然后可以调用 DrawingVisual,RenderOpen()方法为 DrawimgVisual 对象检索 DrawingContext对象，并使用返回的 DrawingContext 对象渲染DrawingVisual对象的内容。</p><p>&emsp;&emsp;<strong>在 WPF 中，一些元素使用这种策略在其他元素内容之上显示一些图形细节。</strong>例如，在拖放指示器、错误指示器以及焦点框中可以看到这种情况。在所有这些情况中，DrawingVisua类允许元素在其他内容之上绘制内容，而不是在其他内容之下绘制内容。但对于大部分情况，是在专门的 OnRender()方法中进行渲染。</p><h3 id="评估自定义绘图"><a href="#评估自定义绘图" class="headerlink" title="评估自定义绘图"></a>评估自定义绘图</h3><p>&emsp;&emsp;<strong>当创建自定义元素时，可能会选择重写 OnRender()方法来绘制自定义内容。可在包含内容的元素(最常见的情况是继承自 Decorator的类)中重写 OnRender()方法,从而可以在内容周围添加图形装饰。也可以在没有任何嵌套内容的元素中重写OnRender()方法，从而可以绘制元素的整个可视化外观。</strong>例如，可以创建绘制一些小的图形细节的自定义元素，然后可以通过组合，在其他类中使用自定义元素。WPF中的这方面示例是 TickBar 元素，该元素为 Slider 控件绘制刻度标记。TickBar 元素通过 Slider 控件的默认控件模板(该模板还包括一个 Border 和一个 Track元素，Track 元素又包含了两个 RepeatButton 控件和一个 Thumb 元素)嵌入到 Slider 控件的可视化树中。</p><p>&emsp;&emsp;一个明显的问题是需要确定何时使用较低级的 OnRender()方法，以及何时使用其他类(例如，继承自 Shape 类的元素)的组合来绘制所需的内容。为了做出决定，需要评估所需图形的复杂程度以及希望提供的交互能力。</p><p>&emsp;&emsp;<em>例如，分析一下 ButtonChrome 类。在 ButtonChrome 类的 WPF 实现中，自定义的渲染代码考虑了各种属性，包括RenderDefaulted、RenderMouseOver 以及 RenderPressed。Button 类的默认控件模板在适当的时机使用触发器设置这些属性，就像在第17章中看到的那样。例如，当将鼠标移动到按钮上时，Button类使用触发器将 ButtonChrome.RenderMouseOver属性设置为tnue。</em></p><p>&emsp;&emsp;<em>无论何时改变 RenderDefaulted、RenderMouseOver或RenderPressed 属性，ButtonChrome类都会调用基本的InvalidateVisual()方法来指示当前外观不再有效。WPF然后调用ButtonChrome.OnRender()方法来获取新的图形表示。</em></p><p>&emsp;&emsp;如果 ButtonChrome 类使用组合，这种行为就更难实现。使用合适的元素为 ButtonChrome类创建标准外观很容易，但是当按钮的状态发生变化时，需要做更多的工作来修改外观。需要动态改变构成 ButtonChrome类的嵌套元素，如果外观变化很大的话，就必须隐藏一个元素并在合适的位置显示另一个元素。<br>&emsp;&emsp;大多数自定义元素不需要自定义渲染。但是<strong>当属性发生变化或执行特定操作时，需要渲染复杂的变化很大的可视化外观，此时使用自定义的渲染方法可能更加简单并且更便捷。</strong></p><h3 id="自定义绘图元素-1"><a href="#自定义绘图元素-1" class="headerlink" title="自定义绘图元素"></a>自定义绘图元素</h3><p>&emsp;&emsp;下面的代码定义了名为 CustomDrawElement 的元素，演示了一种简单的效果。该元素使用RadialGradientBrush 画刷绘制阴影背景。技巧是动态设置强调显示的渐变起点，使其跟随鼠标。从而当用户在控件上移动鼠标时，白色的发光中心点跟随鼠标移动。</p><p>&emsp;&emsp;CustomDrawnElement 元索不需要包含任何子内容，所以它直接继承自FrameworkElement类。该元素只提供了一个可以设置的属性——渐变的背景色(前景色被硬编码为白色，尽管可以很容易地改变这一细节)。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/h55EYn7aBK.gif"/><div class="tabs" id="customdrawelement"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="customdrawelement-1">CustomDrawElement</button><button type="button" class="tab " data-href="customdrawelement-2">Use CustomDrawElement</button></ul><div class="tab-contents"><div class="tab-item-content active" id="customdrawelement-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomDrawElement</span> : <span class="title">FrameworkElement</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> System.Windows.Media.Color BackgroundColor</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Color)GetValue(BackgroundColorProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(BackgroundColorProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty BackgroundColorProperty =</span><br><span class="line">        DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;BackgroundColor&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(Color),</span><br><span class="line">            <span class="keyword">typeof</span>(CustomDrawElement),</span><br><span class="line">            <span class="keyword">new</span> FrameworkPropertyMetadata(Colors.Yellow)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 标识WPF将自动调用OnRender()方法，通过调用InvalidateVisual()</span></span><br><span class="line">                AffectsRender = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnMouseMove</span>(<span class="params">MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnMouseMove(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.InvalidateVisual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnMouseLeave</span>(<span class="params">MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnMouseLeave(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.InvalidateVisual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnRender</span>(<span class="params">DrawingContext drawingContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnRender(drawingContext);</span><br><span class="line"></span><br><span class="line">        Rect bounds = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">base</span>.ActualWidth, <span class="keyword">base</span>.ActualHeight);</span><br><span class="line">        drawingContext.DrawRectangle(GetForegroundBrush(), <span class="literal">null</span>, bounds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Brush <span class="title">GetForegroundBrush</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!IsMouseOver)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SolidColorBrush(BackgroundColor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            RadialGradientBrush brush = <span class="keyword">new</span> RadialGradientBrush(Colors.White, BackgroundColor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get the position of the mouse in device-independent units, relative to the control itself.</span></span><br><span class="line">            Point absoluteGradientOrigin = Mouse.GetPosition(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert the point coordinates to proportional (0 to 1) values.</span></span><br><span class="line">            Point relativeGradientOrigin = <span class="keyword">new</span> Point(</span><br><span class="line">                absoluteGradientOrigin.X / <span class="keyword">base</span>.ActualWidth,</span><br><span class="line">                absoluteGradientOrigin.Y / <span class="keyword">base</span>.ActualHeight);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Adjust the brush</span></span><br><span class="line">            brush.GradientOrigin = relativeGradientOrigin;</span><br><span class="line">            brush.Center = relativeGradientOrigin;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> brush;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="customdrawelement-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:lib</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;375&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;260&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lib:CustomDrawElement</span> <span class="attr">BackgroundColor</span>=<span class="string">&quot;LightGreen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;<strong>BackgroundColor依赖项属性使用FrameworkPropertyMetadata.AffectRender标志明确进行了标识。因此，无论何时改变了背景色，WPF都自动调用 OnRender()方法。然而，当鼠标移动到新的位置时，也需要确保调用 OnRender()方法。这是通过在合适的时间调用InvalidateVisual()方法实现的。</strong></p><h3 id="创建自定义装饰元素"><a href="#创建自定义装饰元素" class="headerlink" title="创建自定义装饰元素"></a>创建自定义装饰元素</h3><p>&emsp;&emsp;作为一条通用规则，切勿在控件中使用自定义绘图。如果在控件中使用自定义绘图，就违反了 WPF无外观控件的承诺。问题是一旦硬编码一些绘图逻辑，就会使控件可视化外观的一部分不能通过控件模板进行定制。</p><p>&emsp;&emsp;更好的方法是设计单独的绘制自定义内容的元素(例如上一个示例中的 CustomDrawnElement类)，然后在控件的默认模板内部使用自定义元素。很多WPF 控件使用这种方法，您在第17章中看到的 Button 控件，使用的就是这种方法。</p><blockquote><p>在控件模板中，自定义绘图元素通常扮演两个角色</p></blockquote><ul><li>它们绘制一些小的图形细节（例如滚动按钮上的箭头）</li><li>它们在另一个元素的周围提供更加详细的背景或边框</li></ul><p>&emsp;&emsp;第二种方法需要自定义装饰元素。可以通过两个轻微的改动将CustomDrawElement 类转换成自定义绘图元素。首先，使该类继承自Decorator类:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/h2VxomNCGN.gif"/><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomDrawDecorator</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后重写<code>OnMeasure()</code>方法，指定需要的尺寸。所有装饰元素都会考虑它们的子元素，增加装饰所需要的额外控件，然后返回组合之后的尺寸。<code>CustomDrawDecorator</code>类不需要任何额外的空间来绘制边框，相反，使用下面的代码简单地使自身和其内容具有相同的尺寸：</p><div class="tabs" id="customdrawdecorator"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="customdrawdecorator-1">CustomDrawDecorator</button><button type="button" class="tab " data-href="customdrawdecorator-2">Use CustomDrawDecorator</button></ul><div class="tab-contents"><div class="tab-item-content active" id="customdrawdecorator-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomDrawDecorator</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Size <span class="title">MeasureOverride</span>(<span class="params">Size constraint</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIElement child = <span class="keyword">this</span>.Child;</span><br><span class="line">        <span class="keyword">if</span> (child != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            child.Measure(constraint);</span><br><span class="line">            <span class="keyword">return</span> child.DesiredSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> System.Windows.Media.Color BackgroundColor</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Color)GetValue(BackgroundColorProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(BackgroundColorProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty BackgroundColorProperty =</span><br><span class="line">        DependencyProperty.Register(</span><br><span class="line">            <span class="string">&quot;BackgroundColor&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(Color),</span><br><span class="line">            <span class="keyword">typeof</span>(CustomDrawDecorator),</span><br><span class="line">            <span class="keyword">new</span> FrameworkPropertyMetadata(Colors.Yellow)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 标识WPF将自动调用OnRender()方法，通过调用InvalidateVisual()</span></span><br><span class="line">                AffectsRender = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnMouseMove</span>(<span class="params">MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnMouseMove(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.InvalidateVisual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnMouseLeave</span>(<span class="params">MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnMouseLeave(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.InvalidateVisual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnRender</span>(<span class="params">DrawingContext drawingContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnRender(drawingContext);</span><br><span class="line"></span><br><span class="line">        Rect bounds = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">base</span>.ActualWidth, <span class="keyword">base</span>.ActualHeight);</span><br><span class="line">        drawingContext.DrawRectangle(GetForegroundBrush(), <span class="literal">null</span>, bounds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Brush <span class="title">GetForegroundBrush</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!IsMouseOver)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SolidColorBrush(BackgroundColor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            RadialGradientBrush brush = <span class="keyword">new</span> RadialGradientBrush(Colors.White, BackgroundColor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get the position of the mouse in device-independent units, relative to the control itself.</span></span><br><span class="line">            Point absoluteGradientOrigin = Mouse.GetPosition(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert the point coordinates to proportional (0 to 1) values.</span></span><br><span class="line">            Point relativeGradientOrigin = <span class="keyword">new</span> Point(</span><br><span class="line">                absoluteGradientOrigin.X / <span class="keyword">base</span>.ActualWidth,</span><br><span class="line">                absoluteGradientOrigin.Y / <span class="keyword">base</span>.ActualHeight);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Adjust the brush</span></span><br><span class="line">            brush.GradientOrigin = relativeGradientOrigin;</span><br><span class="line">            brush.Center = relativeGradientOrigin;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> brush;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="customdrawdecorator-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:lib</span>=<span class="string">&quot;clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;375&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;260&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonWithCustomChrome&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lib:CustomDrawDecorator</span> <span class="attr">BackgroundColor</span>=<span class="string">&quot;LightGreen&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding ContentControl.Content&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ContentTemplate</span>=<span class="string">&quot;&#123;TemplateBinding ContentControl.ContentTemplate&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">lib:CustomDrawDecorator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonWithCustomChrome&#125;&quot;</span>&gt;</span></span><br><span class="line">            Button</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;现在可以使用这个模板重新样式化按钮，使其具有新的外观。当然，为了使自定义装饰元索更加实用，当单击鼠标按钮时可能希望改变它的外观。使用修改装饰类属性的触发器可以完成该工作。之前在第17章中已经全面讨论了这一设计。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;WPF支持样式、内容控件和模板，因此不再强调自定义控件。这些特性为每位开发人员提供了多种方式来完善和扩展标准的控件，而不用派生新的控件类。下面是几种可能的选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;样式&lt;/strong&gt;。可使用样式方便地重用控</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 17控件模板</title>
    <link href="http://bootree.cn/2024/07/22/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/17%E6%8E%A7%E4%BB%B6%E6%A8%A1%E6%9D%BF/"/>
    <id>http://bootree.cn/2024/07/22/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/17%E6%8E%A7%E4%BB%B6%E6%A8%A1%E6%9D%BF/</id>
    <published>2024-07-22T12:49:31.000Z</published>
    <updated>2024-07-30T14:32:30.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解逻辑树和可视化树"><a href="#理解逻辑树和可视化树" class="headerlink" title="理解逻辑树和可视化树"></a>理解逻辑树和可视化树</h2><p>&emsp;&emsp;下图显示了一个非常简单的窗口，该窗口包含两个按钮。为创建该窗口，在窗口中嵌套了一个StackPanel控件。在StackPaenl控件中，放置了两个Button控件，并且在每个按钮中可以添加所选择的内容</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240722210339.png" width="50%" style="border:1px solid gray"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span>&gt;</span>First Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Second Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;添加的元素分类成为逻辑树，下图显示了逻辑树。WPF编程人员需要耗费大部分时间构建逻辑树，然后使用事件处理代码支持它们。实际上，到目前为止介绍的所有WPF特性（如属性值继承、事件路由以及样式）都是通过逻辑树进行工作的。</p><center>简单窗口的逻辑树</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240722210724.png" width="60%"/><p>&emsp;&emsp;然而，如果希望自定义元素，逻辑树起不到多大帮助作用。显然，可使用另一个元素替换整个元素(例如，可使用自定义的 FancyButton 类替换当前的 Buton 类)，但这需要做更多工作，并且可能扰乱应用程序的用户界面或代码。因此，<strong>WPF通过可视化树进入更深层次</strong>。</p><p>&emsp;&emsp;可视化树是逻辑树的扩展版本。它将元素分成更小的部分。换句话说，它并不查看被精心封装到一起的黑色方框，如按钮，而是查看按钮的可视化元素--使按钮具有阴影背景特性的边框(由 ButtonChrome 类表示)、内部的容器(ContentPresenter 对象)以及存储按钮文本的块(由大家熟悉的 TextBlock 表示)。下图显示了上例的可视化树。</p><center>简单窗口的可视化树</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240722211001.png" width="60%"/><blockquote><p>所有这些细节本身都是元素——换句话说，控件(如按钮)中的每个单独的细节都是由FrameworkElement类的派生类表示的。</p></blockquote><div class="note info flat"><p>可采用多种方法将一棵逻辑树扩展成一棵可视化树，认识到这一点是很重要的。使用的样式和设置的属性等细节都可能影响可视化树的构成。</p></div><p>&emsp;&emsp;通过可视化树可以完成以下两项非常有用的工作：</p><ul><li>可使用样式改变可视化树中的元素。可使用Style.TargetType 属性选择希望修改的特定元素。甚至当控件属性发生变化时，可使用触发器自动完成更改。不过，某些特定的细节很难甚至无法修改。</li><li>可为控件创建新模板。对于这种情况，控件模板将被用于按期望的方式构建可视化树。</li></ul><div class="note info flat"><p>WPF提供了用于浏览逻辑树和可视化树的两个类：<code>System.Windows.LogicalTreeHelper</code>和<code>System.Windows.Media.VisualTreeHelper</code></p></div><p>&emsp;&emsp;<strong>LogicalTreeHelper</strong>类，该类允许通过动态加载的XAML文档在WPF应用程序中关联事件处理程序,<code>LogicTreeHelper</code>类提供了较少的方法，下表列出了这些方法，尽管这些方法偶尔很有用，但大多数情况下会改用特定的FrameworkElement类中的方法。</p><center>LogicalTreeHelper类的方法</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>FindLogicalNode()</td><td>根据名称查找特定元素，从指定的元素开始并向下查找逻辑树</td></tr><tr><td>BringIntoView()</td><td>如果元素在可滚动的容器中，并且当前不可见，就将元素滚动到视图中。<code>FrameworkElement.BegIntoView()</code>方法执行相同的工作</td></tr><tr><td>GetParent()</td><td>获取指定元素的父元素</td></tr><tr><td>GetChildren()</td><td>获取指定元素的子元素。不同元素支持不同的内容型。例如，面板支持多个子元素，而内容控件只支持一个子元素。然而，GetChildren()方法抽象了这一区别，并且可使用任何类型的元素进行工作</td></tr></tbody></table><div class="note info flat"><p><code>VisualTreeHelper</code>类提供的方法于<code>LogicalTreeHelper</code>类提供的方法类似，也提供了<code>GetChildrenCount()</code>、<code>GetChild()</code>以及<code>GetParent()</code>方法</p></div><p>&emsp;&emsp;VisualTreeHelper 类还提供了一种研究应用程序中可视化树的有趣方法。使用 GetChild()方法，可以遍历任意窗口的可视化树，并且为了进行分析可以将它们显示出来。这是一个非常好的学习工具，只需要使用一些递归的代码就可以实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">VisualTreeDisplay</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VisualTreeDisplay</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowVisualTree</span>(<span class="params">DependencyObject element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Clear the tree</span></span><br><span class="line">        treeElements.Items.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start processing elements,begin at the root.</span></span><br><span class="line">        ProcessElement(element, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessElement</span>(<span class="params">DependencyObject element, TreeViewItem previousItem</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create a TreeViewItem for the current element</span></span><br><span class="line">        TreeViewItem item = <span class="keyword">new</span> TreeViewItem();</span><br><span class="line">        item.Header = element.GetType().Name;</span><br><span class="line">        item.IsExpanded = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check whether this item should be added to the root of the tree</span></span><br><span class="line">        <span class="comment">// (if it&#x27;s the first item), or nested under another item.</span></span><br><span class="line">        <span class="keyword">if</span> (previousItem == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            treeElements.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            previousItem.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check whether this element contains other elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; VisualTreeHelper.GetChildrenCount(element); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Process each contained element recursively.</span></span><br><span class="line">            ProcessElement(VisualTreeHelper.GetChild(element, i), item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一旦为项目添加这棵树，就可以使用其他任何窗口的代码显示其可视化树：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VisualTreeDisplay treeDisplay = <span class="keyword">new</span> VisualTreeDisplay();</span><br><span class="line">treeDisplay.ShowVisualTree(<span class="keyword">this</span>);</span><br><span class="line">treeDisplay.Show();</span><br></pre></td></tr></table></figure><h2 id="理解模板"><a href="#理解模板" class="headerlink" title="理解模板"></a>理解模板</h2><blockquote><p>控件如何从逻辑树表示扩展成可视化树表示？</p></blockquote><p>&emsp;&emsp;每隔控件都有一个内置的方法，用于确定如何渲染控件（作为一组更基础的元素）。该方法称为控件模板（<code>Control Template</code>），是用XAML标记块定义的。</p><p>&emsp;&emsp;下面是普通<code>Button</code>类的模板的简化版本。该版本省略了XML名车行空间声明、为嵌套的元素设置属性的特性，以及当按钮被禁用、取得焦点或单击时确定按钮行为的触发器。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/5oaUq4i.gif"><!-- 静态图 --><!-- <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240723203437.png"/> --><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:themes</span>=<span class="string">&quot;clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button.Template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">themes:ButtonChrome</span> <span class="attr">x:Name</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;&#123;TemplateBinding ContentControl.Content&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">themes:ButtonChrome</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;UIElement.IsKeyboardFocused&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;Chrome&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;themes:ButtonChrome.RenderDefaulted&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;ToggleButton.IsChecked&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;Chrome&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;themes:ButtonChrome.RenderPressed&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;UIElement.IsEnabled&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;TextElement.Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;#FFADADAD&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button.Template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尽管尚未研究<code>ButtonChrome</code>和<code>ContentPresenter</code>类，但很容易就能联想到：控件模板提供了在可视化树中看到的扩展内容。<code>ButtonChrome</code>类定义按钮的标准可视化外观，而<code>ContentPresenter</code>类存储了提供的所有内容。如果希望构建全新按钮，只需要创建新的控件模板。除<code>ButtonChrome</code>类之外，还使用了其他一些内容——可能是自定义元素，也可能某个绘制形状的元素。</p><div class="note info flat"><p><code>ButtonChrome</code>类继承自<code>Decorator</code>类（于<code>Border</code>类非常类似）。这意味着这些类是为了在其他元素周围添加图形装饰而设计的——用于在按钮内容的周围添加图形装饰</p></div><p>&emsp;&emsp;当构建自己的控件模板时将看到同样的职责分离。如果足够幸运，可直接使用触发器完成所有工作，可能不需要创建自定义类并添加代码。另一方面，如果需要提供更复杂的可视化设计，可能需要继承自定义的修饰类。ButtonChrome类本身不提供定制功能--该类专门用于渲染标准按钮的特定主题外观。</p><div class="note warning flat"><p>所有的模板都继承自<code>FrameworkTeamplate</code>基类，模板类型除了控件模板(<code>ControlTeamplate</code>)之外，还有数据模板(<code>DataTeamplate</code>和<code>HierarchicalDataTeamplate</code>)，以及很特殊的用于<code>ItemsControl</code>控件的面板模板(由<code>ItemsPanTeamplate</code>类表示)</p></div><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>&emsp;&emsp;<code>ButtonChrome</code>类是在<strong>Microsoft.Windows.Themes</strong>名称空间中定义的，该名称空间中包含了一些较少的彼此相似的类，这些类用于渲染基本的Windows细节。除<code>ButtonChrome</code>外，这些类还包括<code>BulletChrome</code>(用于复选框和单选按钮)、<code>ScrollChrome</code>(用于滚动条)、<code>ListBoxChrome</code>以及<code>SystemDropShadowChrome</code>。这是最低级别的公有控件API。在稍高级别上，您会发现<code>System.Windows.Controls.Primitives</code>名称空间中包含大量可以独立使用的基本元素，但它们通常被封装到更有用的控件中。这些元素包括<code>ScrollBar</code>、<code>ResizeGrip</code>(用于改变窗口的尺寸)、<code>Thumb</code>(滚动条上的拖动按钮)、<code>TickBar</code>(滑动条上可选的刻度设置)等。在本质上，<code>System.Windows.Controls.Primitives</code>名称空间提供了可用在各种控件中的基本要素，本身的作用不大，而<code>Microsoft.Windows.Themes</code>名称空间包含了用于渲染这些细节的基本绘图逻辑。</p><p>&emsp;&emsp;还有一点区别。与大多数 WPF 类型一样，System,Windows.Controls.Primitives 名称空间中的类型都是在 PresentationFramework.dll 程序集中定义的。然而，Microsof, Windows.Themes 名称空间中的类型是在三个不同的程序集中定义的:PresentationFramework.Aero.dll、PresentationFramework,Luna,dl! 和 PresentationFramework.Royale.dl。每个程序集都包含自己的ButtonChrome 类(以及其他修饰类)版本，这些版本的渲染逻辑稍有不同。WPF 使用哪个程序集取决于操作系统和主题设置。</p><hr><p>&emsp;&emsp;尽管控件模板经常使用修饰类进行绘图，但并非总需要这样。例如，ResizeGrip 元素(该元素用于在可以改变尺寸的窗口的右下角创建点网格)非常简单，它的模板可使用之前学习的绘图类，如 Path、DrawingBrush 以及 LinearGradientBrush。下面是其使用的标记(有些复杂):</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240723205004.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResizeGrip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ResizeGrip.Template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ResizeGrip&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Panel.Background&#125;&quot;</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Path</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Margin</span>=<span class="string">&quot;0,0,2,2&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Right&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Bottom&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Data</span>=<span class="string">&quot;M9,0L11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3z&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Path.Fill</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DrawingBrush</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">TileMode</span>=<span class="string">&quot;Tile&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Viewbox</span>=<span class="string">&quot;0 0 3 3&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">ViewboxUnits</span>=<span class="string">&quot;Absolute&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Viewport</span>=<span class="string">&quot;0 0 3 3&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">ViewportUnits</span>=<span class="string">&quot;Absolute&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">DrawingGroup</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">DrawingGroup.Children</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">GeometryDrawing</span> <span class="attr">Geometry</span>=<span class="string">&quot;M0,0L2,0 2,2 0,2z&quot;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">GeometryDrawing.Brush</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0.25&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1,0.75&quot;</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0.3&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFFFFFFF&quot;</span> /&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0.75&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFBBC5D7&quot;</span> /&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FF6D83A9&quot;</span> /&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">GeometryDrawing.Brush</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">GeometryDrawing</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">DrawingGroup.Children</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">DrawingGroup</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Path.Fill</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ResizeGrip.Template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResizeGrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="剖析控件"><a href="#剖析控件" class="headerlink" title="剖析控件"></a>剖析控件</h3><p>&emsp;&emsp;当创建控件模板时，新建的模板完全代替了原来的的模板。这样可以得到更大的灵活性，但更复杂。大多数情况下，在创建满足自己需求的模板之前，需要查看控件使用的标准模板。在某些情况下，自定义的控件模板可镜像标准模板，并只进行很少的修改。</p><p>&emsp;&emsp;WPF文档没有列出标准控件模板的XAML。然而，可通过编程获取所需的信息。基本思想是从<code>Template</code>属性（该属性在<code>Control</code>类中定义）获取控件的模板，然后使用<code>XamlWriter</code>类，将该模板串行化到XAML文件中。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240723214328.png" width="80%"/><div class="tabs" id="defaultcontroltemplate"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="defaultcontroltemplate-1">MainWindow.xaml</button><button type="button" class="tab " data-href="defaultcontroltemplate-2">MainWindow.xaml.cs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="defaultcontroltemplate-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Name</span>=<span class="string">&quot;grid&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;3*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Name</span>=<span class="string">&quot;lstType&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">DisplayMemberPath</span>=<span class="string">&quot;Name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">SelectionChanged</span>=<span class="string">&quot;lstTypes_SelectionChanged&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Name</span>=<span class="string">&quot;txtTemplate&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">FontFamily</span>=<span class="string">&quot;Consolas&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">TextWrapping</span>=<span class="string">&quot;Wrap&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">VerticalScrollBarVisibility</span>=<span class="string">&quot;Visible&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="defaultcontroltemplate-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.Loaded += Window_Loaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_Loaded</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Type controlType = <span class="keyword">typeof</span>(Control);</span><br><span class="line">        List&lt;Type&gt; derivedTypes = <span class="keyword">new</span> List&lt;Type&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search all the types in the assembly where the Control class is defined.</span></span><br><span class="line">        Assembly assembly = Assembly.GetAssembly(<span class="keyword">typeof</span>(Control));</span><br><span class="line">        <span class="keyword">foreach</span> (Type type <span class="keyword">in</span> assembly.GetTypes())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Only add a type of the list if it&#x27;s a Control, a concrete class, and public.</span></span><br><span class="line">            <span class="keyword">if</span> (type.IsSubclassOf(controlType) &amp;&amp; !type.IsAbstract &amp;&amp; type.IsPublic)</span><br><span class="line">            &#123;</span><br><span class="line">                derivedTypes.Add(type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort the types by type name.</span></span><br><span class="line">        derivedTypes.Sort(<span class="keyword">new</span> TypeComparer());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Show the list of types.</span></span><br><span class="line">        lstType.ItemsSource = derivedTypes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lstTypes_SelectionChanged</span>(<span class="params"><span class="built_in">object</span> sender, SelectionChangedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Get the selected type.</span></span><br><span class="line">            Type type = (Type)lstType.SelectedItem;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate the type.</span></span><br><span class="line">            ConstructorInfo info = type.GetConstructor(System.Type.EmptyTypes);</span><br><span class="line">            Control control = (Control)info.Invoke(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            Window win = control <span class="keyword">as</span> Window;</span><br><span class="line">            <span class="keyword">if</span> (win != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Create the window (but keep it minimized).</span></span><br><span class="line">                win.WindowState = System.Windows.WindowState.Minimized;</span><br><span class="line">                win.ShowInTaskbar = <span class="literal">false</span>;</span><br><span class="line">                win.Show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Add it to the grid (but keep it hidden).</span></span><br><span class="line">                control.Visibility = Visibility.Collapsed;</span><br><span class="line">                grid.Children.Add(control);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get the template.</span></span><br><span class="line">            ControlTemplate template = control.Template;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get the XAML for the template.</span></span><br><span class="line">            XmlWriterSettings settings = <span class="keyword">new</span> XmlWriterSettings();</span><br><span class="line">            settings.Indent = <span class="literal">true</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            XmlWriter writer = XmlWriter.Create(sb, settings);</span><br><span class="line">            System.Windows.Markup.XamlWriter.Save(template, writer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Display the template.</span></span><br><span class="line">            txtTemplate.Text = sb.ToString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Remove the control from the grid.</span></span><br><span class="line">            <span class="keyword">if</span> (win != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                win.Close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                grid.Children.Remove(control);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception err)</span><br><span class="line">        &#123;</span><br><span class="line">            txtTemplate.Text = <span class="string">&quot;&lt;&lt; Error generating template:&quot;</span> + err.Message + <span class="string">&quot;&gt;&gt;&quot;</span>; ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeComparer</span> : <span class="title">IComparer</span>&lt;<span class="title">Type</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Compare</span>(<span class="params">Type x, Type y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.Name.CompareTo(y.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;构建该应用程序的诀窍是使用反射(reflection)，反射是用于检查类型的.NETAPI。当第一次加载应用程序的主窗口时，扫描PresentationFramework.dll 核心程序集(在该程序集中定义了控件类)中的所有类型。然后将这些类型添加到一个集合中，根据类型名称进行排序，此后将该集合绑定到一个列表。</p><p>&emsp;&emsp;无论何时从列表中选择控件，相应的控件模板都会显示在右边的文本框中。完成这一步需要做更多的工作。<strong>第一个挑战是，在窗口中实际显示控件之前，控件的模板为空。通过使用反射，代码试图创建控件的一个实例，并将它添加到当前窗口中(但可将 Visibility设置为Collapse，使控件不可见)<strong>。</strong>第二个挑战是，将现存的 ControlTemplete 对象转换为大家熟悉的 XAML 标记。XamlWriter.Save()静态方法负责完成该任务，但代码使用 XamlWriter 和 XamlWriterSettings 对象以确保 XAML缩进合理，便于阅读。</strong>所有这些代码都被封装在异常处理块中，异常处理块监视不能被创建或不能添加到 Grid 网格(如另一个 Window 或 Page)中的控件产生的问题:</p><hr><p>&emsp;&emsp;扩展该应用程序，从而在文本框中编辑模板，使用XamIReader将模板转换回ControlTemplate对象，然后指定给某个控件并观察效果，这并不是很困难。然而，通过将模板放置到真实窗口中进行实际操作，测试和改进它们会更加容易</p><h2 id="创建控件模板"><a href="#创建控件模板" class="headerlink" title="创建控件模板"></a>创建控件模板</h2><p>&emsp;&emsp;基本 Button 控件使用 ButtonChrome 类绘制其特殊的背景和边框。Button类使用 ButtonChrome 类而不使用 WPF 绘图图元的一个原因是，标准按钮的外观依赖于几个明显的特征(是否被禁用、是否具有焦点以及是否正在被单击)和其他一些更微妙的因素(如当前Windows 主题)。只使用触发器实现这类逻辑是笨拙的。</p><p>&emsp;&emsp;然而，当构建自定义控件时，可以不用担心标准化和主题集成(<strong><code>实际上，WPF不像以前的用户界面技术那样强调用户界面标准化</code></strong>)。反而更需要关注如何创建富有吸引力的新颖控件，并将它们混合到用户界面的其他部分。因此，可能不需要创建诸如ButtonChrome的类，而可使用已经学过的元素(可使用绘图元素和动画技巧)，设计自给自足的不使用代码的控件模板。</p><h3 id="简单按钮"><a href="#简单按钮" class="headerlink" title="简单按钮"></a>简单按钮</h3><p>&emsp;&emsp;为应用自定义控件模板，只需要设置控件的<code>Template</code>属性。尽管可定义内联模板（通过在控件标签内部嵌入控件模板标签），但这种方法基本没有意义。这是因为几乎总是希望未同一控件的多个皮肤实例重用模板。为适应这种设计，需要将控件模板定义为资源，并使用<code>StaticResource</code>引用该资源，如下所示：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240724205153.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Background</span>=<span class="string">&quot;#E3D4F5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">CornerRadius</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>&gt;</span></span><br><span class="line">        Click_Me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过这种方法，不仅可以较容易地创建许多自定义按钮，在以后还可以很灵活地修改控件模板，而不会扰乱应用程序用户界面的其余部分。<br>&emsp;&emsp;该 ContentPresenter 元素将 RecognizesAccessKey 属性设置为 true。尽管这不是必需的，但可确保按钮支持访问键——具有下划线的字母，可以使用该字母快速触发按钮。对于这种情况,如果按钮具有文本 Click_Me，那么当用户按下 Alt+M 组合键时会触发按钮(在标准的 Windows设置中，下划线是隐藏的，并且只要按下了 Alt 键，访问键(在此是 M 键)就会具有下划线)。如果未将RecognizesAccessKey属性设置为true，就会忽略该细节，并且任何下划线都将被视为普通的下划线，并作为按钮内容的一部分进行显示。</p><div class="note info flat"><p>&emsp;&emsp;<strong>如果控件继承自 ContentControl类，其模板将包含一个 ContentPresenter 元素，指示将在何处放置内容。</strong> <strong>如果控件继承自 ItemsControl类，其模板将包含一个 ItemsPresenter 元素，指示在何处放置包含列表项的面板。</strong>在极少数情况下，控件可能使用这些类的派生版本--例如，ScrollViewer 的控件模板使用继承自ContentPresenter 类的 ScrollContentPresenter 类</p></div><h3 id="模板绑定"><a href="#模板绑定" class="headerlink" title="模板绑定"></a>模板绑定</h3><p>&emsp;&emsp;通过使用它模板绑定，模板可从应用模板的控件中提取一个值。在本例中，可使用模板绑定检索<code>Padding</code>属性的值，并使用该属性值在<code>ContentPresenter</code>元素周围创建外边距。</p><blockquote><p>这样就会得到所期望的效果，在边框和内容之间添加一些空白</p></blockquote><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240724205657.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Background</span>=<span class="string">&quot;#E3D4F5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">CornerRadius</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>&gt;</span></span><br><span class="line">        Click_Me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>模板绑定和普通的数据绑定类似，但它们的量级更轻，因为它们是专门只支持单向数据绑定（换句话说，它们可从控件想模板传递信息，但不能从模板向控件传递信息）</strong>，并且不能用于从<code>Freezable</code>类的派生类的属性中提取信息。<code>如果遇到模板绑定不生效的情形，可改用具有完整功能的数据绑定</code></p><div class="note warning flat"><p>&emsp;&emsp;模板绑定支持 WPF 的变化监测基础结构，所有依赖项属性都包含该基础结构。这意味着如果修改了控件的属性，模板会自动考虑该变化。当使用在一小段时间内重复改变属性值的动画时，该细节尤其有用。</p></div><div class="note danger flat"><p>&emsp;&emsp;从技术角度该，<code>ContentPresenter</code>元素之所以能够工作，是因为它有一个模板绑定——用于将<code>ContentPresenter.Content</code>属性设置为<code>Button.Content</code>属性。然而该绑定是隐式的，所以不必自行添加</p></div><p>&emsp;&emsp;可能选择避免模板绑定的另一个原因是--您的控件不能很好地支持它们。例如，如果为按钮设置了Background 属性，可能注意到当按钮被按下时不会连贯地处理该背景色(实际上，这时该背景色消失了，并且被按下按钮的默认外观替换了)。该例中的自定义模板与此类似，尽管还没有任何鼠标悬停和鼠标单击行为，但一旦添加这些细节，就会希望完全控制按钮的颜色以及在不同状态下它们的变化方式。</p><h3 id="改变属性的触发器"><a href="#改变属性的触发器" class="headerlink" title="改变属性的触发器"></a>改变属性的触发器</h3><p>&emsp;&emsp;如果测试在上一节中创建的按钮，就会发现它令人十分失望。本质上，它不过是一个红色的圆角矩形--当在它上面移动鼠标或单击鼠标时，其外观没有任何反应。按钮只是无动于衷，呆在那儿不动。因此可通过为控件模板添加触发器来方便地解决这个问题。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240724211529.png"/><div class="tabs" id="trigger"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="trigger-1">直接改变颜色</button><button type="button" class="tab " data-href="trigger-2">通过改变Opacity</button></ul><div class="tab-contents"><div class="tab-item-content active" id="trigger-1"><p>&emsp;&emsp;通过Trigger直接改变颜色需要手动设置多个颜色</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Background</span>=<span class="string">&quot;#E3D4F5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">CornerRadius</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;TextBlock.Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;DarkRed&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsPressed&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;TextBlock.Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;IndianRed&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;BorderBrush&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;DarkKhaki&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>&gt;</span></span><br><span class="line">        Click_Me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="trigger-2"><p>&emsp;&emsp;通过改变<code>Opacity</code>只需要设置单个颜色即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Background</span>=<span class="string">&quot;#E3D4F5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderBrush</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">CornerRadius</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Opacity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0.7&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsPressed&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Opacity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>&gt;</span></span><br><span class="line">        Click_Me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;为使该模板能够工作，还要进行另一项修改。已为 Border 元素指定一个名称，并且该名称被用于设置每个设置器的 TargetName 属性。通过这种方法，设置器能更新在模板中指定的Border 元素的 Background 和 BorderBrush属性。使用名称是确保更新模板特定部分的最容易方法。可创建一条元素类型规则来影响所有 Border 元素(原因是已经知道在按钮模板中只有一个边框)，但如果在以后改变模板，这种方法更清晰，也更灵活。</p><p>&emsp;&emsp;在所有按钮(以及其他大部分控件)中还需要另一个元素——<strong>焦点指示器</strong>。虽然无法改变现有的边框以添加焦点效果，但是可以很容易地添加另一个元素以显示是否具有焦点，并且可以简单地使用触发器根据 <code>Button.IsKeyboardFocused</code> 属性显示或隐藏该元素。尽管可使用许多方法创建焦点效果，但下面的示例只添加了一个具有虚线边框的透明的 Rectangle 元素。Rectangle 元素不能包含子内容,从而需要确保 Rectangle 元素和其余内容相互重叠。完成该操作最容易的方法是使用只有一个单元格的 Grid 控件来封装 Rectangle 元素和 ContentPresenter 元素，这两个元素位于同一个单元格中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Background</span>=<span class="string">&quot;#E3D4F5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderBrush</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">CornerRadius</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">x:Name</span>=<span class="string">&quot;focusCue&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">StrokeDashArray</span>=<span class="string">&quot;1 2&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Visibility</span>=<span class="string">&quot;Hidden&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Opacity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0.7&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsPressed&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Opacity&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsKeyboardFocused&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;focusCue&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Visibility&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Visible&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsEnabled&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Gray&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>&gt;</span></span><br><span class="line">        Click_Me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>为确保该规则优先于其他相冲突的触发器设置，应当在触发器列表的末尾定义它。</strong>这样，不管 IsMouseOver 属性是否为 true，IsEnabled 属性触发器都具有优先权，并且按钮保持未激活状态的外观。</p><div class="note warning flat"><p>&emsp;&emsp;模板和样式有类似之处。通常，在整个应用程序中，这两个特性都可以改变元素的外观。然而，样式被限制在一个小得多的范围之内。它们可调整控件的属性，但不能使用全新的由不同元素组成的可视化树替代控件原来的外观。</p></div><h3 id="使用动画的触发器"><a href="#使用动画的触发器" class="headerlink" title="使用动画的触发器"></a>使用动画的触发器</h3><p>&emsp;&emsp;触发器并非局限于设置属性。当特定属性发生变化时，还可以使用时间触发器运行动画。时间触发器允许控件更流畅地一点点从一个状态改变到另一个状态，从而进一步润色其外观。</p><p>&emsp;&emsp;下面是重新设计的按钮模板，当鼠标悬停在按钮上时，该模板使用触发器实现按钮颜色脉冲效果（在红色和蓝色之间不断切换）。当鼠标离开时，使用一个单独的持续1秒的动画，将按钮背景返回到其正常颜色：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/RLa4HFZRxW.gif"/><!-- 静态图片 --><!-- <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240724215342.png"/> --><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Background</span>=<span class="string">&quot;#E3D4F5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">CornerRadius</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">x:Name</span>=<span class="string">&quot;focusCue&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">StrokeDashArray</span>=<span class="string">&quot;1 2&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Visibility</span>=<span class="string">&quot;Hidden&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;MouseEnter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ColorAnimation</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">AutoReverse</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;border&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Background.Color&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">To</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.1&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;MouseLeave&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ColorAnimation</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;border&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Background.Color&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.5&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Template</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>&gt;</span></span><br><span class="line">        Click_Me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可使用两种等价的方法添加鼠标悬停动画--创建响应MouseEnter和 MouseLeave 事件的事件触发器(正如在此所演示的)，或创建当IsMouseOver属性发生变化时添加进入和退出动作的属性触发器。</p><h2 id="组织模板资源"><a href="#组织模板资源" class="headerlink" title="组织模板资源"></a>组织模板资源</h2><p>&emsp;&emsp;当使用控件模板时，需要决定如何更广泛地共享模板，以及是否希望自动地明确地应用模板。大多数情况下，控件模板应用于多个窗口，甚至可能应用于整个应用程序，为避免多次定义模板可在<code>Application</code>类的<code>Resources</code>集合中定义模板资源</p><p>&emsp;&emsp;然而，为此需要考虑另一个事项。通常，控件模板在多个应用程序之间共享。单个应用程序很有可能使用单独开发的模板。然而，一个应用程序只能有一个App.xaml 文件和一个Application.Resources集合。<strong>因此，在单独资源字典中定义资源是一个更好的主意。这样，可灵活地在特定窗口或在整个应用程序中使用资源。而且还可以结合使用样式，因为任何应用程序都可以包含多个资源字典。</strong>为在 Visual Studio 中添加资源字典，在 Solution Explorer 窗口中右击项目，选择Add|NewItem菜单项，然后选择Resource Dictionary(WPF)模板。</p><div class="note warning flat"><p>&emsp;&emsp;虽然可将所有模板组合到单个资源字典文件中，但富有经验的开发人员更愿意为每个控件模板创建单独的资源字典。这是因为控件模板可能会很快变得过于复杂，并可能需要使用其他相关资源。将它们保存在一个单独的地方，并与其他控件相隔离，是一种很好的组织方式</p></div><p>&emsp;&emsp;为使用资源字典，只需要将它们添加到特定窗口或应用程序(这种情况更常见)的<code>Resources</code>集合中。可使用<code>MergedDictionaries</code>集合完成该工作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.App&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">StartupUri</span>=<span class="string">&quot;MainWindow.xaml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;ButtonStyles.xaml&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分解按钮控件模板"><a href="#分解按钮控件模板" class="headerlink" title="分解按钮控件模板"></a>分解按钮控件模板</h3><p>&emsp;&emsp;当完善或扩展控件模板时，可发现其中封装了大量的不同细节，包括特定的形状、几何图形和画刷。<strong>从控件模板中提取这些细节并将它们定义为单独的资源是一个好主意</strong>。一个原因是通过该步骤，可以更方便地在一组相关的控件中重用这些画刷。例如，您可能会决定创建使用相同颜色的自定义 Buton、CheckBox 和 RadioButton控件。为使该工作更加容易，可为画刷(名为Brushes.xaml)创建一个单独的资源字典，并将该资源字典合并到每个控件(如Button,xaml、CheckBox.xaml和 RadioButton.xaml)的资源字典中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:ResourceLibrary&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;/Resources/Brushes.xaml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;/Resources/Buttons.xaml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;/Resources/CheckBoxs.xaml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="通过样式应用模板"><a href="#通过样式应用模板" class="headerlink" title="通过样式应用模板"></a>通过样式应用模板</h3><p>&emsp;&emsp;控件模板本质上硬编码了一些细节，如颜色方案等等。如果希望提供不同的颜色方案，就必须创建引用不同画刷资源的新模板副本。可使用如下方式不使用硬编码的颜色，而需要使用模板绑定从控件属性中提取出信息。下面的示例为前面看到的特殊按钮定义了一个精简的模板：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;ButtonTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span></span></span><br><span class="line"><span class="tag">        <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">BorderThickness</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">CornerRadius</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Rectangle</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Name</span>=<span class="string">&quot;focusCue&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">StrokeDashArray</span>=<span class="string">&quot;1 2&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Visibility</span>=<span class="string">&quot;Hidden&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ContentPresenter</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsKeyboardFocused&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;focusCue&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Visibility&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Visible&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;关联的样式应用这个控件模板，设置边框和背景颜色，并添加触发器以便根据按钮的状态改变背景色：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;BorderBrush&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource DefaultBorderBrush&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource DefaultBackground&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;TextBlock.Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource HighlightBackground&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsPressed&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource PressedBackground&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsEnabled&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource DisableBackground&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;理想情况下，应能在控件模板中保留所有触发器，因为它们代表控件的行为，并使用样式简单设置基本属性。但在此如果希望样式能够设置颜色方案，是不可能实现的。</p><div class="note danger flat"><p>&emsp;&emsp;如果在控件模板和样式中都设置了触发器，那么样式触发器具有优先权</p></div><h3 id="自动应用模板"><a href="#自动应用模板" class="headerlink" title="自动应用模板"></a>自动应用模板</h3><p>&emsp;&emsp;在当前示例中，每个按钮负责使用<code>Template</code>或<code>Style</code>属性将自身关联到适当模板。如果使用控件模板，在应用程序中的特定位置创建特殊效果，这是合理的。当如果希望在具有自定义外观的整个应用程序中改变每隔按钮的皮肤，这就不是很方便了。对于这种情况，可能会更希望应用程序中的所有按钮自动请求新的模板。为实现该功能，需要通过样式应用控件模板。</p><p>&emsp;&emsp;**技巧是使用类型样式，这种样式会自动影响响应的元素类型并设置<code>Teamplate</code>属性。下面是一个样式示例，应将该样式放到资源字典集合中，从而为按钮提供新的外观：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Template&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource ButtonTemplate&#125;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的代码可以工作，原因是样式没有指定键名，这意味着改用元素类型(Button)。请记住，<strong>仍可通过创建一个按钮并将其Style属性明确设置为null值，退出该样式:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> <span class="attr">...</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>&emsp;&emsp;如果遵循正确的设计原则，并在单独的资源字典中定义按钮，这种技术的效果更好。对于这种情况，直到添加将您的资源导入到整个应用程序或特定窗口中的 ResourceDictionary 标签时，样式才会生效。</p></div><p>&emsp;&emsp;**包含基于类型的样式的组合的资源字典通常(非正式地)被称为主题(Theme)**。主题能够实现非凡的效果。通过主题可为已有应用程序的所有控件重新应用皮肤，而根本不需要公开用户界面标记。需要做的全部工作就是为项目添加资源字典，并将其合并到<code>App.xaml</code>文件的<code>Application.Resources</code>集合中。</p><p>&emsp;&emsp;为使用主题，为项目添加包含资源字典的xaml文件。例如，WPF Futures提供了一个名为ExpressionDark.xaml的主题文件，然后，需要在应用程序中激活样式。可逐个窗口地完成该工作，但更快捷的方法是通过添加如下所示的标记在应用程序级别导入它们：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.App&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">StartupUri</span>=<span class="string">&quot;MainWindow.xaml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;pack://application:,,,/ResourceLibrary;component/Resources/ExpressionDark.xaml&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="由用户选择的皮肤"><a href="#由用户选择的皮肤" class="headerlink" title="由用户选择的皮肤"></a>由用户选择的皮肤</h3><p>&emsp;&emsp;在一些应用程序中，可能希望动态改变模板，通常是根据用户的个人爱好加以改变，<strong>基本思路是在运行时加载新的资源字典，并使用新加载的资源字典代替当前的资源字典</strong>（不需要替换所有资源，只需要替换那些用于皮肤的资源）。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/QwsML5j3Jf.gif" style="1px solid gray;"><p>&emsp;&emsp;<code>ExpressionDark</code>和<code>ExpressionLight</code>主题资源可见<a class="btn-beautify left outline larger" href="https://github.com/StanislawSwierc/WpfThemesCollection/tree/master/Themes"   title="Themes"><i class="far fa-hand-point-right"></i><span>Themes</span></a>所示</p><div class="tabs" id="changetheme"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="changetheme-1">引用主题资源</button><button type="button" class="tab " data-href="changetheme-2">MainWindow.xaml</button><button type="button" class="tab " data-href="changetheme-3">切换主题</button></ul><div class="tab-contents"><div class="tab-item-content active" id="changetheme-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.App&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">StartupUri</span>=<span class="string">&quot;MainWindow.xaml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;pack://application:,,,/ResourceLibrary;component/Resources/ExpressionDark.xaml&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="changetheme-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:r</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Width</span>=<span class="string">&quot;350&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Height</span>=<span class="string">&quot;520&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">Background</span>=<span class="string">&quot;&#123;DynamicResource WindowBackgroundBrush&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;20&quot;</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Margin</span>=<span class="string">&quot;10,0&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;Theme:&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Name</span>=<span class="string">&quot;rb_dark&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Click</span>=<span class="string">&quot;ChangeThemeClick&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Dark&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">IsChecked</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Name</span>=<span class="string">&quot;rb_light&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Click</span>=<span class="string">&quot;ChangeThemeClick&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Light&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">            Button</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="changetheme-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangeThemeClick</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> rd = <span class="keyword">new</span> ResourceDictionary();</span><br><span class="line">    <span class="keyword">if</span> (rb_dark.IsChecked == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rd.Source = <span class="keyword">new</span> Uri(</span><br><span class="line">            <span class="string">&quot;pack://application:,,,/ResourceLibrary;component/Resources/ExpressionDark.xaml&quot;</span>,</span><br><span class="line">            UriKind.RelativeOrAbsolute</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rb_light.IsChecked == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rd.Source = <span class="keyword">new</span> Uri(</span><br><span class="line">            <span class="string">&quot;pack://application:,,,/ResourceLibrary;component/Resources/ExpressionLight.xaml&quot;</span>,</span><br><span class="line">            UriKind.RelativeOrAbsolute</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rd.Source != <span class="literal">null</span>)</span><br><span class="line">        Application.Current.Resources.MergedDictionaries[<span class="number">0</span>] = rd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;当加载新的资源字典时，会自动使用新模板更新所有按钮。如果当修改控件时不需要完全改变皮肤，还可以为皮肤提供基本样式。该例假定<code>ExpressionDark</code>和<code>ExpressionLight</code>资源使用元素类型样式自动改变按钮。还有一种方法——可通过手动设置Button对象的<code>Template</code>属性或<code>Style</code>属性来选用新的模板。<strong>如果使用这种方法，务必使用<code>DynamicResource</code>应用，而不能使用<code>StaticResource</code>，如果使用<code>StaticResource</code>，当切换皮肤时不会更新按钮模板。</strong></p><div class="note warning flat"><p>&emsp;&emsp;当使用 DynamicResource 引用时，首先要保证需要的资源位于资源层次结构中。如果资源并不位于资源层次结构中，就会忽略资源。而且按钮会恢复为它们的标准外观，而不会生成错误,</p></div><p>&emsp;&emsp;还有一种通过编写代码加载资源字典的方法。可使用与为窗口创建代码隐藏类几乎相同的方法，为资源字典创建代码隐藏类。然后就可以直接实例化这个类<br>，而不是使用<code>ResourceDictionary.Source</code>属性。这种方法有一个有点，它是前类型的(没有机会为Source属性输入无效的URI)，并且可为资源类添加属性、方法以及其他功能。</p><p>&emsp;&emsp;尽管为资源字典创建代码隐藏类很容易，但Visual Studio不能自动完成该工作。需要为继承自<code>ResourceDictionary</code> 的部分类添加代码文件,并在构造函数中调用 <code>InitializeComponent()</code>方法:</p><div class="tabs" id="rdchangetheme"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="rdchangetheme-1">定义资源隐藏类</button><button type="button" class="tab " data-href="rdchangetheme-2">隐藏类链接到资源字典</button><button type="button" class="tab " data-href="rdchangetheme-3">切换主题</button></ul><div class="tab-contents"><div class="tab-item-content active" id="rdchangetheme-1"><p>&emsp;&emsp;这里使用的类名为<code>ExpressionDark</code>，而且改为存储在<code>ExpressionDark.xaml.cs</code>文件中。包含资源的XAML文件被命名为<code>ExpressionDark.xaml</code>。不是必须使用一致的名称，当这是一个好主意，并且在创建窗口以及创建页面时也遵循了Visual Studio使用的这一约定。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须使用部分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ExpressionDark</span> : <span class="title">ResourceDictionary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExpressionDark</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 需要手动通过构造函数调用InitializeComponent()函数</span></span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="rdchangetheme-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;ResourceLibrary.Resources.ExpressionDark&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="rdchangetheme-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangeThemeClick</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ResourceDictionary? rd = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (rb_dark.IsChecked == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 可以直接实例化资源字典链接的部分类，不需要设置Source属性</span></span><br><span class="line">        rd = <span class="keyword">new</span> ExpressionDark();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rb_light.IsChecked == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rd = <span class="keyword">new</span> ExpressionLight();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rd != <span class="literal">null</span>)</span><br><span class="line">        Application.Current.Resources.MergedDictionaries[<span class="number">0</span>] = rd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;在Solution Explorer中，如果希望<code>ExpressionDark.cs</code>文件嵌套在<code>ExpressionDark.xaml</code>文件的下面，需要在文本编辑器中修改.csproj项目文件。在<code>&lt;ItemGroup&gt;</code>部分，找到代码隐藏文件，并将下面的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Include</span>=<span class="string">&quot;Resources\ExpressionDark.xaml.cs&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Include</span>=<span class="string">&quot;Resources\ExpressionDark.xaml.cs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DependentUpon</span>&gt;</span>Resources\ExpressionDark.xaml<span class="tag">&lt;/<span class="name">DependentUpon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Compile</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>&emsp;&emsp;我使用的.NET8版本的WPF，似乎不需要进行此处的配置</p></div><h2 id="构建更复杂的模板"><a href="#构建更复杂的模板" class="headerlink" title="构建更复杂的模板"></a>构建更复杂的模板</h2><p>&emsp;&emsp;为控件模板和为其提供支持的代码之间有一个隐含约定。如果使用自定义控件模板替代控件的标准模板，就需要确保新模板能够满足控件的实现代码的所有需要。<br>&emsp;&emsp;在简单控件中，这个过程比较容易，因为对模板几乎没有(或完全没有)什么真正的要求。对于复杂控件问题就显得有些微妙了，因为控件的外观和实现不可能是完全相互独立的。对于这种情况，控件需要对其可视化显示做出一些假设，而不管曾经被设计得多么好。</p><h3 id="嵌套的模板"><a href="#嵌套的模板" class="headerlink" title="嵌套的模板"></a>嵌套的模板</h3><p>&emsp;&emsp;按钮控件的模板可分解成几个较为简单的部分。然而，许多模板并非如此简单。在某些情况下，控件模板将包含每个自定义模板也需要的大量元素。而在有些情况下，改变控件的外观设计创建多个模板。</p><blockquote><p>创建下面的示例是为ListBox控件设计模板，并酌情添加自动应用模板的样式</p></blockquote><center>“鱼眼”效果</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/7evQXBng4l.gif"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBox&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBox&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">CornerRadius</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ScrollViewer</span> <span class="attr">Focusable</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ItemsPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ScrollViewer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对于该模板，最值得注意之处是它未提供的功能--配置列表中各项的外观。没有该功能，被选择的元素总是使用熟悉的蓝色背景突出显示。为改变这种行为，需要为ListBoxItem 控件添加控件模板，ListBoxItem 控件是封装列表中每个单独元素内容的内容控件</p><p>&emsp;&emsp;与 ListBox 模板一样，可使用元素类型样式应用 ListBoxltem 模板。下面的基本模板在一个不可见的边框中封装了每个项。因为 ListBoxltem 是内容控件，所以需要使用 ContentPresenter元素在其内部放置项的内容。除这些基本内容外，还有当鼠标移动到项上或单击项时做出响应的触发器:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBoxItem&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBoxItem&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ContentPresenter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;ListBoxItem.MouseEnter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">To</span>=<span class="string">&quot;20&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;ListBoxItem.MouseLeave&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">BeginTime</span>=<span class="string">&quot;0:0:0.5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;BorderBrush&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsSelected&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Green&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;TextBlock.Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改滚动条"><a href="#修改滚动条" class="headerlink" title="修改滚动条"></a>修改滚动条</h3><p>&emsp;&emsp;列表框还有一个方面没有改变：右边的滚动条。它是<code>ScrollViewer</code>元素的一部分，<code>ScrollViewer</code>元素时<code>ListBox</code>模板的一部分。尽管该例重新定义了<code>ListBox</code>模板，但没有替换<code>ScrollBar</code>的<code>ScrollViewer</code></p><p>&emsp;&emsp;为自定义该细节,可为 ListBox 控件创建一个新的 ScrollViewer 模板。然后<strong>可将 ScrolViewer模板指向自定义的 ScrollBar 模板。然而，还有更简单的选择。可创建一个改变所有 ScrollBar控件模板的特定于元素类型的样式。这样就避免了创建 ScrollViewer 模板所需的额外工作。</strong></p><p>&emsp;&emsp;当然，还需要考虑这种设计会对应用程序的其他部分造成什么影响。如果创建元素类型样式 ScrollBar，并将其添加到窗口的 Resources 集合中，对于窗口中的所有控件，无论何时使用ScrollBar 控件，都会具有新样式的滚动条，这可能正是您所希望的效果。另一方面，<strong>如果希望只改变 ListBox控件中的滚动条,就必须为ListBox控件本身的资源集合添加元素类型样式 ScrollBar。</strong>最后，如果希望改变整个应用程序中所有滚动条的外观，可将该样式添加到 App.xaml文件的资源集合中。</p><center>解剖滚动条</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240727103622.png" width="50%"/><p>&emsp;&emsp;<strong>滚动条的背景由 Track 类表示——实际上是一个具有阴影并且被拉伸占满整个滚动条长度的矩形。滚动条的末尾处是按钮，通过这些按钮可以向上或向下(或向左或向右)滚动一个步长这些按钮是 RepeatButton类的实例</strong>，该类继承自 ButtonBase类。RepeatButton 类和普通 Button类之间的重要区别在于，如果在 RepeatButton 按钮上保持鼠标为按下状态，就会反复触发 Click事件(对于滚动这是非常方便的)。</p><p>&emsp;&emsp;<strong>在滚动条的中间是代表滚动内容中当前位置的 Thumb 元素。并且最有趣的是，滑块两侧的空白实际上由另外两个 RepeatButton对象构成，它们是透明的。</strong>当单击这两个按钮中的一个时，滚动条会滚动一整页(一页是滚动内容所在的可见窗口中的内部容量)。通过单击滑块两侧的条形区域，可快速浏览滚动内容，这一功能是大家所熟悉的。</p><blockquote><p>下面是用于垂直滚动条的模板</p></blockquote><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/2LcBHYUwyx.gif"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;StandardBrush&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#F5F5F5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;StandardBorderBrush&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#D4D4D4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;PressedBrush&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#EEEEEE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;GlyphBrush&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#333&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;ScrollBarThumbStyle&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Thumb&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;IsTabStop&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Focusable&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1,0,1,0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource StandardBrush&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;BorderBrush&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource StandardBorderBrush&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Thumb&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource StandardBrush&#125;&quot;</span> <span class="attr">Stroke</span>=<span class="string">&quot;&#123;StaticResource StandardBorderBrush&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;ScrollBarLineButtonStyle&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type RepeatButton&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Focusable&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type RepeatButton&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Ellipse</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource StandardBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">Stroke</span>=<span class="string">&quot;&#123;StaticResource StandardBorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsPressed&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Fill&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource PressedBrush&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;ScrollBarPageButtonStyle&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type RepeatButton&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;IsTabStop&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Focusable&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;False&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type RepeatButton&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Background</span>=<span class="string">&quot;Transparent&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;VerticalScrollBar&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ScrollBar&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">MaxHeight</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">MaxHeight</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RepeatButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Height</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Command</span>=<span class="string">&quot;ScrollBar.LineUpCommand&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ScrollBarLineButtonStyle&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Data</span>=<span class="string">&quot;M 0 4 L 8 4 L 4 0 Z&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource GlyphBrush&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RepeatButton</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Track</span></span></span><br><span class="line"><span class="tag">                <span class="attr">x:Name</span>=<span class="string">&quot;PART_Track&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">IsDirectionReversed</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ViewportSize</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Track.DecreaseRepeatButton</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RepeatButton</span> <span class="attr">Command</span>=<span class="string">&quot;ScrollBar.PageUpCommand&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ScrollBarPageButtonStyle&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Track.DecreaseRepeatButton</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Track.Thumb</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Thumb</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ScrollBarThumbStyle&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Track.Thumb</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Track.IncreaseRepeatButton</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RepeatButton</span> <span class="attr">Command</span>=<span class="string">&quot;ScrollBar.PageDownCommand&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ScrollBarPageButtonStyle&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Track.IncreaseRepeatButton</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Track</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RepeatButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Grid.Row</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Height</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Command</span>=<span class="string">&quot;ScrollBar.LineDownCommand&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ScrollBarLineButtonStyle&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Data</span>=<span class="string">&quot;M 0 0 L 4 4 L 8 0 Z&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource GlyphBrush&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RepeatButton</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RepeatButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Grid.Row</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Height</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Command</span>=<span class="string">&quot;ScrollBar.LineDownCommand&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ScrollBarLineButtonStyle&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Data</span>=<span class="string">&quot;M 0 0 L 4 4 L 8 0 Z&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource GlyphBrush&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RepeatButton</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ScrollBar&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;SnapsToDevicePixels&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;OverridesDefaultStyle&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;Orientation&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Vertical&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Width&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Height&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource VerticalScrollBar&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBox&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBox&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">CornerRadius</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ScrollViewer</span> <span class="attr">Focusable</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ItemsPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">ScrollViewer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBoxItem&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Height&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Template&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type ListBoxItem&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">x:Name</span>=<span class="string">&quot;border&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Background</span>=<span class="string">&quot;&#123;TemplateBinding Background&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">BorderBrush</span>=<span class="string">&quot;&#123;TemplateBinding BorderBrush&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">BorderThickness</span>=<span class="string">&quot;&#123;TemplateBinding BorderThickness&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;ListBoxItem.MouseEnter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">To</span>=<span class="string">&quot;20&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;ListBoxItem.MouseLeave&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">DoubleAnimation</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">BeginTime</span>=<span class="string">&quot;0:0:0.5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;BorderBrush&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsSelected&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Green&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">&quot;border&quot;</span> <span class="attr">Property</span>=<span class="string">&quot;TextBlock.Foreground&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListBox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍎<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍌<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍊<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍈<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍉<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍇<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍓<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🍍<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBoxItem</span>&gt;</span>🌰<span class="tag">&lt;/<span class="name">ListBoxItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListBox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一旦理解滚动条的多部分结构，上面的模板就非常直观了。下面列出需要注意的即可要点：</p><ul><li>垂直滚动条由一个包含三行的网课构成。顶hang6he底行容纳两端的按钮（并显示为剪头）。它们固定占用18可单位。中间部分容纳<code>Track</code>元素，占用了剩余空间。</li><li>两段的<code>RepeatButton</code>元素使用相同的样式。唯一的区别是<code>Content</code>属性，该属性包含了一个用于绘制剪头的<code>Path</code>对象，因为顶部的按钮具有上箭头而底部具有下箭头。为简明起见，这些剪头使用的微语言路径。其他细节（如背景填充和剪头周围显示的圆圈）是在控件模板中定义的，这些定义位于标记中的<code>ScrollBarLineButtonStyle</code>部分</li><li>两个按钮都链接到 ScrollBar 类中的命令(LineUpCommand 和 LineDownCommand)。这正是其工作原理。只要提供链接到这个命令的按钮即可，不必考虑按钮的名称是什么，也不必考虑其外观像什么或使用哪个特定的类(在第9章中详细介绍了命令)。</li><li><code>Track 元素名为 PART_Track。为使 ScrollBar 类能够成功地关联到它的代码，必须使用这个名称</code>。如果査看 ScrollBar 类的默认模板(类似于上面的模板，但更长一些)，也会看到该元素。</li><li>Track.ViewportSize 属性被设置为0。这是该模板特有的实现细节，可确保 Thumb 元素总有相同的尺寸(通常，滑块根据内容按比例地改变尺寸，因此如果滚动的内容在窗口中基本上能够显示，这时滑块会变得较长)。</li><li>Track 元素封装了两个 RepeatButton 对象(它们的样式单独定义)和 Thumb 元素。同样，这些按钮通过命令连接到适当的功能。</li></ul><h3 id="控件模板示例"><a href="#控件模板示例" class="headerlink" title="控件模板示例"></a>控件模板示例</h3><p>&emsp;&emsp;为通用控件提供新模板是一件复杂的任务。这是因为控件模板的所有需求并不总是很明显。例如，典型的<code>ScrollBar</code>控件需要组合两个<code>RepeatButton</code>对象和一个<code>Track</code>对象。其他控件模板需要具有特定<code>PART_名称</code>的元素。在自定义窗口情形中，需要确保定义了装饰层，因为一些控件需要使用它。</p><p>&emsp;&emsp;尽管可通过分析控件的默认模板发现这些细节，但这些默认模板通常很复杂并且包含许多无关紧要的细节。以及一些无论如何都不会支持的绑定。幸运的是，在此有一个更好的起点：<a href="https://github.com/microsoft/WPF-Samples?tab=readme-ov-file">ControlTeamplateExample</a> 示例项目</p><div class="note info flat"><p>&emsp;&emsp;Microsoft关于控件样式和模板的文档 <a class="btn-beautify " href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/controls/control-styles-and-templates?view=netframeworkdesktop-4.8&redirectedfrom=MSDN"   title="控件样式和模板"><i class="far fa-hand-point-right"></i><span>控件样式和模板</span></a></p></div><h2 id="可视化状态"><a href="#可视化状态" class="headerlink" title="可视化状态"></a>可视化状态</h2><p>&emsp;&emsp;到目前为止，已经学习了最直接、最流行的编写控件模板的方法：<strong>混合使用元素、绑定表达式以及触发器</strong>。使用元素创建控件的整个可视化结构。绑定用于从控件类的属性提取信息并将其应用于元素内部。而触发器创建交互功能，当控件的状态发生变化时允许控件改变其外观。</p><p>&emsp;&emsp;这种模型的优点是极其强大和灵活。可执行希望的任何操作。在按钮示例中没有立即看到该优点，因为控件模板依赖于内置的属性，如<code>IsMouseOver</code>和<code>IsPressed</code>。但即使不能使用这些属性，也仍可编写改变自身1️以响应鼠标移动和按钮单击的控件模板。<strong>技巧是使用应用动画的事件触发器</strong>。例如，可添加事件触发器，通过启动改变边框背景颜色的动画来响应Border.MouseOver 事件。该动画甚至看起来不像是动画——如果将其持续时间设置为0秒，它将立即应用自身，就像正在使用的属性触发器。实际上，这正是许多专业模板示例使用的技术。</p><p>&emsp;&emsp;尽管它们的功能很强大，但基于触发器的模板有如下缺点：它们需要模板设计人员深入理解控件的工作方式，<em>例如在按钮示例中，模板设计人员需要知道IsMouseOver 和IsPressed 属性的存在，并且需要知道如何使用它们。而且这还不是唯一需要掌握的细节——例如，大多数控件需要根据鼠标移动、被禁用、获得焦点以及许多其他状态的改变，修改其可视化外观。当结合使用这些状态时，很难准确判断控件应当具有什么样的外观。此外，如果使用基于触发器的模型实现过渡效果，会显得很笨拙。例如，假设希望创建当将鼠标悬停在其上时闪烁的按钮。为获得专业级别的效果，可能需要两个动画——一个动画将按钮的状态从正常状态改变为鼠标悬停状态，另一个动画在此后立即应用不停闪烁的效果。使用基于触发器的模板管理所有这些细节可能是一个挑战。</em></p><p>&emsp;&emsp;<strong>Microsoft在WPF4中添加了称为可视化状态(<code>Visual State</code>)的新特性</strong>，该特性化解了这个挑战。使用具有特定名称的部件和可视化状态，控件能提供标准化的可视化协定。<strong>不需要理解整个控件，模板设计人员只需要理解可视化协定的规则。</strong>因此，设计简单的控件模板要容易得多——当以为以前从来没有用过的控件设计模板时更是如此。</p><p>&emsp;&emsp;<strong>控件可使用<code>TeamplatePart</code>特性指示控件模板应当包含具有特定名称的元素(或部件)，与此类似，可使用<code>TemplateVisualSTate</code>特性指示它们支持的可视化状态</strong>。例如，普通的按钮应当提供如下所示的一组可视化状态：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TemplateVIsualState(Name=<span class="string">&quot;Normal&quot;</span>,GroupName=<span class="string">&quot;CommonStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplateVIsualState(Name=<span class="string">&quot;MouseOver&quot;</span>,GroupName=<span class="string">&quot;CommonStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplateVIsualState(Name=<span class="string">&quot;Pressed&quot;</span>,GroupName=<span class="string">&quot;CommonStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplateVIsualState(Name=<span class="string">&quot;Disabled&quot;</span>,GroupName=<span class="string">&quot;CommonStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplateVIsualState(Name=<span class="string">&quot;Unfocused&quot;</span>,GroupName=<span class="string">&quot;FocusStates&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">TemplateVIsualState(Name=<span class="string">&quot;Focused&quot;</span>,GroupName=<span class="string">&quot;FocusStates&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Button</span> : <span class="title">ButtonBase</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>状态被放到各个组中。组是互相排斥的，这意味着控件具有每隔组中的一个状态</strong>。例如，上面显示的按钮具有两个状态组：<code>CommonStates</code>和<code>FocusStates</code>。在任意给定时刻，按钮有一个来自<code>CommonStates</code>组的状态并且有一个来自<code>FocusStates</code>组的状态。</p><p>&emsp;&emsp;<em>例如，如果使用 Tab键将焦点移到按钮上，按钮的状态将是 Normal(来自CommonStates 组)和 Focused(来自 FocusStates 组)。然后如果将鼠标移动到按钮上，其状态将是 MouseOver(来自CommonStates 组)和 Focused(来自 FocusStates 组)。不使用状态组,处理这种情况就会遇到麻烦要么必须使某些状态支配其他状态(这样处于 MouseOver 状态的按钮会丢失焦点指示器)，要么需要创建其他更多的状态(例如FocusedNormal、UnfocusedNormal、FocusedMouseOver 和UnfocusedMouseOyer等)。</em></p><p>&emsp;&emsp;至此，您可能已经体会到可视化状态模型的魅力。从模板来看，立即就能清楚地了解到控件模板需要解决6种不同的可能状态。还知道每种状态的名称是唯一重要的细节。<strong>不需要知道按钮类提供了哪些属性，也不需要知道控件内部的工作原理。</strong>最令人满意的是，如果使用Expression Blend，当为支持可视化状态的控件创建控件模板时可以得到增强了的设计时支持。Blend 将为您显示控件支持的具有特定名称的部件和可视化状态(因为在定义它们时使用了<code>TemplatePart</code> 和 <code>TemplateVisualState</code> 特性)，然后可以添加相应的元素和故事板。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;理解逻辑树和可视化树&quot;&gt;&lt;a href=&quot;#理解逻辑树和可视化树&quot; class=&quot;headerlink&quot; title=&quot;理解逻辑树和可视化树&quot;&gt;&lt;/a&gt;理解逻辑树和可视化树&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;下图显示了一个非常简单的窗口，该窗口包含两个按钮。为</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 16高级动画</title>
    <link href="http://bootree.cn/2024/07/16/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/16%E9%AB%98%E7%BA%A7%E5%8A%A8%E7%94%BB/"/>
    <id>http://bootree.cn/2024/07/16/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/16%E9%AB%98%E7%BA%A7%E5%8A%A8%E7%94%BB/</id>
    <published>2024-07-16T12:46:14.000Z</published>
    <updated>2024-07-22T12:48:42.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画类型回顾"><a href="#动画类型回顾" class="headerlink" title="动画类型回顾"></a>动画类型回顾</h2><p>&emsp;&emsp;创建动画面临的第一个挑战是为动画选择正确的属性。期望的结果(例如，在窗口中移动元素)于需要使用的属性(在这种情况下是Canvas.Left和Canvas.Top属性)之间的关系并不总是很直观。西面是一些知道原则：</p><ul><li>如果希望使用动画来使元素显示和消失，不要使用 Visibility 属性(该属性只能在完全可见和完全不可见之间进行切换)。应改<strong>用 Opacity 属性淡入或淡出元素</strong>。</li><li>如果希望动态改变元素的位置，可考虑使用Canvas面板。它提供了<strong>最直接的属性(Canvas.Left 及 Canvas.Top)，而且开销最小</strong>。此外，也可使用动画属性在其他布局容器中获得类似效果。例如，可通过使用 ThicknessAnimation 类动态改变 Margin 和 Padding 等属性，还可动态改变 Grid 控件中的 MinWidth 或 MinHeight 属性、一列或一行。</li><li><strong>动画最常用的属性是渲染变换。</strong>可使用变换移动或翻转元素(TranslateTransform)、旋转元素(RotateTransform)、缩放或扭曲元素(ScaleTransform)等。通过仔细地使用变换，有时可避免在动画中硬编码尺寸和位置。它们也绕过了WPF布局系统，比直接作用于元素大小或位置的其他方法速度更快。</li><li><strong>动态改变元素表面的较好方法是修改画刷属性</strong>。可使用ColorAnimation 改变颜色或其他动画对象来变换更复杂画刷的属性，如渐变中的偏移。</li></ul><h3 id="动态变换"><a href="#动态变换" class="headerlink" title="动态变换"></a>动态变换</h3><p>&emsp;&emsp;变换提供了自定义元素的最强大方式之一。当使用变换时，不只是改变元素的边界，而且会移动、翻转、扭曲、拉伸、放大、缩小或旋转元素的整个可视化外观。</p><p>&emsp;&emsp;<strong>每个元素都能以两种不同的方式使用变换:RenderTransform属性和 LayoutTransorm 属性</strong>。<code>RenderTransform 效率更高，因为是在布局之后应用变换并且用于变换最终的渲染输出</code>。<code>LayoutTransform在布局前应用,从而其他控件需要重新排列以适应变换</code>。改变 LayoutTransform属性会引发新的布局操作(除非在 Canvas面板上使用元素,在这种情况下RenderTransform和LayoutTransform 的效果相同)。</p><div class="note danger flat"><p>为在动画中使用变换，第一部是定义变换(<strong><code>动画可改变已经存在的变换，当不能创建新的变换</code></strong>)。例如，假设希望使按钮旋转，此时需要使用RotateTransform对象</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;HorizontalAlignment&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;Center&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;RenderTransformOrigin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;0.5,0.5&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;20,15&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.MouseEnter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;RenderTransform.Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">To</span>=<span class="string">&quot;360&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.MouseLeave&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;RenderTransform.Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;45&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button.RenderTransform</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RotateTransform</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态改变多个变换"><a href="#动态改变多个变换" class="headerlink" title="动态改变多个变换"></a>动态改变多个变换</h4><p>&emsp;&emsp;可很容易地组合使用变换。实际上这很容易——只需要使用<code>TransformGroup</code>对象设置<code>LayoutTransform</code>或<code>RenderTransform</code>属性即可。可根据需要在<code>TransformGroup</code>对象中嵌套任意多个变换。</p><div class="note info flat"><p>通过指定数字偏移值(0用于首先显示的RotateTransform对象，1要评语接下来显示的ScaleTransform对象)，动画可与这两个交换对象进行交互</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;HorizontalAlignment&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;Center&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;RenderTransformOrigin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;0.5,0.5&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;20,15&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.MouseEnter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;RenderTransform.Children[0].Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">To</span>=<span class="string">&quot;360&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;RenderTransform.Children[1].ScaleX&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">By</span>=<span class="string">&quot;1.2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.MouseLeave&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;RenderTransform.Children[0].Angle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;RenderTransform.Children[1].ScaleX&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">By</span>=<span class="string">&quot;0.8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.8&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;45&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button.RenderTransform</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RotateTransform</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScaleTransform</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态改变画刷"><a href="#动态改变画刷" class="headerlink" title="动态改变画刷"></a>动态改变画刷</h3><p>&emsp;&emsp;动态改变画刷是WPF动画中的另一种常用技术，和动态变换同样容易。同样，这种技术使用恰当的动画类型，深入到希望改变的特定子属性。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240717203218.png" width="30%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">PointAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Fill.GradientOrigin&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">From</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">To</span>=<span class="string">&quot;0.3,0.7&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ColorAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Fill.GradientStops[1].Color&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">To</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">AutoReverse</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Name</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;为实现这个动画，需要使用两种尚未分析过的动画类型。ColorAnimation 动画在两个颜色之间逐渐混合，创建一种微妙的颜色转移效果。PointAnimation动画可将点从一个位置移到另一个位置(本质上与使用独立的DoubleAnimation,通过线性插值同时修改X坐标和Y坐标是相同的)。可使用 PointAnimation 动画改变使用点构造的图形，或者就像这个示例中那样，改变径向渐变中心点的位置。</p><h3 id="动态改变像素着色器"><a href="#动态改变像素着色器" class="headerlink" title="动态改变像素着色器"></a>动态改变像素着色器</h3><p>&emsp;&emsp;像素着色器（可为任意元素应用位图风格效果的低级例程，如模糊、辉光以及弯曲效果），就自身而言，像素着色器是一些有趣并且偶尔有用的工具。当通过结合使用动画，它们可变得更通用。可使用它们设计吸引眼球的过渡效果。也可使用像素着色器创建给人留下深刻印象的用户交互效果。<strong>最好为像素着色器的属性应用动画，就像为其他内容应用动画一样容易</strong>。</p><p>&emsp;&emsp;下例包含一系列按钮，并且当用户将鼠标移动到其中某个按钮上时，关联并开始动画。区别在于这个示例中的动画不是旋转按钮，而将模糊半径减少至 0。结果是移动鼠标时，最近的控件骤然间轻快地变得清。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240718203401.png" width="30%"/><div class="note warning flat"><ul><li>EventTrigger.SourceName : 触发事件的元素</li><li>Storyboard.TargetName : 应用动画的元素</li></ul></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;UIElement.MouseEnter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(UIElement.Effect).(BlurEffect.Radius)&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.4&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;UIElement.MouseLeave&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimation</span>  <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">                                      <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(UIElement.Effect).(BlurEffect.Radius)&quot;</span></span></span><br><span class="line"><span class="tag">                                      <span class="attr">To</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                                      <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.4&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;A Button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BlurEffect</span> <span class="attr">Radius</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button.Effect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h2><blockquote><p>您到目前为止看到的所有动画都使用线性插值从起点移到终点。但如果需要创建具有多个分段的动画和不规则移动的动画，该怎么办呢?</p></blockquote><p>&emsp;&emsp;例如，可能希望创建一个动画，快速地将一个元素滑入到视图中，然后慢慢地将它移到正确位置。可通过创建两个连续的动画，并使用BeginTime 属性在第一个动画之后开始第二个动画来实现这种效果。然而，还有更简单的方法——可使用关键帧动画。</p><p>&emsp;&emsp;关键帧动画是由许多较短的段构成的动画。每段表示动画中的初始值、最终值或中间值。当运行动画时，它平滑地从一个值移到另一个值</p><h3 id="线性的关键帧动画"><a href="#线性的关键帧动画" class="headerlink" title="线性的关键帧动画"></a>线性的关键帧动画</h3><blockquote><p>例如,分析下面的将 RadialGradientBrush 画刷的中心点从一个位置移到另一个位置的 Point动画:</p></blockquote><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240718211155.png" width="30%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">PointAnimationUsingKeyFrames</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Fill.GradientOrigin&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:0&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.3,0.7&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:5&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.5,0.9&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:8&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.9,0.6&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:10&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.8,0.2&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:12&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:14&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">PointAnimationUsingKeyFrames</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Name</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;PointAnimationUsingKeyFrames 对象执行线性插值，从第一个关键帧平滑地移到第二个关键帧，就像 PointAnimation 对象对 From 和 To 值执行的操作一样。</p><div class="note info flat"><p>每个关键帧动画都使用各自的关键帧对象(如LinearPointKeyFrame)。对于大部分内容，这些类是相同的——它们包含用于存储目标值的 Value 属性和用于指示帧何时到达目标值的 KeyTime属性。唯一的区别在于 Value 属性的数据类型。在LinearPointKeyFrame 类中是 Point 类型，在DoubleKeyFrame 类中是double 类型</p></div><div class="note info flat"><p>使用关键帧动画不如使用多个连续的动画功能强大。最重要的区别是不能为每个关键帧应用不同的 <code>AccelerationRatio</code>和<code>DecelerationRatio</code> 值，而只能为整个动画应用单个值。</p></div><h3 id="离散的关键帧动画"><a href="#离散的关键帧动画" class="headerlink" title="离散的关键帧动画"></a>离散的关键帧动画</h3><p>&emsp;&emsp;线性的关键帧动画在关键帧值之间平滑地过渡，另一种选择是使用离散的关键帧。对于这种情况，不尽兴插值，<strong>当到达关键时间时，属性突然改变为新值</strong></p><p>&emsp;&emsp;线性关键帧类使用“<code>Linear + 数据类型 + KeyFrame</code>”的形式进行命名。离散关键帧类使用“<code>Discrete + 数据类型 + KeyFrame</code>”的形式命名。下面是<code>RadialGradientBursh</code>画刷示例的修改版本，在该修改版本中使用的是离散关键帧：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240718211155.png" width="30%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">PointAnimationUsingKeyFrames</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Fill.GradientOrigin&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:0&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.3,0.7&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:5&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.5,0.9&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:8&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.9,0.6&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:10&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.8,0.2&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:12&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:14&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">PointAnimationUsingKeyFrames</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Name</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当运行这个动画时，中心点会在适当的时间从一个位置跳到下一个位置。这是戏剧性的(但是不平稳的)效果。</p><p>&emsp;&emsp;所有关键帧动画类都支持离散关键帧，但只有一部分关键帧动画类支持线性关键帧。这完全取决于数据类型。支持线性关键帧的数据类型也支持线性插值，并提供了相应的<code>DataTypeAnimation</code>类，如<code>Point</code>、<code>Color</code>以及<code>double</code>。不支持线性插值的数据类型包括字符串(<code>StringAnimationUsingKeyFrames</code>)和对象(<code>ObjectAnimationUsingKeyFrames</code>)</p><div class="note warning flat"><p>可在同一个关键帧动画中组合使用两种类型的关键帧——线性关键帧和离散关键帧。</p></div><h3 id="缓动关键帧"><a href="#缓动关键帧" class="headerlink" title="缓动关键帧"></a>缓动关键帧</h3><p>&emsp;&emsp;您看到了如何使用缓动函数改进普通的动画。尽管关键帧动画被分割成多段,但每段仍使用普通的、令人厌烦的线性插值。<br>&emsp;&emsp;如果这不是您希望的结果，可使用动画缓动为每个关键帧添加加速或减速效果。然而，普通的线性插俏关键帧类和离散关键帧类不支持该特征。相反，需要使用缓动关键帧，如EasingDoubleKeyFrame、EasingColorKeyFrame或EasingPointKeyFrame。每个缓动关键帧类和对应的线性插值关键帧类的工作方式相同，但是额外提供了EasingFunction 属性。</p><p>&emsp;&emsp;下面的示例使用动画缓动为前5秒的关键帧动画应用加速效果:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">PointAnimationUsingKeyFrames</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Fill.GradientOrigin&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span></span></span><br><span class="line"><span class="tag">                                                  <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">LinearPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:0&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--缓动关键帧，也可为每帧加上关键帧--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">EasingPointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.3,0.7&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:5&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">EasingPointKeyFrame.EasingFunction</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">CircleEase</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">EasingPointKeyFrame.EasingFunction</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">EasingPointKeyFrame</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.5,0.9&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:8&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.9,0.6&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:10&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.8,0.2&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:12&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DiscretePointKeyFrame</span> <span class="attr">Value</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                                               <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:0:14&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">PointAnimationUsingKeyFrames</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Name</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样条关键帧动画"><a href="#样条关键帧动画" class="headerlink" title="样条关键帧动画"></a>样条关键帧动画</h3><p>&emsp;&emsp;还有一种关键帧类型:样条关键帧。每个支持线性关键帧的类也支持样条关键帧，它们使用“<code>Spline+数据类型+KeyFrame</code>”的形式进行命名。</p><p>&emsp;&emsp;<strong>与线性关键帧一样，样条关键帧使用插值从一个键值平滑地移到另一个键值</strong>。区别是每个样条关键帧都有 <code>KeySpline</code> 属性。可使用<strong>该属性定义能影响插值方式的三次贝塞尔曲线</strong>。尽管为了得到希望的效果这样做有些繁琐(至少还没有高级的设计工具可辅助您工作)，但这种技术能创建更加连贯的加速和减速以及更逼真的动画效果。</p><p>&emsp;&emsp;<strong>贝塞尔曲线由起点、终点以及两个控制点定义。对于关键样条,起点总是(0,0)，终点总是(1,1)。用户只需要提供两个控制点。创建的曲线描述了时间(X轴)和动画值(Y 轴)之间的关系。</strong></p><p>&emsp;&emsp;下面的示例通过对比 Canvas 面板上两个椭圆的移动，演示了一个关键样条动画。第一个椭圆使用DoubleAnimation动画缓慢匀速地在窗口上移动。第二个圆使用具有两个SplineDoubleKeyFrame 对象的 DoubleAnimationUsingKeyFrames 动画。两个椭圆同时到达目标位置(10 秒后)，但第二个椭圆在运动过程中会有明显的加速和减速，加速时会超过第一个椭圆,而减速时又会落后于第一个椭圆。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240718215513.png" width="40%" style="border:1px solid black;"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse1&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Left)&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">To</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimationUsingKeyFrames</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse2&quot;</span></span></span><br><span class="line"><span class="tag">                                                   <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Left)&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">SplineDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:5&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Value</span>=<span class="string">&quot;250&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">KeySpline</span>=<span class="string">&quot;0.25,0 0.5,0.7&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">SplineDoubleKeyFrame</span> <span class="attr">KeyTime</span>=<span class="string">&quot;0:0:10&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Value</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">KeySpline</span>=<span class="string">&quot;0.25,0.8 0.2,0.4&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">DoubleAnimationUsingKeyFrames</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Name</span>=<span class="string">&quot;ellipse1&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Width</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Height</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Canvas.Top</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Canvas.Left</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Name</span>=<span class="string">&quot;ellipse2&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Width</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Height</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Canvas.Top</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Canvas.Left</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最快的加速发生在5秒后不久，也就是当进入第二个 SplineDoubleKeyFrame 关键帧时。贝赛尔曲线的第一个控制点将较大的表示动画进度(0.8)的Y轴值与较小的表示时间的X轴值相匹配。所以，在再次减慢速度前，椭圆在一小段距离内会增加速度。</p><p>&emsp;&emsp;以图形方式显示了两条控制椭圆运动的曲线。为理解这些曲线，请记住它们从顶部到底部描述了动画过程。观察第一条曲线可以发现，它相对均地下降，在开始处有较短的暂停，在末尾处平缓下降。然而第二条曲线快速下降，运动了一大段距离，然后对于剩余的动画部分，曲线缓缓下降。</p><center>使用图形显示关键样条动画的过程</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240718220257.png" width="40%"/><h2 id="基于路径的动画"><a href="#基于路径的动画" class="headerlink" title="基于路径的动画"></a>基于路径的动画</h2><p>&emsp;&emsp;基于路径的动画使用<code>PathGeometry</code>对象设置属性。尽管原则上基于路径的动画也能用于修改任何适当数据类型的属性，但当动态改变与位置相关的属性时最有用。实际上，基于路径的动画类主要用于沿着一条路径移动可视化对象。</p><p>&emsp;&emsp;<code>PathGeometry</code>对象描述可包含直线、弧线以及曲线的图形，下图显示的示例具有一个<code>PathGeometry</code>对象，该对象包含两条弧线以及一条将最后定义的点连接到起点的直线段。这样就创建了一条闭合的路线，一个小的矢量图像以恒定不变的速度在这条路径上运动。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路径资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PathGeometry</span> <span class="attr">x:Key</span>=<span class="string">&quot;path&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PathFigure</span> <span class="attr">IsClosed</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ArcSegment</span> <span class="attr">Point</span>=<span class="string">&quot;100,200&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Size</span>=<span class="string">&quot;15,10&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">SweepDirection</span>=<span class="string">&quot;Clockwise&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ArcSegment</span> <span class="attr">Point</span>=<span class="string">&quot;400,50&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Size</span>=<span class="string">&quot;5,5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PathFigure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimationUsingPath</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;image&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Left)&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">PathGeometry</span>=<span class="string">&quot;&#123;StaticResource path&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Source</span>=<span class="string">&quot;X&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimationUsingPath</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;image&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Top)&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">PathGeometry</span>=<span class="string">&quot;&#123;StaticResource path&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">RepeatBehavior</span>=<span class="string">&quot;Forever&quot;</span></span></span><br><span class="line"><span class="tag">                                              <span class="attr">Source</span>=<span class="string">&quot;Y&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Data</span>=<span class="string">&quot;&#123;StaticResource path&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Canvas.Top</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Canvas.Left</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图形--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Image.Source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DrawingImage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DrawingImage.Drawing</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GeometryDrawing</span> <span class="attr">Brush</span>=<span class="string">&quot;LightSteelBlue&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">GeometryDrawing.Geometry</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;10,10&quot;</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">RadiusX</span>=<span class="string">&quot;9&quot;</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">RadiusY</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;10,10&quot;</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">RadiusX</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">RadiusY</span>=<span class="string">&quot;9&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">GeometryDrawing.Geometry</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">GeometryDrawing.Pen</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Pen</span> <span class="attr">Thickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Brush</span>=<span class="string">&quot;Black&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">GeometryDrawing.Pen</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">GeometryDrawing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">DrawingImage.Drawing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DrawingImage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Image.Source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;正如您可能看到的，当创建基于路径的动画时，不是提供开始值和结束值，而是通过PathGeometry 属性指定希望使用的 PathGeometry 对象。一些基于路径的动画类，如 PointAnimationUsingPath 类，可同时为目标属性应用X和Y组件。但 DoubleAnimationUsingPath 类不具备这一能力，因为它只能设置双精度值。结果，**<code>还需要将 Source 属性设置为X或Y，以指示是使用路径的 X坐标还是了坐标</code>**。</p><p>&emsp;&emsp;尽管基于路径的动画可使用包含贝塞尔曲线的路径，但它与上一节中介绍的关键样条动画区别很大。<strong>在关键样条动画中，贝塞尔曲线描述动画进度和时间之间的关系，从而可以创建变速动画。但在基于路径的动画中，由直线和曲线的集合构成的路径决定了将用于动画属性的值。</strong></p><div class="note warning flat"><p>基于路径的动画始终以恒定的速度运行。WPF 通过分析路径的总长度和指定的持续时间来确定速度。</p></div><h2 id="基于帧的动画"><a href="#基于帧的动画" class="headerlink" title="基于帧的动画"></a>基于帧的动画</h2><p>&emsp;&emsp;<strong>除基于属性的动画系统外，WPF提供了一种创建基于帧的动画的方法，这种方法只使用代码。需要做的全部工作是响应静态的 CompositionTarget.Rendering 事件，触发该事件是为了给每帧获取内容。</strong>这是一种非常低级的方法，除非使用标准的基于属性的动画模型不能满足需要(例如，构建简单的侧边滚动游戏、创建基于物理的动画或构建粒子效果模型(如火焰、雪花以及气泡))，否则不会希望使用这种方法。</p><p>&emsp;&emsp;<strong>构建基于帧的动画的基本技术很容易。只需要为静态的CompositionTarget.Rendering 事件关联事件处理程序。</strong>一旦关联事件处理程序，WPF就开始不断地调用这个事件处理程序(只要渲染代码的执行速度足够快，WPF每秒将调用60次)。在染事件处理程序中，您需要在窗口中相应地创建或调整元素。换句话说，<code>需要自行管理全部工作。当动画结束时，分离事件处理程序</code>。</p><p>&emsp;&emsp;下面的示例中，随机数量的圆从Canvas面板的顶部向底部下落。它们（根据随机生成的开始速度）以不同速度下降。当所有的圆到达底部时，动画结束。<br>每个下落的圆由 Ellipse 元素表示。使用自定义的EllipseInfo 类保存椭圆的引用，并跟踪对于物理模型而言十分重要的一些细节。在这个示例中，只有如下信息很重要--椭圆沿 X轴的移动速度(可很容易地扩展这个类，使其包含沿着Y轴运动的速度、额外的加速信息等)。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240720105039.png" width="50%" style="border:1px solid gray;"/><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">自定义类型</button><button type="button" class="tab " data-href="-2">XAML</button><button type="button" class="tab " data-href="-3">C#</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EllipseInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Ellipse Ellipse &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> VelocityY &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EllipseInfo</span>(<span class="params">Ellipse ellipse,<span class="built_in">double</span> velocityY</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ellipse = ellipse;</span><br><span class="line">        VelocityY = velocityY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;0 10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Margin</span>=<span class="string">&quot;10 0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Click</span>=<span class="string">&quot;cmdStart_Clicked&quot;</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Name</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;EllipseInfo&gt; ellipses = <span class="keyword">new</span> List&lt;EllipseInfo&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> accelerationY = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> minStartingSpeed = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> maxStartingSpeed = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> speedRatio = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> minEllipses = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> maxEllipses = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> ellipseRadius = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> rendering = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdStart_Clicked</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!rendering)</span><br><span class="line">        &#123;</span><br><span class="line">            ellipses.Clear();</span><br><span class="line">            canvas.Children.Clear();</span><br><span class="line"></span><br><span class="line">            CompositionTarget.Rendering += RenderFrame;</span><br><span class="line">            rendering = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RenderFrame</span>(<span class="params"><span class="built_in">object</span>? sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ellipses.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> halfCanvasWidth = (<span class="built_in">int</span>)canvas.ActualWidth / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="built_in">int</span> ellipseCount = rand.Next(minEllipses, maxEllipses + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ellipseCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Ellipse ellipse = <span class="keyword">new</span> Ellipse();</span><br><span class="line">                ellipse.Fill = Brushes.LimeGreen;</span><br><span class="line">                ellipse.Width = ellipseRadius;</span><br><span class="line">                ellipse.Height = ellipseRadius;</span><br><span class="line"></span><br><span class="line">                Canvas.SetLeft(ellipse, halfCanvasWidth + rand.Next(-halfCanvasWidth, halfCanvasWidth));</span><br><span class="line">                Canvas.SetTop(ellipse, <span class="number">0</span>);</span><br><span class="line">                canvas.Children.Add(ellipse);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Track the ellipse</span></span><br><span class="line">                EllipseInfo info = <span class="keyword">new</span> EllipseInfo(ellipse, speedRatio * rand.Next(minStartingSpeed, maxStartingSpeed));</span><br><span class="line">                ellipses.Add(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = ellipses.Count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                EllipseInfo info = ellipses[i];</span><br><span class="line">                <span class="built_in">double</span> top = Canvas.GetTop(info.Ellipse);</span><br><span class="line">                Canvas.SetTop(info.Ellipse, top + <span class="number">1</span> * info.VelocityY);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (top &gt;= (canvas.ActualHeight - ellipseRadius * <span class="number">2</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// This circle has reached the bottom.</span></span><br><span class="line">                    <span class="comment">// Stop animating it.</span></span><br><span class="line">                    ellipses.Remove(info);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Increase the velocity</span></span><br><span class="line">                    info.VelocityY += accelerationY;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ellipses.Count == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                CompositionTarget.Rendering -= RenderFrame;</span><br><span class="line">                rendering = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;在这个示例中，每个下落的圆由 Ellipse 元素表示。使用自定义的Ellipselnfo 类保存椭圆的引用，并跟踪对于物理模型而言十分重要的一些细节。在这个示例中，只有如下信息很重要--椭圆沿 X轴的移动速度(可很容易地扩展这个类，使其包含沿着Y轴运动的速度、额外的加速信息等)。</p><p>&emsp;&emsp;<strong>当构建基于帧的动画时需要注意如下问题:它们不依赖于时间</strong>。换句话说，动画可能在能好的计算机上运动得更快，因为帧率会增加，会更频繁地调用CompositionTarget.Renderin事件。为补偿这种效果，<code>需要编写考虑当前时间的代码</code>。</p><h2 id="使用代码创建故事板"><a href="#使用代码创建故事板" class="headerlink" title="使用代码创建故事板"></a>使用代码创建故事板</h2><p>&emsp;&emsp;当需要处理多个动画并且预先不知道将有多少个动画或不知道如何配置动画时，就会用到代码创建动画。如果希望在不同的窗口中使用相同的动画，或者只是希望从标记中灵活地分离出所有与动画相关的细节以方便重用，也会遇到这种情况。</p><p>&emsp;&emsp;通过编写代码创建、配置和启动故事板并不难。只需要创建动画和故事板对象，并将动画添加到故事板中，然后启动故事板即可。在动画结束后可响应 Storyboard.Completed 事件以执行所有清理工作。</p><p>&emsp;&emsp;在接下来的示例中，您将看到如何创建实现一个投炸弹💣的游戏。在该例中，投下的一系列炸弹的速度始终不断增加。玩家必须单击每个炸弹以逐一拆除。当达到设置的极限时——默认情况下是落下5个炸弹-游戏结束</p><p>&emsp;&emsp;在这个示例中，投下的每颗炸弹都有自己的包含两个动画的故事板。第一个动画使炸弹下落(通过为 Canvas.Top 属性应用动画)，而第二个动画稍微前后旋转炸弹，使其具有逼真的摆动效果。如果用户单击一颗下落的炸弹，这些动画就会停止，并且会发生另外两个动画，使炸弹倾斜，悄然间离开 Canvas 面板的侧边。最后，每次结束一个动画，应用程序都会进行检查，以查看该动画是表示炸弹被拆除了还是落下了，并相应地更新计数。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240722193356.png" width="60%"/><h3 id="创建Bomb控件"><a href="#创建Bomb控件" class="headerlink" title="创建Bomb控件"></a>创建Bomb控件</h3><p>&emsp;&emsp;用于炸弹的标记包含 RotateTransfomm 变换，动画代码可使用该变换为下落中的炸弹应用摆动效果。尽管可通过编写代码创建并添加这个 RotateTransfom 变换，但在炸弹的 XAML 文件中定义该变换更加合理:</p><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">Bomb.xaml</button><button type="button" class="tab " data-href="note-2">Bomb.xaml.cs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.Controls.Bomb&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp.Controls&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UserControl.RenderTransform</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">CenterX</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">CenterY</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ScaleTransform</span> <span class="attr">ScaleX</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">ScaleY</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TransformGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">UserControl.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--The Path elemebts that draw the bomb graphic are defined here--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;💣&quot;</span> <span class="attr">FontSize</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Bomb</span> : <span class="title">UserControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bomb</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 跟踪炸弹当前是否正在下落</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsFalling &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="创建主窗口"><a href="#创建主窗口" class="headerlink" title="创建主窗口"></a>创建主窗口</h3><p>&emsp;&emsp;为了投弹，应用程序使用<code>DispatcherTimer</code>，这是一种能很好地用于WPF用户界面的计时器，因为它在用户界面线程触发事件。选择时间间隔，伺候<code>DispatcherTimer</code>会在该时间间隔内引发周期性的<code>Tick</code>事件。</p><blockquote><p>在投弹游戏中，计时器最初被设置为每隔1.3秒引发一次。当用户单击按钮开始游戏时，计时器随之启动，每次引发计时器事件时，代码创建一个新的 Bomb 对象并设置其在 Canvas 面板上的位置。炸弹放在 Canvas 面板的顶部边缘，使其可以无缝地落入视图。炸弹的水平位置是随机的，位于Canvas 面板的左侧和右侧之间:</p></blockquote><p>&emsp;&emsp;随着游戏的进行，游戏难度加大。更频繁地引发计时器事件，从而炸弹之间的距离越来越近，并且减少了下落时间。为实现这些变化，每经过一定的时间间隔就调整一次计时器代码。默认情况下，BombDropper 每隔 15 秒调整一次。下面是控制调整的字段</p><blockquote><p>拦截炸弹</p></blockquote><p>&emsp;&emsp;用户通过在炸弹到达 Canvas 面板底部之前单击炸弹来进行拆除。因为每个炸弹都是单独的Bomb 用户控件实例，所以拦截鼠标单击很容易--需要做的全部工作就是处理MouseLeft-ButtonDown 事件，当单击炸弹的任意部分时会引发该事件(但如果单击背景上的某个地方，例如炸弹圈边缘的周围，不会引发该事件)。</p><p>&emsp;&emsp;当单击炸弹时，第一步是获取适当的炸弹对象，并设置其 IsFalling 属性以指示不再下降(在处理动画完成的事件处理程序中会使用IsFalling 属性)。</p><p>&emsp;&emsp;单击炸弹后，使用另一个动画集将炸弹移出屏幕，将炸弹抛向上方、抛向左侧或右侧(取决于距离哪一侧最近)。尽管可创建全新的故事板以实现该效果，但BombDropper 游戏清空用于炸弹的当前故事板并为其添加新动画。<strong>处理完毕后，启动新的故事板</strong>:</p><blockquote><p>统计炸弹和清理工作</p></blockquote><p>&emsp;&emsp;为下落的炸弹应用动画以及为拆除的炸弹应用动画。可使用不同的事件处理程序处理这些故事板的结束事件，但为使代码保持简单，BombDropper 只使用一个事件处理程序。通过检査 Bomb.IsFalling属性来区分爆炸的炸弹和拆除的炸弹。</p><div class="tabs" id="mainwindow"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="mainwindow-1">MainWindow.xaml</button><button type="button" class="tab " data-href="mainwindow-2">MainWindow.xaml.cs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="mainwindow-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;0.6*&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;0.4*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderBrush</span>=<span class="string">&quot;SteelBlue&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">x:Name</span>=<span class="string">&quot;canvasBackground&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">SizeChanged</span>=<span class="string">&quot;canvasBackground_SizeChanged&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">MinWidth</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Canvas.Background</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;AliceBlue&quot;</span></span></span><br><span class="line"><span class="tag">                                          <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                                          <span class="attr">Offset</span>=<span class="string">&quot;0.7&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Canvas.Background</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderBrush</span>=<span class="string">&quot;SteelBlue&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border.Background</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;1,0.7&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Center</span>=<span class="string">&quot;1,0.7&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Orange&quot;</span></span></span><br><span class="line"><span class="tag">                                  <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                                  <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Border.Background</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontFamily</span>=<span class="string">&quot;Impact&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontSize</span>=<span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">Foreground</span>=<span class="string">&quot;LightSteelBlue&quot;</span>&gt;</span>Bomb Dropper<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">x:Name</span>=<span class="string">&quot;lblRate&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">Margin</span>=<span class="string">&quot;0 30 0 0&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">TextWrapping</span>=<span class="string">&quot;Wrap&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontFamily</span>=<span class="string">&quot;Georgia&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontSize</span>=<span class="string">&quot;14&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">x:Name</span>=<span class="string">&quot;lblSpeed&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">Margin</span>=<span class="string">&quot;0 30&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">TextWrapping</span>=<span class="string">&quot;Wrap&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontFamily</span>=<span class="string">&quot;Georgia&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontSize</span>=<span class="string">&quot;14&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">x:Name</span>=<span class="string">&quot;lblStatus&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">TextWrapping</span>=<span class="string">&quot;Wrap&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontFamily</span>=<span class="string">&quot;Georgia&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                    No bombs have dropped.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdStart&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Margin</span>=<span class="string">&quot;0 30&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Content</span>=<span class="string">&quot;Start Game&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Click</span>=<span class="string">&quot;cmdStart_Click&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="mainwindow-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> DispatcherTimer bombTimer = <span class="keyword">new</span> DispatcherTimer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"></span><br><span class="line">        bombTimer.Tick += BobmTimer_Tick;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep track of how many bombs are dropped and stopped</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> droppedCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> savedCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initially, bombs fall every 1.3 seconds, and hit the ground after 3.5 seconds.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> initialSecondsBetweenBombs = <span class="number">1.3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> initialSecondsToFall = <span class="number">3.5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> secondsBetweenBombs;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> secondsToFall;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make it possible to look up a storyboard based on a bomb.</span></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;Bomb, Storyboard&gt; bombs = <span class="keyword">new</span> Dictionary&lt;Bomb, Storyboard&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BobmTimer_Tick</span>(<span class="params"><span class="built_in">object</span>? sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create the bomb</span></span><br><span class="line">        Bomb bomb = <span class="keyword">new</span> Bomb();</span><br><span class="line">        bomb.IsFalling = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Position the bomb.</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        bomb.SetValue(Canvas.LeftProperty, (<span class="built_in">double</span>)(random.Next(<span class="number">0</span>, (<span class="built_in">int</span>)(canvasBackground.ActualWidth - <span class="number">50</span>))));</span><br><span class="line">        bomb.SetValue(Canvas.TopProperty, <span class="number">-100.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the bomb to the Canvas.</span></span><br><span class="line">        canvasBackground.Children.Add(bomb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Attach mouse click event (for defusing the bomb).</span></span><br><span class="line">        bomb.MouseLeftButtonDown += Bomb_MouseLeftButtonDown;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creatye the animation for the falling bomb.</span></span><br><span class="line">        Storyboard storyboard = <span class="keyword">new</span> Storyboard();</span><br><span class="line">        DoubleAnimation fallAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">        fallAnimation.To = canvasBackground.ActualHeight;</span><br><span class="line">        fallAnimation.Duration = TimeSpan.FromSeconds(secondsToFall);</span><br><span class="line"></span><br><span class="line">        Storyboard.SetTarget(fallAnimation, bomb);</span><br><span class="line">        Storyboard.SetTargetProperty(fallAnimation, <span class="keyword">new</span> PropertyPath(<span class="string">&quot;(Canvas.Top)&quot;</span>));</span><br><span class="line">        storyboard.Children.Add(fallAnimation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the animation for the bomb &quot;wiggle&quot;</span></span><br><span class="line">        DoubleAnimation wiggleAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">        wiggleAnimation.To = <span class="number">30</span>;</span><br><span class="line">        wiggleAnimation.Duration = TimeSpan.FromSeconds(<span class="number">0.2</span>);</span><br><span class="line">        wiggleAnimation.RepeatBehavior = RepeatBehavior.Forever;</span><br><span class="line">        wiggleAnimation.AutoReverse = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        Storyboard.SetTarget(wiggleAnimation, ((TransformGroup)bomb.RenderTransform).Children[<span class="number">0</span>]);</span><br><span class="line">        Storyboard.SetTargetProperty(wiggleAnimation, <span class="keyword">new</span> PropertyPath(<span class="string">&quot;Angle&quot;</span>));</span><br><span class="line">        storyboard.Children.Add(wiggleAnimation);</span><br><span class="line"></span><br><span class="line">        bombs.Add(bomb, storyboard);</span><br><span class="line"></span><br><span class="line">        storyboard.Duration = fallAnimation.Duration;</span><br><span class="line">        storyboard.Completed += Storyboard_Completed;</span><br><span class="line">        storyboard.Begin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Perform and &quot;adjustment&quot; when needed.</span></span><br><span class="line">        <span class="keyword">if</span> ((DateTime.Now.Subtract(lastAdjustmentTime).TotalMinutes &gt; secondsBetweenAdjustments))</span><br><span class="line">        &#123;</span><br><span class="line">            lastAdjustmentTime = DateTime.Now;</span><br><span class="line"></span><br><span class="line">            secondsBetweenBombs -= secondsBetweenBombsRaduection;</span><br><span class="line">            secondsToFall -= secondsToFallReduction;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// (Technically, you should check for 0 or negative values)</span></span><br><span class="line">            <span class="comment">// However, in paratice these won&#x27;t occur because the game will always end first.)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set the timer to drop the next bomb at the appropriate time.</span></span><br><span class="line">            bombTimer.Interval = TimeSpan.FromSeconds(secondsBetweenBombs);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the status message.</span></span><br><span class="line">            lblRate.Text = String.Format(<span class="string">&quot;A bomb is released every &#123;0&#125; seconds.&quot;</span>, secondsBetweenBombs);</span><br><span class="line">            lblSpeed.Text = String.Format(<span class="string">&quot;Each bomb takes &#123;0&#125; seconds to faill.&quot;</span>, secondsToFall);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随着游戏的进行，游戏难度加到。很频繁地引发计时器时间，从而炸弹之间的距离越来越近，并且减少了下落时间</span></span><br><span class="line">    <span class="comment">// Perform an adjustment every 15 seconds.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> secondsBetweenAdjustments = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> DateTime lastAdjustmentTime = DateTime.MinValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// After every adjustment, shave 0.1 seconds off both.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> secondsBetweenBombsRaduection = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> secondsToFallReduction = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// End the game when 5 bombs have fallen.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> maxDropped = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Storyboard_Completed</span>(<span class="params"><span class="built_in">object</span>? sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ClockGroup clockGroup = (ClockGroup)sender;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the first animation in the storyboard, and use it to find the bomb that&#x27;s being animated.</span></span><br><span class="line">        DoubleAnimation completedAnimation = (DoubleAnimation)clockGroup.Children[<span class="number">0</span>].Timeline;</span><br><span class="line">        Bomb completedBomb = (Bomb)Storyboard.GetTarget(completedAnimation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine if a bomb fell or flew off the Canvas after begin clicked.</span></span><br><span class="line">        <span class="keyword">if</span> (completedBomb.IsFalling)</span><br><span class="line">        &#123;</span><br><span class="line">            droppedCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            savedCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the display</span></span><br><span class="line">        lblStatus.Text = String.Format(<span class="string">&quot;You have dropped &#123;0&#125; bombs and saved &#123;1&#125;.&quot;</span>, droppedCount, savedCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if it&#x27;s game over.</span></span><br><span class="line">        <span class="keyword">if</span> (droppedCount &gt;= maxDropped)</span><br><span class="line">        &#123;</span><br><span class="line">            bombTimer.Stop();</span><br><span class="line">            lblStatus.Text += <span class="string">&quot;\r\n\r\nGame over.&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Find all the storyboards that are underway</span></span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;Bomb, Storyboard&gt; item <span class="keyword">in</span> bombs)</span><br><span class="line">            &#123;</span><br><span class="line">                Storyboard storyboard = item.Value;</span><br><span class="line">                Bomb bomb = item.Key;</span><br><span class="line"></span><br><span class="line">                storyboard.Stop();</span><br><span class="line">                canvasBackground.Children.Remove(bomb);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Empty the tracking collection.</span></span><br><span class="line">            bombs.Clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Allow the user to start a new game.</span></span><br><span class="line">            cmdStart.IsEnabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Clean up just this bomb, and let the game continue.</span></span><br><span class="line">            Storyboard stopryboard = (Storyboard)clockGroup.Timeline;</span><br><span class="line">            stopryboard.Stop();</span><br><span class="line"></span><br><span class="line">            bombs.Remove(completedBomb);</span><br><span class="line">            canvasBackground.Children.Remove(completedBomb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bomb_MouseLeftButtonDown</span>(<span class="params"><span class="built_in">object</span> sender, MouseButtonEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Get the bomb.</span></span><br><span class="line">        Bomb bomb = sender <span class="keyword">as</span> Bomb;</span><br><span class="line">        bomb.IsFalling = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Record the bomb&#x27;s current (animated) position.</span></span><br><span class="line">        <span class="built_in">double</span> curentTop = Canvas.GetTop(bomb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stop the bomb from falling.</span></span><br><span class="line">        Storyboard storyboard = bombs[bomb];</span><br><span class="line">        storyboard.Stop();</span><br><span class="line"></span><br><span class="line">        storyboard.Children.Clear();</span><br><span class="line"></span><br><span class="line">        DoubleAnimation riseAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">        riseAnimation.From = curentTop;</span><br><span class="line">        riseAnimation.To = <span class="number">0</span>;</span><br><span class="line">        riseAnimation.Duration = TimeSpan.FromSeconds(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Storyboard.SetTarget(riseAnimation, bomb);</span><br><span class="line">        Storyboard.SetTargetProperty(riseAnimation, <span class="keyword">new</span> PropertyPath(<span class="string">&quot;(Canvas.Top)&quot;</span>));</span><br><span class="line">        storyboard.Children.Add(riseAnimation);</span><br><span class="line"></span><br><span class="line">        DoubleAnimation slideAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">        <span class="built_in">double</span> currentLeft = Canvas.GetLeft(bomb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Throw the bomb off the closest side.</span></span><br><span class="line">        <span class="keyword">if</span> (currentLeft &lt; canvasBackground.ActualWidth / <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slideAnimation.To = <span class="number">-100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            slideAnimation.To = canvasBackground.ActualWidth + <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slideAnimation.Duration = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br><span class="line">        Storyboard.SetTarget(slideAnimation, bomb);</span><br><span class="line">        Storyboard.SetTargetProperty(slideAnimation, <span class="keyword">new</span> PropertyPath(<span class="string">&quot;(Canvas.Left)&quot;</span>));</span><br><span class="line">        storyboard.Children.Add(slideAnimation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the new animation.</span></span><br><span class="line">        storyboard.Duration = slideAnimation.Duration;</span><br><span class="line">        storyboard.Begin();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">canvasBackground_SizeChanged</span>(<span class="params"><span class="built_in">object</span> sender, SizeChangedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Set the clipping region to match the current display region of the Canvas.</span></span><br><span class="line">        RectangleGeometry rect = <span class="keyword">new</span> RectangleGeometry();</span><br><span class="line">        rect.Rect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, canvasBackground.ActualWidth, canvasBackground.ActualHeight);</span><br><span class="line">        canvasBackground.Clip = rect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdStart_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cmdStart.IsEnabled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset the game</span></span><br><span class="line">        droppedCount = <span class="number">0</span>;</span><br><span class="line">        savedCount = <span class="number">0</span>;</span><br><span class="line">        secondsBetweenBombs = initialSecondsBetweenBombs;</span><br><span class="line">        secondsToFall = initialSecondsToFall;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the bomb-dropping timer.</span></span><br><span class="line">        bombTimer.Interval = TimeSpan.FromSeconds(secondsBetweenBombs);</span><br><span class="line">        bombTimer.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;现在已经完成了 BombDropper 游戏的代码。然而，可进行诸多改进。例如，可执行如下改进:</p><ul><li><strong>为炸弹添加爆炸动画效果</strong>。这种效果使炸弹周围的火焰闪耀或发射在 Canvas 面板上四处飞溅的炸弹碎片。</li><li><strong>为背景添加动画</strong>。此改进易于实现，可添加精彩的可视化效果。例如，可创建上移的线性渐变，产生移动感，或创建在两种颜色之间过渡的效果。</li><li><strong>添加深度</strong>。实现这一改进比您想象得要容易。基本技术是为炸弹设置不同尺寸。更大的炸弹应当具有更高的 ZIndex 值，确保大炸弹重叠在小炸弹之上，而且应为大炸弹设置更短的动画时间，从而确保它们下落得更快。还可使炸弹半透明，从而当一个炸弹下落时仍能看到它背后的其他炸弹。</li><li><strong>添加音效</strong>。可使用准确计时的声音效果以强调炸弹爆炸或拆除。</li><li><strong>使用动画缓动</strong>。如果希望炸弹在下落、弹离屏幕时加速，或更自然地摆动，可为此处使用的动画添加缓动函数。并且,正如您所期望的,可使用代码构造缓动函数,就像在 XAML中构造缓动函数一样容易。</li><li><strong>调整参数</strong>。可为修改行为提供更多细节(例如，当游戏运行时设置如何修改炸弹运动时间、轨迹以及投放频率的变量)，还可插入更多随机因素(例如，使拆除的炸弹以稍有不同的方式弹离 Canvas 面板)。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;动画类型回顾&quot;&gt;&lt;a href=&quot;#动画类型回顾&quot; class=&quot;headerlink&quot; title=&quot;动画类型回顾&quot;&gt;&lt;/a&gt;动画类型回顾&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;创建动画面临的第一个挑战是为动画选择正确的属性。期望的结果(例如，在窗口中移动元素)</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 15动画基础</title>
    <link href="http://bootree.cn/2024/07/13/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/15%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/"/>
    <id>http://bootree.cn/2024/07/13/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/15%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/</id>
    <published>2024-07-13T03:36:42.000Z</published>
    <updated>2024-07-14T10:25:50.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解WPF动画"><a href="#理解WPF动画" class="headerlink" title="理解WPF动画"></a>理解WPF动画</h2><p>&emsp;&emsp;在许多用户框架中(特别是 WPF 之前的框架，如 Windows窗体和 MFC)，开发人员必须从头构建自己的动画系统。最常用的技术是结合使用计时器和一些自定义的绘图逻辑。WPF通过自带的基于属性的动画系统，改变了这种状况。接下来的两节将描述这两者之间的区别。</p><h3 id="基于时间的动画"><a href="#基于时间的动画" class="headerlink" title="基于时间的动画"></a>基于时间的动画</h3><p>&emsp;&emsp;加入需要旋转Windows窗体应用程序中的About对话框中的一块文本。下面是构建解决方案的传统的方法：</p><ol><li>创建周期性触发的计时器（例如，每隔50毫秒触发一次）</li><li>当触发计时器时，使用事件处理程序计算一些与动画相关的细节，如新的旋转角度。然后使窗口的一部分或者整个窗口无效</li><li>不久后，Windows将要求窗口重新绘制自身，触发自定义的绘图代码</li><li>在自定义的绘图代码中，渲染旋转后的文本</li></ol><blockquote><p>尽管这个基于计时器的解决方案不难实现，但将它集成到普通的应用程序窗口中却非常麻烦。下面列出这种解决方案存在的一些问题：</p></blockquote><ul><li><strong>绘制像素而不是控件</strong>。为旋转Windows窗体中的文本，需要低级的GDI+绘图支持。GDI+易于使用，但却不能与普通的窗口元素（如按钮、文本框和标签等）很好地相互协调。所以，需要将动画内容和控件相互分离，并且不能在动画中包含任何用户交互元素。您将无法旋转按钮</li><li><strong>假定单一动画</strong>。如果决定希望同时运行两个动画，就需要重写编写所有动画代码—并且变得更复杂。在这方面WPF显得更加强大，它可以构建比单一简单动画更复杂的动画。</li><li><strong>动画帧率是固定的</strong>。计时器设置完全决定了帧率。如果改变时间间隔，可能需要修改动画代码（取决于执行计算的方式）。而且，选择的固定帧率对于特定的计算机显卡硬件不一定理想</li><li><strong>复杂动画需要指数增长的更复杂的代码</strong>。旋转文本的示例非常简单，但如果沿着一条路径移动非常小的矢量图画，就困难得多了。在WPF中，甚至是复杂的动画也能够在XAML中定义（而且可以使用第三方设计工具生成动画）</li></ul><div class="note warning flat"><p>基于计时器的动画仍存在一些缺点：单子代码不是很灵活，对于复杂的效果会变得杂乱无章，并且不能得到最佳性能</p></div><h3 id="基于属性的动画"><a href="#基于属性的动画" class="headerlink" title="基于属性的动画"></a>基于属性的动画</h3><p>&emsp;&emsp;WPF提供了一个更高级的模型，通过该模型可以只关注动画的定义，而不必考虑它们的渲染方式。这个模型基于依赖项属性基础架构。本质上，WPF动画只不过是在一段时间间隔内修改依赖项属性值的一种方式。</p><div class="note warning flat"><p>只能为依赖项属性应用动画，因为只有依赖项属性使用动态的属性识别系统，而该系统将动画考虑在内</p></div><h2 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h2><p>&emsp;&emsp;WPF动画的第一条规则——每个动画依赖于一个依赖项属性。然而，还有另一个限制。为了实现属性的动态化（换句话说，使用基于时间的方式改变属性的值），需要有支持相应数据类型的动画类。</p><p>&emsp;&emsp;该要求不像WPF动画的第一条规则那么绝对，第一条规则将动画局限于依赖项属性。这是因为对于没有相应动画类的依赖项属性，为了为该属性应用动画，可以针对相应的数据类型创建自己的动画类。但您将发现，<code>System.Windows.Media.Animation</code>名称空间已经为希望使用的大多数数据类型提供动画类</p><p>&emsp;&emsp;引用类型通常不能应用动画，但它们的子属性可以。例如，所有内容控件都支持Background属性，从而可以设置Brush对象用于绘制北京。使用动画成一个画刷切换到另一个画刷的效率通常不高。但可以使用动感改变画刷的属性。例如，可改变SolidColorBrush画刷的Color属性（使用<code>ColorAnimation</code>）或改变LinearGradientBrush画刷中的GradientStop对象的Offset属性（使用<code>DoubleAnimation</code>类）。这扩展了WPF动画的应用范围，允许用户为元素外观的特定方面应用动画</p><h3 id="Animation类"><a href="#Animation类" class="headerlink" title="Animation类"></a>Animation类</h3><p>&emsp;&emsp;根据到目前为止提到的动画类型——DoubleAnimation 和 ColorAnimation——您可能会认为所有动画类都以“类型名+Animation”方式命名。这种观点很接近实际情况，但不是非常准确。</p><p>&emsp;&emsp;实际上有两种类型的动画——在开始值和结束值之间以逐步增加的方式(被称为线性插值过程)改变属性的动画，以及从一个值突然变成另一个值的动画。DoubleAnimation和ColorAnimation 属于第一种动画类型，它们使用插值平滑地改变值。然而，当改变特定的数据类型时，如 String 和引用类型的对象，插值是没有意义的。不是使用插值，这些数据类型使用一种称为“关键帧动画”的技术在特定时刻从一个值突然改变到另一个值。所有关键帧动画类都使用“类型名+AnimationUsingKeyFrames”的形式进行命名，比如 <code>StringAnimationUsingKeyFrames</code>和<code>ObiectAnimationUsingKeyFrames</code>.</p><div class="note info flat"><p>所有具有（使用插值的）常规动画类的数据类型（如DoubleAnimation），也都有相应的用于关键帧动画的动画类型（如DoubleAnimationUsingKeyFrames）</p></div><p>&emsp;&emsp;实际上，还有一种动画类型。这种类型称为基于路径的动画，而且它们比使用插值或关键帧的动画更加专业。基于路径的动画修改数值使其符合由PathGeometry对象描述的形状，并且主要用于沿路径移动元素。基于路径的动画类使用“类型名+AnimationUsingPath”的形式进行命名，如DoubleAnimationUsingPath 和PointAnimationUsingPath.</p><div class="note info flat"><p>尽管目前WPF可为动画使用三种方法（<code>线性插值</code>、<code>关键帧</code>以及<code>路径</code>），但完全也可以创建更多的使用完全不同的方式来修改值的动画类。唯一要求是自定义的动画类必须根据时间修改值</p></div><p>&emsp;&emsp;总之，在<code>System.Windows.Media.Animation</code>名称空间中间发现以下内容：</p><ul><li>17个类型<code>“类型名+Animation”类</code>，这些类使用插值</li><li>22个<code>“类型名+AnimationUsingKeyFrames”类</code>，这些类使用关键帧动画</li><li>3个<code>“类型名+AnimationUsingPath”类</code>，这些类使用基于路径的动画</li></ul><p>&emsp;&emsp;所有这些动画类都继承自抽象的<code>“类型名+AnimationBase”类</code>，这些基类实现了一些基本功能，从而为创建自定义动画类提供了快捷方式。如果某个数据类型支持多种类型的动画，那么所有的动画类都继承自抽象的动画基类。例如，DoubleAnimation和DoubleAnimationUsingKey.Frames都继承自DoubleAnimationBase基类</p><p>&emsp;&emsp;可通过查看这42个类快速决定哪些数据类型为动画提供了本地支持。下面是这42可类的完整列表：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>BooleanAnimationUsingKeyFrames</td><td>ByteAnimation</td></tr><tr><td>ByteAnimationUsingKeyFrames</td><td>CharAnimationUsingKeyFrames</td></tr><tr><td>ColorAnimation</td><td>ColorAnimationUsingKeyFrames</td></tr><tr><td>DecimalAnimation</td><td>DecimalAnimationUsingKeyFrames</td></tr><tr><td>DoubleAnimation</td><td>DoubleAnimationUsingKeyFrames</td></tr><tr><td>DoubleAnimationUsingPath</td><td>Int16Animation</td></tr><tr><td>Int16AnimationUsingKeyFrames</td><td>Int32ANimation</td></tr><tr><td>Int32AnimationUsingKeyFrames</td><td>Int64Animation</td></tr><tr><td>Int64AnimationUsingKeyFrames</td><td>MatrixANimationUsingKeyFrames</td></tr><tr><td>MaterixAnimationUsingPath</td><td>ObjectAnimationUsingKeyFrames</td></tr><tr><td>PointAnimation</td><td>PointAnimationUsingKeyFrames</td></tr><tr><td>PointAnimationUsingPath</td><td>Point3DAnimation</td></tr><tr><td>Point3DAnimationUsingKeyFrames</td><td>QuarternionAnimation</td></tr><tr><td>QuarternionAnimationUsingKeyFrames</td><td>RectAnimation</td></tr><tr><td>RectAnimationUsingKeyFrames</td><td>RectAnimation</td></tr><tr><td>RectAnimationUsingKeyFrames</td><td>Rotaion3DAnimation</td></tr><tr><td>Rotation3DAnimationUsingKeyFreams</td><td>SingleAnimation</td></tr><tr><td>SingleAnimationUsingKeyFrames</td><td>SizeAnimation</td></tr><tr><td>SizeANimationUsingKeyFrames</td><td>StringAnimationUsingKeyFrames</td></tr><tr><td>ThicknessAnimation</td><td>ThicknessAnimationUsingKeyFrames</td></tr><tr><td>VectorAnimation</td><td>VectorANimationUsingKeyFrames</td></tr><tr><td>Vector3DANimation</td><td>Vector3DAnimationUsingKeyFrames</td></tr></tbody></table><p>&emsp;&emsp;其中许多类型的含义不言自明。例如，一旦掌握DoubleAnimation 类，就不需要再分析SingleAnimation、Int16Animation、Int32Animation 以及其他所有用于简单数值类型的动画类，它们都以相同的方式工作。除这些用于数值类型的动画类外，您还会发现一些使用其他基本数据类型(如 byte、bool、string 以及 char)的动画类，以及更多的用于处理二维和三维 Drawing图元(Point、Size、Rect 和 Vector 等)的动画类、用于所有元素的 Margin 和 Padding 属性的动画类(ThicknessAnimation)、用于颜色的动画类(ColorAnimation)以及用于任意引用类型对象的动画类(ObjectAnimationUsingKeyFrames)。</p><blockquote><p>杂乱的Animation名称空间</p></blockquote><p>&emsp;&emsp;如果查看 System.Windows.Media.Animation 名称空间，可能会感到有些震惊。该名称空间中充满了针对不同数据类型的不同动画类。效果有些重复。如果能够将所有这些动画特性组合到几个核心类中，可能会更好。难道开发人员不能实现合适的适用于所有数据类型的通用 Animate<T>类?然而，由于许多原因，使得这种模型在目前还行不通。首先，不同动画类可能以稍有不同的方式执行它们的工作，这意味着代码需要有所区别。例如，ColorAnimation类使用的从一种颜色褪色到另一种颜色对颜色值进行混合的方式，与 DoubleAnimaton 类修改单个值的方式就不同。换句话说，尽管动画类提供了相同的公有接口，但它们的内部工作可能不同。这些接口通过继承进行标准化，因为所有动画类都继承自相同的基类(从Animmatable 类开始)。<br>&emsp;&emsp;然而，还不止如此。确实，许多动画类共享大量代码，只有较少的代码不同。例如，大约有 100个类用于表示关键帧和关键帧集合。在理想情况下，动画类应当可以通过它们执行的动画类型进行区别，所以可使用NumericAnimation<I>、KeyFrameAnimation<I>或LinearInterpolationAnimation<T>等类。<code>唯一能够假定的是，阻止这种解决方法的深层次原因是 XAMI 缺少对泛型的支持。</code></p><h3 id="使用代码创建动画"><a href="#使用代码创建动画" class="headerlink" title="使用代码创建动画"></a>使用代码创建动画</h3><blockquote><p>WPF如何决定使用的步长</p></blockquote><p>&emsp;&emsp;幸运的是，这个细节是自动进行的，WPF使用它所需的步长以确保在当前配置的帧率下得到平滑的动画。<strong>标准的帧率是60帧&#x2F;秒</strong>。换句话说，<code>WPF每隔/60秒就回计算所有应用例如动画的数值，并更新相应的属性</code>。</p><p>&emsp;&emsp;使用动画的最简单方式是实例化在前面列出的其中一个动画类，配置该实例，然后使用希望修改的元素的<code>BeginAnimation()</code>方式。所有WPF元素，成UIElement基类开始，都继承了<code>BeginAnimation()</code>方法，该方法是<code>IAnimatable</code>结构的一部分。其他实现了<code>IAnimatablae</code>结构的类包括<code>ContentElement</code>（文档流内容的基类）和Visual3D(3D可视化对象的基类)</p><div class="note info flat"><p><code>BeginAnimation()</code>并非最常用的方法——大多数情况下将使用XAML以声明方式创建动画</p></div><p>&emsp;&emsp;下图显示了一个非常简单的、增加了按钮宽度的动画。当单击按钮时，WPF平滑地扩展按钮的两个侧边知道充满窗口</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240713173902.png" width="50%"/><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.From = <span class="number">160</span>;</span><br><span class="line">widthAnimation.To = <span class="keyword">this</span>.Width - <span class="number">30</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>任何使用线性插值的动画最少需要三个细节：<strong>开始值(From)、结束值(To)和整个动画执行的时间(Duration)</strong></p></div><h4 id="From属性"><a href="#From属性" class="headerlink" title="From属性"></a>From属性</h4><p>&emsp;&emsp;From值是Width属性的开始值。如果多次单击按钮，没吃单击时，都会将Width属性重新设置为160，并且重新开始运行动画。即使当动画已在运行时单击按钮也同样如此</p><p>&emsp;&emsp;在许多情况下，可能不希望动画成最初的<code>From</code>值开始。有如下两个常见的原因：</p><ul><li><strong>创建能够触发多次，并逐次累加效果的动画</strong>。例如，可能希望创建没吃单击时都增大一点的按钮</li><li><strong>创建可能相互重叠的动画</strong>。例如，可使用<code>MouseENter</code>事件触发扩展的动画，并使用<code>MouseLeave</code> 事件触发将按钮缩小为原尺寸的互补动画(这通常称为“鱼眼”效果)。如果连续快速地将鼠标多次移动到这种按钮上并移开，每个新动画就会打断上一个动画，导致按钮“跳”回到由 From 属性设置的尺寸。</li></ul><p>&emsp;&emsp;当前示例属于第二种情况。如果当按钮正在增大时单击按钮，按钮的宽度就回呗重新设置为160像素——这可能会出现抖动效果。为纠正这个问题，只需要忽略设置<code>From</code>属性的代码语句即可：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.To = <span class="keyword">this</span>.Width - <span class="number">30</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;为使用这种技术，应用动画的属性必须有预先设置的值。在这个示例中这意味着<code>按钮必须有硬编码的宽度</code>(不管是在按钮标签中直接定义的,还是通过样式设置器应用的)。问题是在许多布局容器中，通常不指定宽度并且让容器根据元素的对齐属性控制宽度。对于这种情况，元素使用默认宽度,也就是特殊的 Double.NaN 值(这里的 NaN 代表“不是数字(nota number)”)。<strong>不能为具有这种值的属性使用线性插值应用动画</strong>。</p><p>&emsp;&emsp;那么，解决方法是什么呢?在许多情况下，答案是硬编码按钮的宽度。正如您将看到的，动画经常需要更精确地控制元素的尺寸和位置。实际上，对于能应用动画的内容，最常用的布局容器是 Canvas 面板，因为 Canvas 面板允许更方便地移动内容(可能相互重叠)以及改变内容的尺寸。Canvas面板还是量级最轻的布局容器，因为当诸如 Width 的属性发生变化时不需要额外的布局工作。</p><h4 id="To属性"><a href="#To属性" class="headerlink" title="To属性"></a>To属性</h4><p>&emsp;&emsp;就像可省略From属性一样，也可以省略To属性。实际上，可同时省略From属性和To属性，像下面这样创建动画：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;乍一看,这个动画好像根本没有执行任何操作。这样想是符合逻辑的,因为 To属性和 From属性都被忽略了，它们将使用相同的值。但它们之间存在一点微妙且重要的区别。</p><p>&emsp;&emsp;当省略 From 值时，动画使用当前值，并将动画纳入考虑范围。例如，如果按钮位于某个增长操作的中间，From 值会使用扩展后的宽度。然而，当忽略To值时，动画使用不考虑动画的当前值。本质上，这意味着 To值变为原数值-一最后一次在代码中、元素标签中或通过样式设置的值(这得益于 WPF 的属性识别系统，该系统可以根据多个重叠属性提供者计算属性的值，不会丢弃任意信息。</p><h4 id="By属性"><a href="#By属性" class="headerlink" title="By属性"></a>By属性</h4><p>&emsp;&emsp;即使不使用 To属性，也可以使用 By属性。By 属性用于创建按设置的数量改变值的动画,而不是按给定目标改变值。例如，可创建一个动画，增大按钮的尺寸，使得比当前尺寸大50个单位，如下所示:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.By = <span class="number">50</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">0.5</span>);</span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在按钮示例中，这种方法不是必需的，因为可使用简单的计算设置 To属性来实现相同的效果，如下所示:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">widthAnimation.To = cmdGrowIncrementally.Width + <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然而当使用XAML定义动画时，使用By值就变得更加合理了，因为XAML没有提供执行简单的计算的能力</p><div class="note info flat"><p>大部分使用插值的动画类通常都提供了By属性，但并非全部如此。例如，对于非数值数据类型来说，By属性是没有意义的，比如ColorAnimation 类使用的 Color 结构。</p></div><p>&emsp;&emsp;另有一种方法可得到类似的行为，而不需要使用 By属性--可通过设置 IsAdditive 属性创建增加数值的动画。当创建这种动画时，当前值被自动添加到From值和 To值。例如，分析下面这个动画:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.From = <span class="number">0</span>;</span><br><span class="line">widthAnimation.To = <span class="number">-50</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">0.5</span>);</span><br><span class="line">widthAnimation.IsAdditive = <span class="literal">true</span>;</span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个动画是成当前值开始的，当到达比当前值少50可单位的值时完成。另一方面，如果使用下面的动画：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.From = <span class="number">10</span>;</span><br><span class="line">widthAnimation.To = <span class="number">50</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">0.5</span>);</span><br><span class="line">widthAnimation.IsAdditive = <span class="literal">true</span>;</span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;属性值跳到新值(比当前值大 10个单位的值)，然后增加值，直到达到最后的值，最后的值比动画开始前的当前值大 50个单位。</p><h4 id="Duration属性"><a href="#Duration属性" class="headerlink" title="Duration属性"></a>Duration属性</h4><p>&emsp;&emsp;Duration 属性很简单--是在动画开始时刻和结束时刻之间的时间间隔(时间间隔单位是毫秒、分钟、小时或您喜欢使用的其他任何单位)。尽管在上一个示例中，动画的持续时间是使用TimeSpan 对象设置的,但 Duration 属性实际上需要 Duration 对象。幸运的是,Duration 和 TimeSpan非常类似，并且 Duration 结构定义了一种隐式转换，能够根据需要将 System.TimeSpan 转换为System.Windows.Duration。这正是为什么下面的代码行完全合理的原因:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><blockquote><p>那么，为什么要使用全新的数据类型呢?</p></blockquote><p>&emsp;&emsp;因为 Duration 类型还提供了两个不能通过 TimeSpan对象表示的特殊数值--Duration.Automatic 和 Duration.Forever。在当前示例中，这两个值都没有用处(Automatic 值只将动画设置为1秒的持续时间，而Forever 值使动画具有无限的持续时间，这会防止动画具有任何效果)。然而，当创建更复杂的动画时，这些值就有用处了。</p><h4 id="同时发生的动画"><a href="#同时发生的动画" class="headerlink" title="同时发生的动画"></a>同时发生的动画</h4><p>&emsp;&emsp;可使用 BeginAnimation()方法同时启动多个动画。BeginAnimation()方法几乎总是立即返回从而可以使用类似下面的代码同时为两个属性应用动画:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.From = <span class="number">160</span>;</span><br><span class="line">widthAnimation.To = <span class="keyword">this</span>.Width - <span class="number">30</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">DoubleAnimation heightAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">heightAnimation.From = <span class="number">30</span>;</span><br><span class="line">heightAnimation.To = <span class="keyword">this</span>.Height - <span class="number">50</span>;</span><br><span class="line">heightAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br><span class="line">cmdGrow.BeginAnimation(Button.HeightProperty, heightAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个示例中，两个动画没有被同步，这意味着宽度和高度不会准确地在相同时间间隔内增长(通常，将看到按钮先增加宽度，紧接着增加高度)。可通过创建绑定到同一个时间线的动画，突破这一限制。本章稍后讨论故事板时将介绍这种技术。</p><h4 id="动画的生命周期"><a href="#动画的生命周期" class="headerlink" title="动画的生命周期"></a>动画的生命周期</h4><p>&emsp;&emsp;从技术角度看，WPF动画是暂时的，这意味着它们不能真正改变基本属性的值。当动画处于活动状态时，只是覆盖属性值。这是由依赖项属性的工作方式造成的，并且这是一个经常会被忽视的细节，该细节会给用户带来极大的困惑。</p><p>&emsp;&emsp;单向动画(如增长按钮的动画)在运行结束后会保持处于活动状态，这是因为动画需要将按钮的宽度保持为新值。这会导致如下不常见的问题--如果尝试使用代码在动画完成后修改属性值，代码将不起作用。因为代码只是为属性指定了一个新的本地值，但仍会优先使用动画之后的属性值。</p><p>&emsp;&emsp;根据准备完成的工作，可通过如下几种方式解决这个问题：</p><ul><li><strong>创建将元素重新设置为原始状态的动画。可通过创建不设置 To 属性的动画达到该目的</strong>。例如，将按钮的宽度减小到最后设置的尺寸的按钮缩小动画，之后就可以使用代码改变该属性了。</li><li><strong>创建可翻转的动画。通过将 AutoReverse 属性设置为 true 来创建可翻转的动画</strong>。例如，当按钮增长动画不再增加按钮的宽度时，将反向播放动画，返回到原始宽度。动画的总持续时间也将翻倍。</li><li>改变 FiBehavior 属性。通常，FillBehavior 属性被设置为 HoldEnd，这意味着当动画结束时，会继续为目标元素应用最后的值。<strong>如果将FiBehavior属性改为 Stop，只要动画结束属性就会恢复为原来的值。</strong></li><li><strong>当动画完成时通过处理动画对象的 Completed 事件删除动画对象</strong></li></ul><p>&emsp;&emsp;前3种方法改变了动画的行为。不管使用哪种方法，它们都将动画后的属性设置为原来的数值。如果这并非所希望的，那就需要使用最后一种方法。</p><ol><li>在启动动画前，关联事件处理程序以响应动画完成事件<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">widthAnimation.Completed += WidthAnimation_Completed;</span><br></pre></td></tr></table></figure></li><li>当引发Completed事件时，可通过调用<code>BeginANimation()</code>方法来渲染不活动的动画。为此，只需要指定属性，并为动画对象传递null引用：<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdGrow.BeginAnimation(WidthProperty, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li><li>当调用 BeginAnimation()方法时，属性返回为动画开始之前的原始值。如果这并非所希望的结果，可记下动画应用的当前值，删除动画，然后手动为属性设置新值，如下所示:<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> currentWidth = cmdGrow.Width;</span><br><span class="line">cmdGrow.BeginAnimation(WidthProperty, <span class="literal">null</span>);</span><br><span class="line">cmdGrow.Width = currentWidth;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Timeline类"><a href="#Timeline类" class="headerlink" title="Timeline类"></a>Timeline类</h4><p>&emsp;&emsp;下图显示了WPF动画类的继承层次结构。该图包含了所有基类，但省略了全部42可动画类以及相应的TypeNameAnimationBase类</p><center>动画类的继承层次结构</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714083240.png" width="70%"/><p>&emsp;&emsp;Timeline类中前几个有用的成员定义了已经介绍过的<code>Duration</code>属性，还有其他几个属性：</p><center>Timeline类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>BeginTime</td><td>设置将被添加到动画开始之前的延迟时间(TimeSpan类型)。这一延迟时间被加到总时间，所以具有5秒延迟的5秒动画，总的时间是10秒。当同步在同一时间开始，但按顺序应用效果的不同动画时，BeginTime属性是很有用的</td></tr><tr><td>Duration</td><td>使用Duration对象设置动画成开始到结束的运行时间</td></tr><tr><td>SpeedRatio</td><td>提高或减慢动画速度。通常，SpeedRatio属性值是1。如果增加该属性值，动画会加快(例如，如果SpeedRatio属性的值为5，动画的速度会变为原来的5倍);如果减小该属性值，动画会变慢(例如，如果 SpeedRatio属性的值为0.5，动画时间将变为原来的两倍)。可通过改变动画的 Duration 属性值得到相同结果。<code>当应用 BeginTime 延迟时，不考虑 SpeedRatio属性的值</code></td></tr><tr><td>AccelerationRatio DecelerationRatio</td><td>使动画不是线性的，从而开始时较慢，然后增速(通过增加<code>AccelerationRatio</code>属性值)；或者结束时降低速度(通过增加DecelerationRatio属性值)。<strong>这两个属性的值都在0~1之间，并且开始时都设置为0.此外，这两个属性值之和不能超过1</strong></td></tr><tr><td>AutoReverse</td><td>如果为true，当动画完成时会自动方向播放，返回到原始值。这也会使动画的运行时间加倍。如果增加SpeedRatio属性值 ，就会应用到最初的动画播放以及反向的动画播放。BeginTime属性值只应用于动画的开始——不延迟反向动画</td></tr><tr><td>FillBehavior</td><td>决定当动画结束时如何操作。通常，可将属性值保持为固定的结束值(FillBehavior.HoldEnd)，但是也可选择将属性值返回为原来的数值(FillBehavior.Stop)</td></tr><tr><td>RepeatBehavior</td><td>通过该属性，可以使用指定的次数或时间间隔重复动画。用于设置这个属性的RepeatBehavior对象决定了确切的行为</td></tr></tbody></table><h5 id="AccelerationRatio和DecelerationRatio属性"><a href="#AccelerationRatio和DecelerationRatio属性" class="headerlink" title="AccelerationRatio和DecelerationRatio属性"></a>AccelerationRatio和DecelerationRatio属性</h5><p>&emsp;&emsp;可以通过 AccelerationRatio 和 DecelerationRatio 属性压缩部分时间线，使动画运行得更快。并将拉伸其他时间线进行补偿，使总时间保持不变。</p><p>&emsp;&emsp;这两个属性都表示百分比值。例如，将AccelerationRatio属性设置为0.3表示希望使用动画持续时间中前 30%的时间进行加速。例如，在一个持续10秒的动画中，前3秒会加速运行而剩余的7秒会以恒定不变的速度运行(显然，在最后7秒钟的速度比没有加速的动画要快，因为需要补偿前3秒中的缓慢启动)。如果将AccelerationRatio属性设置为0.3，并将DecelerationRatio 属性也设置为 0.3，那么在前3秒会加速，在中间4秒保持固定的最大速度，在最后3秒减速。分析一下这种方式，显然，AccelerationRatio 和 DecelerationRatio 属性值之和不能超过 1，否则就需要超过 100%的可用时间来执行所需的加速和减速。当然，可将AccelerationRatio 属性设置为1(对于这种情况，动画速度从开始到结束一直在增加)，或将DecelerationRatio 属性设置为1(对于这种情况，动画速度从开始到结束一直在降低)。</p><h5 id="RepeatBehavior属性"><a href="#RepeatBehavior属性" class="headerlink" title="RepeatBehavior属性"></a>RepeatBehavior属性</h5><p>&emsp;&emsp;使用RepeatBehavior 属性可控制如何重复运行动画。如果希望重复固定次数，应为RepeatBehavior构造函数传递合适的次数。例如，下面的动画重复两次:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.From = <span class="number">160</span>;</span><br><span class="line">widthAnimation.To = <span class="keyword">this</span>.Width - <span class="number">30</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line">widthAnimation.RepeatBehavior = <span class="keyword">new</span> RepeatBehavior(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当运行这个动画时,按钮会增加尺寸(经过5秒),跳回到原来的数值,然后再次增加尺寸(经过5秒)，在按钮的宽度为整个窗口的宽度时结束。如果将AutoReverse属性设置为true，行为稍有不同--整个动画完成向前和向后运行(意味着先展开按钮，然后收缩)，之后再重复一次。</p><div class="note warning flat"><p>使用插值的动画提供了一个 IsCumulative 属性，该属性告诉 WPF 如何处理每次重复。如果IsCumulative 属性为 true，动画就不会从头到尾重复。相反，每个后续动画增加到前面的动画例如，如果将前面动画的 IsCumulative 属性设置为 ture，按钮将在两倍多的时间内扩展两倍宽。<strong>从另一个角度看，正常地处理第一次动画，但对于之后的每次重复动画，就像是将 IsAdditive属性设置为 true。</strong></p></div><p>&emsp;&emsp;除可以使用<code>RepeatBehavior</code>属性设置重复次数完，还可以用该属性设置重复的时间间隔。为此，只需要为RepeatBheavior对象的构造函数传递一个TimeSpan对象。例如，下面的动画重复13秒</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DoubleAnimation widthAnimation = <span class="keyword">new</span> DoubleAnimation();</span><br><span class="line">widthAnimation.From = <span class="number">160</span>;</span><br><span class="line">widthAnimation.To = <span class="keyword">this</span>.Width - <span class="number">30</span>;</span><br><span class="line">widthAnimation.Duration = TimeSpan.FromSeconds(<span class="number">5</span>);</span><br><span class="line">widthAnimation.RepeatBehavior = <span class="keyword">new</span> RepeatBehavior(TimeSpan.FromSeconds(<span class="number">13</span>));</span><br><span class="line"></span><br><span class="line">cmdGrow.BeginAnimation(Button.WidthProperty, widthAnimation);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在该例中，Duration属性指定整个动画历经5秒。因此，将RepeatBehavior属性设置为13秒将会引起两次重复，然后通过第三次重复动画，使按钮的宽度处于中间位置(在3秒的位置)。</p><p>&emsp;&emsp;最后，也可将RepeatBehavior的值设置为如下使动画不断重复自身：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">widthAnimation.RepeatBehavior = RepeatBehavior.Forever;</span><br></pre></td></tr></table></figure><h2 id="故事板"><a href="#故事板" class="headerlink" title="故事板"></a>故事板</h2><p>&emsp;&emsp;正如您已经看到的，WPF动画通过一组动画类表示。使用少数几个属性设置相关信息，如开始值、结束值以及持续时间。这显然使得它们非常适合于XAML。不是很清晰的是:如何为特定的事件和属性关联动画，以及如何在正确的时间触发动画。<br>&emsp;&emsp;在所有声明式动画中都会用到如下两个要素：</p><ul><li><strong>故事板</strong>：故事板是<code>BeginAnimation()</code>方法的XAML等价物。通过故事板将动画指定到合适的元素和属性</li><li><strong>时间触发器</strong>：事件触发器响应属性变化或事件，并控制故事板。例如，为了开始动画，事件触发器必须使用故事板</li></ul><h3 id="故事板-1"><a href="#故事板-1" class="headerlink" title="故事板"></a>故事板</h3><p> &emsp;&emsp;故事板是增强的时间线，可用来分组多个动画，而且具有控制动画播放的能力——暂停、停止以及改变播放位置。然而，<code>Storyboard</code>类提供的最基本功能是，能够使用<code>TargetProperty</code>和<code>TagrteName</code>属性指向某个特定属性和特定元素。换句话说，故事板在动画和希望应用动画的属性之间架起了一座桥梁。下面的标记演示如何定义用于管理<code>DoubleAnimation</code>的故事板：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Key</span>=<span class="string">&quot;WidthAnimation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">From</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">To</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;定义故事板是创建动画的第一部。为让故事板实际运行起来，还需要有事件触发器</p><h3 id="事件触发器"><a href="#事件触发器" class="headerlink" title="事件触发器"></a>事件触发器</h3><p>&emsp;&emsp;样式提供了一种事件触发器关联到元素的方式。然而，可在如下4可位置定义事件触发器：</p><ul><li>在样式中(<code>Styles.Triggers</code>集合)</li><li>在数据模板中(<code>DataTemplate.Triggers</code>集合)</li><li>在空间模板中(<code>ControlTemplate.Triggers</code>集合)</li><li>直接在元素中定义事件触发器(<code>FrameworkElement.Triggers</code>集合)</li></ul><p>&emsp;&emsp;当创建时间触发器时，需要指定开始触发器的路由事件和由触发器执行的一个或多个动作。对于动画，最常用的动作是<code>BeginStoryboard</code>，该动作相当于调用<code>BeginAnimation()</code>方法</p><p>&emsp;&emsp;下面的示例使用按钮的<code>Triggers</code>集合为<code>Click</code>事件关联某个动画。当单击按钮时，该动画增长按钮：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Click and Make Me Grow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">To</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>为创建第一次加载窗口时引发的动画，需要在<code>Window.Triggers</code>集合中添加事件触发器以响应<code>Window.Loaded</code>事件</p></div><p>&emsp;&emsp;Storyboard.TargetProperty 属性指定了希望改变的属性(在这个示例中是 Width 属性)。如果没有提供类的名称，故事板使用其父元素，在此使用的是希望扩展的按钮。如果希望设置附加属性(如 Canvas.Left 或 Canvas.Top)，需要在括号中封装整个属性，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Left)&quot;</span> <span class="attr">...</span>/&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>在这个示例中不需要使用<code>Storyboard.TargetName</code>属性。当忽略该属性时，故事板使用父元素，在此是按钮</p></div><blockquote><p>使用样式关联触发器</p></blockquote><p>&emsp;&emsp;FrameworkElement.Triggers 集合有点奇怪,它仅支持事件触发器。其他触发器集合(Style.Triggers、DataTemplate.Triggers与ControlTemplate.Triggers)的功能更强大,它们支持三种基本类型的 WPF触发器:属性触发器、数据触发器以及事件触发器。</p><p>&emsp;&emsp;使用事件触发器是关联动画的最常用方式，但并不是唯一的选择。如果使用位于样式、数据模板或控件模板中的 Triggers 集合，还可创建当属性值发生变化时进行响应的属性触发器。例如，下面的样式复制了在前面显示的示例。当IsPressed 属性为true 时，该样式触发一个故事板:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;GrowButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;Button.IsPressed&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Trigger.EnterActions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Width&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">To</span>=<span class="string">&quot;250&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Trigger.EnterActions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Padding</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Click and Make Me Grow&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource GrowButtonStyle&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可使用两种方式为属性触发器关联动作。可使用Trigger.EnterActions 设置当属性改变到指定的数值时希望执行的动作(在上面的示例中，当IsPressed 属性值变为true 时)，**也可以使用Trigger.ExitActions 设置当属性改变回原来的数值时执行的动作(当IsPressed 属性的值变回 false时)**。这是一种封装一对互补动画的简便方法。</p><h3 id="重叠动画"><a href="#重叠动画" class="headerlink" title="重叠动画"></a>重叠动画</h3><p>&emsp;&emsp;故事板提供了改变处理重叠动画方式的能力--换句话说，决定第二个动画何时被应用到已经具有一个正在运行的动画的属性上。可使用 BeginStoryboard.HandofBehavior 属性改变处理重叠动画的方式。</p><p>&emsp;&emsp;通常，当两个动画相互重叠时，第二个动画会立即覆盖第一个动画。这种行为就是所谓的“快照并替换”(由 HandofBehavior 枚举中的 SnapshotAndReplace 值表示)。当第二个动画开始时，第二个动画获取属性当前值(基于第一个动画)的快照，停止动画，并用新动画替换第一个动画。</p><p>&emsp;&emsp;另一个 HandofBehavior 选项是 Compose，这种方式会将第二个动画融合到第一个动画的时间线中。例如，分析 ListBox 示例的修改版本，当缩小按钮时使用 HandofBehavior.Compose:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;ListBoxItem.MouseLeave&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">HandoffBehavior</span>=<span class="string">&quot;Compose&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">BeginTime</span>=<span class="string">&quot;0:0:0.5&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;现在，如果将鼠标移到 ListBoxItem对象上，然后再移开，将看到不同的行为。当将鼠标移开项时，项会继续扩展，这种行为非常明显，直到第二个动画到达其 05秒的开始时间延迟。然后，第二个动画会缩小按钮。如果不使用 Compose 行为，在第二个动画开始之前的 0.5 秒的时间间隔内，按钮会处于等待状态，并固定为当前尺寸。</p><p>&emsp;&emsp;使用组合的 HandofiBehavior 行为需要更大开销。这是因为当第二个动画开始时，用于运行原来动画的时钟不能被释放。相反，这个时钟会继续保持存活，直到istBoxltem 对象被垃圾回收或为相同的属性应用新的动画为止。</p><div class="note danger flat"><p>如果非常关注性能，WPF 团队推荐一旦动画完成，就手动为动画释放动画时钟(而不是等垃圾回收器回收它们)。为此，需要处理一个事件，如Storyboard.Completed 事件。然后，为刚结束动画的元素调用 BeginAnimation()方法，提供恰当的属性和 null 引用以替代动画。</p></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WidthAnimation_Completed</span>(<span class="params">...</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cmdGrow.BeginAnimation(WidthProperty, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步的动画"><a href="#同步的动画" class="headerlink" title="同步的动画"></a>同步的动画</h3><p>&emsp;&emsp;Storyboard 类间接地继承自 TimelineGroup 类，所以 Storyboard 类能包含多个动画。最令人高兴的是，这些动画可以作为一组进行管理--这意味着它们在同一时间开始。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Width</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Click Grow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">To</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Height&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">To</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Duration</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;因为 Storyboard 类继承自 Timeline类,所以可使用Timeline鼠标表中描述的所有属性来配置其速度、使用加速或减速、引入延迟时间等。这些属性将影响故事板包含的所有动画，而且它们是累加的。例如，如果将 Storyboard.SpeedRatio 属性设置为2，并将 DoubleAnimation.SpeedRatio 属性设置为2，那么动画就会以4倍于正常速度的速度运行。</p><h3 id="控制播放"><a href="#控制播放" class="headerlink" title="控制播放"></a>控制播放</h3><p>&emsp;&emsp;到目前为止，已在事件触发器中使用了一个动作——加载动画的 BeginStoryboard 动作。然一旦创建故事板，就可以用其他动作控制故事板。这些动作类都继承自而，ControllableStoryboardAction类，下表中列出了这些类。</p><center>控制故事板的动作类</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>PauseStoryboard</td><td>停止播放动画并且保持其当前位置</td></tr><tr><td>ResumeStoryboard</td><td>恢复播放暂停的动画</td></tr><tr><td>StopStoryboard</td><td>停止播放动画，并将动画时钟重新设置到开始位置</td></tr><tr><td>SeekStoryboard</td><td>跳到动画时间线中的特定位置。如果动画当前正在播放，就继续成新位置播放。如果动画当前是暂停的，就继续保持暂停</td></tr><tr><td>SetStoryboardToFill</td><td>改变整个故事板(而不仅是改变某个内部动画)的SpeedRatio属性值</td></tr><tr><td>SkipStoryboardToFill</td><td>将故事板移到时间线的终点。从技术角度该，这个时期就是所谓的填充区域(fill region)。对于标准动画，FillBehavior属性设置为HoldEnd，动画继续保持最后的值</td></tr><tr><td>RemoveStoryboard</td><td>移出故事板，停止所有正在运行的动画并将属性返回为原来的、最后一次设置的数值。这和对适当的元素使用nul动画对象调用BeginAnimation()方法的效果相同</td></tr></tbody></table><div class="note warning flat"><p>**停止动画不等于完成动画(除非将 FilllBehavior 属性设置为 Stop)**。这是因为即使动画到达时间线的终点，也仍然应用最后的值。类似地，当动画暂停时，会继续应用最近的中间值。然而，当动画停止时，不再应用任何数值，并且属性值会恢复为动画之前的值。</p></div><p>&emsp;&emsp;帮助文档中没有记载会妨碍使用这些动作的内容。为成功地执行这些动作，<strong>必须在同一个Triggers 集合中定义所有触发器。如果将 BeginStoryboard动作的触发器和 PauseStoryboard 动作的触发器放置到不同集合中，PauseStoryboard动作就无法工作</strong>。</p><p>&emsp;&emsp;如下示例，白天到黑夜的切换：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714113714.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdStart&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">x:Name</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;imgDay&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Opacity&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">From</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--暂停动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdPause&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PauseStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--恢复暂停的动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdResume&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResumeStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--停止动画，重新设置会开始位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdStop&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StopStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置到5秒位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdMiddle&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SeekStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Offset</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;imgNight&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Source</span>=<span class="string">&quot;/Images/night.png&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;imgDay&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Source</span>=<span class="string">&quot;/Images/day.png&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;0 10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel.Resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Value</span>=<span class="string">&quot;5 0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdStart&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Start&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdPause&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Pause&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdResume&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Resume&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdStop&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Stop&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdMiddle&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Move To Middle&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>注意，必须为 BeginStoryboard 动作指定名称(在这个示例中，名称是 fadeStoryboardBegim)。其他触发器通过为 BeginStoryboardName属性指定这个名称，连接到相同的故事板。</p></div><p>&emsp;&emsp;当使用故事板动作时将遇到限制。它们提供的属性(如SeekStoryboard.Offset 和SetStoryboardSpeedRatio.SpeedRatio 属性)<strong>不是依赖项属性</strong>，这会限制使用数据绑定表达式。例如，不能自动读取 Slider.Value属性值并将其应用到 SetStoryboardSpeedRatio.SpeedRatio 动作,因为 SpeedRatio属性不接受数据绑定表达式。您可能认为可通过使用Storyboard 对象的SpeedRatio 属性来解决这个问题，但这是行不通的。当动画开始时，读取 SpeedRatio 值并创建一个动画时钟。此后，即使改变了SpeedRatio 属性的值，动画也仍会保持正常的速度。</p><p>&emsp;&emsp;如果希望动态调整速度或位置，唯一的解决方法是使用代码。Storyboard 类中的方法提供了与上表中描述的触发器相同的功能，包括Begin()、Pause()、Resume()、Seek()、Stop()、SkipToFill()、SetSpeedRatio( )以及 Remove( )方法。</p><p>&emsp;&emsp;要访问Storyboard对象，必须在标记中设置其Name属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Name</span>=<span class="string">&quot;fadeStoryboard&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;现在只需要编写前档的事件处理程序，并使用Storyboard对象的方法(<strong>请记住，简单地改变故事板的属性(比如SpeedRatio)是没有任何效果的，它们仅配置当动画开始时将要使用的设置</strong>)</p><p>&emsp;&emsp;当拖动Slider控件上的滑块时，下面的时间处理程序会进行响应。该事件处理程序获取滑块条的值(范围是0~3)，并使用该数值应用新的速率</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sldSpeed_ValueCHanged</span>(<span class="params"><span class="built_in">object</span> sender,RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    fadeStoryboard.SetSpeedRatio(<span class="keyword">this</span>,sldSpeed.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意，SetSpeedRatio()方法需要两个参数。第一个参数是顶级动画容器(在这个示例中，是指当前窗口)。所有故事板方法都需要这个引用。第二个参数是新的速率。</p><h3 id="监视动画进度"><a href="#监视动画进度" class="headerlink" title="监视动画进度"></a>监视动画进度</h3><p>&emsp;&emsp;显示动画的位置和进度。首先需要使用TextBlock元素显示时间，而后需要使用ProgressBar控件显示图形进度条。您可能认为，可使用数据绑定表达式设置TextBlock值和ProgressBar内容，但这是行不通的。因为从故事板中检索当前动画时钟相关信息的唯一方式是使用方法，如<code>GetCurrentTime()</code>和<code>GetCurrentProgress()</code>。无法成属性中获取相同的信息。</p><center>故事板事件</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Completed</td><td>动画已经到达终点</td></tr><tr><td>CurrentGlobalSpeedInvalidated</td><td>速度发生了变化，或者动画被暂停、重新开始、停止或移动到某个新的位置。当动画时钟反转时(在可反转动画的终点)，以及当动画加速和减速时，也会引发该事件</td></tr><tr><td>CurrentStateInvalidated</td><td>动画已经开始或结束</td></tr><tr><td>CurrentTimeInvalidated</td><td>动画时钟已经向前移动了一个步长，正在更改动画。当动画开始、停止或结束也会引发该事件</td></tr><tr><td>RemoveRequested</td><td>动画正在被移除、使用动画的属性随后会返回为原来的值</td></tr></tbody></table><p>&emsp;&emsp;这个示例需要使用<code>CurrentTimeInvalidated</code>事件，没吃向前移动动画时都会引发该事件（<strong>通常，每秒移动60次，当如果执行的代码需要更长事件，可能会丢失时钟刻度</strong>）<br>&emsp;&emsp;当引发<code>CurrentTimeInvalidated</code>事件时，发送者是Clock对象(Clock类位于System.WIndows.Media.ANimation名称空间)。可通过Clock对象检索当前事件，当前时间使用TimeSpan对象表示：<strong>并且可检索当前进度，当前进度使用0~1之间的数值表示</strong></p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714150720.png" width="80%"/><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">XML</button><button type="button" class="tab " data-href="-2">C#</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdStart&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">x:Name</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">x:Name</span>=<span class="string">&quot;fadeStoryboard&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">CurrentTimeInvalidated</span>=<span class="string">&quot;fadeStoryboard_CurrentTimeInvalidated&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;imgDay&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Opacity&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">From</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--暂停动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdPause&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PauseStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--恢复暂停的动画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdResume&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResumeStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--停止动画，重新设置会开始位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdStop&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StopStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置到5秒位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;cmdMiddle&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SeekStoryboard</span> <span class="attr">BeginStoryboardName</span>=<span class="string">&quot;fadeStoryboardBegin&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Offset</span>=<span class="string">&quot;0:0:5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;imgNight&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Source</span>=<span class="string">&quot;/Images/night.png&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;imgDay&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Source</span>=<span class="string">&quot;/Images/day.png&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Stretch</span>=<span class="string">&quot;Fill&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;0 10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel.Resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Padding&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Margin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Value</span>=<span class="string">&quot;5 0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdStart&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Start&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdPause&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Pause&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdResume&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Resume&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdStop&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Stop&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdMiddle&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Move To Middle&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span>  <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span>  <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Margin</span>=<span class="string">&quot;10 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;Speed:&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">Margin</span>=<span class="string">&quot;5 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">&quot;lblTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ProgressBar</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">x:Name</span>=<span class="string">&quot;progressBar&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Height</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Minimum</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Maximum</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fadeStoryboard_CurrentTimeInvalidated</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Clock storyboardClock = (Clock)sender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (storyboardClock.CurrentProgress == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lblTime.Content = <span class="string">&quot;[[ stopped]]&quot;</span>;</span><br><span class="line">        progressBar.Value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        lblTime.Content = storyboardClock.CurrentTime.ToString();</span><br><span class="line">        progressBar.Value = (<span class="built_in">double</span>)storyboardClock.CurrentProgress;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note info flat"><p>如果使用Clock.CUrrentProgress属性，就不必为确定进度条的属性值而执行任何计算</p></div><h2 id="动画缓动"><a href="#动画缓动" class="headerlink" title="动画缓动"></a>动画缓动</h2><p>&emsp;&emsp;<strong>线性动画的一个缺点是，它通常让人觉得很机械而且不够自然</strong>。相比而言，高级的用户界面具有模拟真实世界系统的动画效果。例如，可能使用具有触觉的下压按钮，当单击时按钮快速地弹回，但是当没有进行操作时它们会慢慢地停下来，创建真正移动的错觉。或者，可能使用类似 Windows 操作系统的最大化和最小化效果,当窗口接近最终尺寸时窗口扩展或收缩的速度会加速。这些细节十分细微，当它们的实现比较完美时您可能不会注意到它们。然而，几乎总会注意到，粗糙的缺少这些更细微特征的动画会给人留下笨拙的印象。</p><p>&emsp;&emsp;<strong>改进动画并创建更趋自然的动画的秘诀是改变变化速率。不是创建以固定不变的速率改变属性的动画，而是需要设计根据某种方式加速或减速的动画。</strong>WPF提供了几种选择。在下一章中，将学习基于帧的动画和关键帧动画，这两种技术都提供了更精细地控制动画的能力(需要做的工作显著增加)。但**实现更趋自然的动画的最简单方法是使用预置的缓动函数(easingfunction)**。</p><h3 id="使用缓动函数"><a href="#使用缓动函数" class="headerlink" title="使用缓动函数"></a>使用缓动函数</h3><p>&emsp;&emsp;动画缓动的最大优点是，相对于其他方法，如基于帧的动画和关键帧动画，这种方法需要的工作少得多。为使用动画缓动，使用某个缓动函数类(继承自EasingFunctionBase 的类)的实例设置动画对象的 EasingFunction 属性。通常需要设置缓动函数的几个属性，并且为了得到您所希望的效果，可能必须使用不同的设置，但不需要编写代码并且只需很少的 XAML。</p><p>&emsp;&emsp;现在，动画使用线性插值，这意味着按钮以恒定的机械性的速度增长和收缩。为得到更趋自然的效果，可使用缓动函数。下面的示例添加了名为lasticEase的缓动函数。最终结果是按钮弹跳出其完整宽度，然后迅速弹回一点，接着再次摆动超出其完整尺寸(但比上一次稍少点)，再以稍小的幅度迅速弹回，等等，随着运动的减弱不断地重复这一跳动模式。之后逐渐进入缓和的 10次振荡。<code>Oscilations属性控制最终跳动的次数</code>。ElasticEase 类还提供了另一个属性<code>Springiness，该属性的值越大，后续的每个振荡静止得越快(默认值是 3)</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Grow Me&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;UIElement.MouseEnter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">To</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Duration</span>=<span class="string">&quot;0:0:1.5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DoubleAnimation.EasingFunction</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">ElasticEase</span> <span class="attr">EasingMode</span>=<span class="string">&quot;EaseInOut&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Oscillations</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Springiness</span>=<span class="string">&quot;7&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">DoubleAnimation.EasingFunction</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">DoubleAnimation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;UIElement.MouseLeave&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">To</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">Duration</span>=<span class="string">&quot;0:0:1.5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DoubleAnimation.EasingFunction</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">ElasticEase</span> <span class="attr">EasingMode</span>=<span class="string">&quot;EaseInOut&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Oscillations</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">Springiness</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">DoubleAnimation.EasingFunction</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">DoubleAnimation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>因为 EasingFunction 属性只能接受单个缓动函数对象,所以不能为同一个动画结合不同的缓动函数</p></div><h3 id="在动画开始时应用缓动与在动画结束时应用缓动"><a href="#在动画开始时应用缓动与在动画结束时应用缓动" class="headerlink" title="在动画开始时应用缓动与在动画结束时应用缓动"></a>在动画开始时应用缓动与在动画结束时应用缓动</h3><p>&emsp;&emsp;在继续分析不同的缓动函数前，理解缓动函数的应用时机是很重要的。所有缓动函数类都继承自 EasingFunctionBase类,并且继承了EasingMode 属性。该属性具有三个可能值:<code>Easeln(该值意味着在动画开始时应用缓动效果)</code>、<code>EaseOut(该值意味着在动画结束时应用缓动效果)</code>、<code>EaselnOut(该值意味着在动画开始和结束时应用缓动效果</code>——将 Easeln 用于动画的前半部分,将 EaseOut用于动画的后半部分)。</p><p>&emsp;&emsp;在上面的示例中，growStoryboard 中的动画使用 EaseOut 模式。因此，逐渐减弱的跳动序列发生于动画的末尾。如果使用图形显示按钮宽度随动画进程的变化情况,就会看到类似下图的图形。</p><center>使用ElasticEase的EaseOut模式振荡动画的结束</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714154920.png" width="50%"/><p>&emsp;&emsp;如果将 ElasticEase 函数的缓动模式切换为 Easeln，跳动将在动画的开始部分发生。按钮收缩使其宽度比开始值更小一点，然后扩展宽度使其超过开始值，继而再稍多地收缩回一点，持续这种模式以逐渐地增加振荡直到自由振荡并扩展剩余的部分(使用ElasticEase.Oscilations 属性控制振荡次数)。下图显示了这种非常不同的移动模式。</p><center>使用ElasticEase的EaseIn模式振荡动画的结束</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714155346.png" width="50%"/><p>&emsp;&emsp;最后，EaseInOut模式创建更新颖的效果，在动画的前半部分是振荡动画的开始，接下来在动画的后半部分是振荡动画的结束。下图演示了该模式。</p><center>使用ElasticEase的EaseInOut模式振荡动画的结束</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714155446.png" width="50%"/><h3 id="缓动函数类"><a href="#缓动函数类" class="headerlink" title="缓动函数类"></a>缓动函数类</h3><p>&emsp;&emsp;WPF提供了11可缓动函数类，所有这个写类都位于熟悉的<code>System.Windows.Media.Animation</code>名称空间中。下表描述了所有的缓动函数类，并列出了它们的重要属性。请记住，每个缓动函数类还提供了EasingMode属性，用于控制是影响动画的开始(EaseIn)、是影响动画的结束(WaseOut)还是影响动画的开始和结束(EaseInOut)</p><center>缓动函数</center><table><thead><tr><th>名称</th><th>说明</th><th>属性</th></tr></thead><tbody><tr><td>BackEase</td><td>当使用EaseIn模式应用该缓动函数时，在动画开始之前拉回动画。当使用EaseOut模式应用该缓动函数时，允许动画稍微超越稍后拉回</td><td>Amplitude属性决定了拉回和超越的量。默认值是1，可减少该属性值(大于0的任何值)以缩减效果，或增加该属性值以放大效果</td></tr><tr><td>ElasticEase</td><td>当使用 EascOut 模式应用该缓动函数时，使动画超越其最大值并前后摆动，逐渐减慢。当使用 Easen 模式应用该缓动函数时，动面在其开始值周围前后摆动，逐渐增加</td><td>Oscillations属性控制动画前后摆动的次数(默认值是3)，Springiness属性控制振荡增加或减弱的速度(默认值是 3)</td></tr><tr><td>BounceEase</td><td>执行与ElasticEase缓动函数类似的效果，只是弹跳永远不会超越初始值或最终值</td><td>Bounce 属性控制动画回跳的次数(默认值是2)，Bounciness属性决定弹跳增加或减弱的速度(默认值是 2)</td></tr><tr><td>CircleEase</td><td>使用圆函数加速(使用EaseIn模式)或减速(使用EaseOut模式)动画</td><td>无</td></tr><tr><td>CubicEase</td><td>使用基于时间立方的函数加速(使用EaseIn模式)或减速(使用EaseOut模式)动画。其效果与CircleEase类似，但是加速过程更缓和</td><td>无</td></tr><tr><td>QuadraticEase</td><td>使用基于事件频繁的额函数加速(使用EaseIn模式)或减速(使用EaseOut模式)动画。效果与CubicEase类似，但加速过程更缓和</td><td>无</td></tr><tr><td>QuarticEase</td><td>使用基于时间4次方的函数加速(使用EaseIn模式)或减速(使用EaseOut模式)动画。效果和CubicEase以及QuadraticEase类似，但加速过程更明显</td><td>无</td></tr><tr><td>QuinticEase</td><td>使用基于时间5次方的函数加速(使用EaseIn模式)或减速(使用EaseOut模式)动画。效果和CubicEase以及QuadraticEase类似，但加速过程更明显</td><td></td></tr><tr><td>SineEase</td><td>使用包含正弦计算的函数加速(使用EaseIn模式)或减速(使用EaseOut模式)动画。加速非常缓和并且相对于其他各种缓动函数更接近线性插值</td><td>无</td></tr><tr><td>PowerEase</td><td>使用幂函数 f(t)&#x3D;t^α 加速(使用 Easeln 模式)或减速(使用 EaseOut 模式)动画。根据为指数p使用的值，可复制 Cubic、QuadraticEase、QuarticEase以及 QuinticEase 函数的效果</td><td>Power 属性用于设置公式中的指数。将该属性设置为2会复制QuadraticEase的效果(f(t)&#x3D;t^2)，设置为3会复制 CubicEase 的效果(f(t)&#x3D;t^3)，设置为4会复制 QuarticEase的效果(f(t)&#x3D;t^4)，i设置为5会复制QuinticEase 的效果(f(t)&#x3D;t^5),或选择其他不同值，默认值是2</td></tr><tr><td>ExponentialEase</td><td>使用指数函数f(t)&#x3D;(e(at)-1)&#x2F;(e(a) - 1)加速(使用EaseIn模式)或减速(使用EaseOut模式)动画</td><td>Exponent属性用于设置指数(默认值是2)</td></tr></tbody></table><p>&emsp;&emsp;许多缓动函数提供了类似但隐约不同的结果。为成功地使用动画缓动，需要决定使用哪个缓动函数，以及如何进行配置。通常，这个过程需要一点试错的体验。有两个资源可为您提供帮助。</p><ul><li>首先，WPF 文档为每个缓动函数的行为提供了插图示例，显示动画如何随着时间修改属性值。查看这些插图是理解缓动函数作用的好方法。下图显示了最流行缓动函数的插图。</li></ul><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714165842.png" width="60%"/><ul><li>其次，Microsoft提供了几个范例程序，可使用这些范例播放不同的缓动函数，并尝试不同的属性值。最方便的范例之一是Silverlight应用程序，可通过浏览<a href="http://tinyurl.com/animationeasing">http://tinyurl.com/animationeasing</a> 在浏览器中运行该应用程序。通过该应用程序可在正方形中观察任何缓动函数的效果，并会显示自动生成的复制该效果所需的XAML 标记。</li></ul><h3 id="创建自定义缓动函数"><a href="#创建自定义缓动函数" class="headerlink" title="创建自定义缓动函数"></a>创建自定义缓动函数</h3><p>&emsp;&emsp;通过从 <code>EasingFunctionBase</code> 继承自己的类，并重载 EaseInCore()和 CreateInstanceCore( )方法，可创建自定义缓动效果。这是一个非常专业的技术，因为大部分开发人员能通过配置标准的缓动函数(或使用将在下一章描述的样条关键帧动画)来获得所希望的效果。然而，如果确实决定创建自定义缓动函数，您将发现该过程出奇简单</p><p>&emsp;&emsp;需要编写的几乎所有逻辑都在 <code>EaselnCore()</code>方法中运行。该方法接受一个规范化的时间值本质上，是表示动画进度的从0到1之间的值。当动画开始时，规范化的时间值是0。它从该点开始增加，直到在动画结束点达到1。</p><p>&emsp;&emsp;在动画运行期间，每次更新动画的值时WPF都会调用<code>EaseInCore()</code>方法，确切的调用频率取决于斗篷话的频率，但可以预期每秒调用<code>EaseInCore()</code>方法的次数接近60</p><p>&emsp;&emsp;为执行缓动，EaseInCore()方法采用规范化的时间值，并以某种方式对其进行调整。EaselnCore( )方法返回的调整后的值，随后被用于调整动画的进度。例如，如果 EaseInCore( )方法返回 0，动画被返回到其开始点。如果 EaselnCore()方法返回1，动画跳到其结束点。然而，EaselnCore( )方法的返回值并不局限于这一范围--例如，可返回 1.5 以使动画过渡运行自身50%。您已经看到过用于缓动函数(如 ElasticEase)的这类效果，</p><blockquote><p>下面给出的EaseInCore()方法版本根本不执行任何工作。该版本返回规范化的时间，意味着动画均匀展开，就像没有缓动</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">EaseInCore</span>(<span class="params"><span class="built_in">double</span> normalizedTime</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> normalizedTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面的 EaselnCore()方法版本通过计算规范化时间值的立方，复制CubicEase 函数的效果。因为规范化的时间值是小数，其立方值是更小的小数;所以该方法的效果是最初减慢动画，并当规范化的时间值(及其立方值)接近于1时导致动画加速。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">EaseInCore</span>(<span class="params"><span class="built_in">double</span> normalizedTime</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.Pow(normalizedTime,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>在 EaselnCore()方法中执行的缓动是当使用 Easen 缓动模式时得到的缓动。有趣的是，这就是所需的全部工作，因为 WPF足够智能，它会自动为EaseOut和 EaseInOut设置计算互补的行为。</p></div><p>&emsp;&emsp;下面的示例中，自定义缓动函数——以一定的随机量偏移规范化的时间值，导致分散的抖动效果。可使用提供的Jitter依赖项属性(在一个较小的范围内)调整抖动的幅度，该属性接受从0到2000之间的数值。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">定义自定义缓动函数</button><button type="button" class="tab " data-href="-2">使用自定义缓动函数</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 随机抖动</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RandomJitterEase</span> : <span class="title">EasingFunctionBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Store a random number generator</span></span><br><span class="line">    <span class="keyword">private</span> Random _rand = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Jitter</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">int</span>)GetValue(JitterProperty); &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; SetValue(JitterProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow the amount of jitter to be configured.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty JitterProperty =</span><br><span class="line">        DependencyProperty.Register(<span class="string">&quot;Jitter&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="keyword">typeof</span>(RandomJitterEase), <span class="keyword">new</span> PropertyMetadata(<span class="number">1000</span>), <span class="keyword">new</span> ValidateValueCallback(ValidateJitter));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">ValidateJitter</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> jitterValue = (<span class="built_in">int</span>)<span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">return</span> ((jitterValue &lt;= <span class="number">2000</span>) &amp;&amp; (jitterValue &gt;= <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This required override simply provides a live instance of your easing function</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Freezable <span class="title">CreateInstanceCore</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomJitterEase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform the easing</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">EaseInCore</span>(<span class="params"><span class="built_in">double</span> normalizedTime</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Make sure there&#x27;s no jitter in the final value.</span></span><br><span class="line">        <span class="keyword">if</span> (normalizedTime == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Offset the value by a random amount.</span></span><br><span class="line">        <span class="keyword">return</span> Math.Abs(normalizedTime - (<span class="built_in">double</span>)_rand.Next(<span class="number">0</span>, <span class="number">10</span>) / (<span class="number">2010</span> - Jitter));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Grow Me&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Canvas.Left</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Canvas.Top</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;cmdGrow&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Left)&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">From</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">To</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">                                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:10&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">DoubleAnimation.EasingFunction</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">local:RandomJitterEase</span> <span class="attr">EasingMode</span>=<span class="string">&quot;EaseIn&quot;</span></span></span><br><span class="line"><span class="tag">                                                            <span class="attr">Jitter</span>=<span class="string">&quot;1000&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">DoubleAnimation.EasingFunction</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">DoubleAnimation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note info flat"><p>如果希望查看当动画运行时计算出的缓动值，可在EaseInCore()方法中使用System.DiagnosticsDebug 类的 WriteLine()方法。当在 Visual Shudio 中调试应用程序时，该方法会将您提供的值写入到 Output窗口中</p></div><h2 id="动画性能"><a href="#动画性能" class="headerlink" title="动画性能"></a>动画性能</h2><p>&emsp;&emsp;通常，为用户界面应用动画只不过是创建并配置正确的动画和故事板对象。但在其他情况下，特别是同时发生多个动画时，可能需要更加关注性能。特定的效果更可能导致这些问题--例如，那些涉及视频、大位图以及多层透明等的效果通常需要占用更多CPU 开销。如果不谨慎地实现这类效果，运行它们时可能造成明显抖动，或者会从其他同时运行的应用程序抢占CPU的时间</p><p>&emsp;&emsp;幸运的是，WPF提供了几个可提供帮助的技巧。接下来的几节将学习降低最大帧率以及缓存计算机显卡中的位图，这两种技术可以减轻 CPU的负担。</p><h3 id="期望的帧率"><a href="#期望的帧率" class="headerlink" title="期望的帧率"></a>期望的帧率</h3><p>&emsp;&emsp;WPF 试图保持以60帧&#x2F;秒的速度运行动画。这样可确保从开始到结束得到平滑流畅的动画。当然，WPF 可能达不到这个目标。如果同时运行多个复杂的动画，并且 CPU或显卡不能承受的话，整个帧率可能会下降(最好的情形)，甚至可能会跳跃以进行补偿(最坏的情形)。</p><p>&emsp;&emsp;尽管很少提帧率，但可能会选择降低帧率，这可能是因为以下两个原因之一：</p><ul><li>动画使用更低的帧率看起来也很好，所以不希望浪费额外的CPU周期</li><li>应用程序运行在性能较差的CPU或显卡上，并知道使用高的帧率时整个动画的渲染效果还不如使用更低的帧率的渲染效果</li></ul><div class="note warning flat"><p>开发人员有时认为 WPF 提供了用于根据显卡硬件降低帧率的代码,但事实并非如此。相反,WPF 总是试图保持 60 帧&#x2F;秒，除非明确地告诉它使用其他帧率。为了评估动画的执行情况以及在特定的计算机上 WPF 是否能够达到 60 帧&#x2F;秒,可使用 Perforator 工具,该工具是作为 MicrosofWindows SDK v70 的一部分而提供的。对于下载链接、安装指导以及文档，请查看<a href="http://tinyurl.com/9kzmv9s">http://tinyurl.com/9kzmv9s</a>.</p></div><p>&emsp;&emsp;调整帧率很容易，只需要为包含动画的故事板使用<code>Timeline.DesciredFrameRate</code>附加属性。下面的示例将帧率减半：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">Timeline.DesiredFrameRate</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下图显示了一个简单的测试程序，该程序为一个小球应用动画，使其在Cavnas控件上沿着一条曲线运动：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240714180408.png" width="60%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BeginStoryboard</span> <span class="attr">x:Key</span>=<span class="string">&quot;beginStoryboard&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Storyboard</span> <span class="attr">Timeline.DesiredFrameRate</span>=<span class="string">&quot;&#123;Binding ElementName=txtFrameRate,Path=Text&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Left)&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">From</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">To</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Storyboard.TargetName</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;(Canvas.Top)&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">From</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">To</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">AutoReverse</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.25&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">DecelerationRatio</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;Window.Loaded&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">StaticResource</span> <span class="attr">ResourceKey</span>=<span class="string">&quot;beginStoryboard&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">SourceName</span>=<span class="string">&quot;btnRepeat&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RoutedEvent</span>=<span class="string">&quot;Button.Click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">StaticResource</span> <span class="attr">ResourceKey</span>=<span class="string">&quot;beginStoryboard&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Triggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">ClipToBounds</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">x:Name</span>=<span class="string">&quot;ellipse&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Fill</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Width</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Height</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;0 20&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;Desired Frame Rate:&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">Margin</span>=<span class="string">&quot;10 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;txtFrameRate&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;btnRepeat&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;30&quot;</span>&gt;</span>Repeat<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="位图缓存"><a href="#位图缓存" class="headerlink" title="位图缓存"></a>位图缓存</h3><p>&emsp;&emsp;位图缓存通知 WPF 获取内容的当前位图图像，并将其复制到显卡的内存中。这时，显卡可以控制位图的操作和显示的刷新。这个处理过程比让 WPF 完成所有工作要快很多，并且和显卡不断地通信。</p><p>&emsp;&emsp;如果运用得当，位图缓存可改善应用程序的绘图性能。但如果运用不当，就会浪费显存并且实际上会降低性能。所以，在使用位图缓存之前，需要确保真正合适。下面列出一些指导原则:</p><ul><li>如果正在绘制的内容需要频繁地重新绘制，使用位图缓存可能是合理的。因为每次后续的重新绘制将更快。一个例子是当其他一些具有动画的对象浮动在形状表面上时，使用BitmapCacheBrush 画刷绘制形状的表面。尽管形状没有变化，但是形状的不同部分被遮挡住或显露出来，从而需要重新绘制。</li><li>如果元素的内容经常变化，使用位图缓存可能不合理。因为可视化内容每次改变时，WPF需要重新渲染位图并将其发送到显卡缓存，而这需要耗费时间。该规则有些晦涩，因为某些改变不会导致缓存无效。安全操作的例子包括使用变换旋转以及重新缩放元素、剪裁元素、改变元素的透明度以及应用效果。另一方面，改变元素的内容、布局以及格式将强制重新渲染位图。</li><li>尽量少缓存内容。位图越大，WPF 存储缓存副本所需的时间越长，需要的显存越多旦耗尽显存，WPF 将被迫使用更慢的软件渲染。</li></ul><div class="note danger flat"><p>不良的缓存策略可能导致更严重的性能问题，应用程序不会充分地优化。所以除非满足这些指导原则,否则不要使用缓存。同样,可使用性能分析工具(如 Perforator,<a href="http://tinyurl.com/9kzmv9s)%E6%A0%B8%E5%AE%9E%E6%82%A8%E7%9A%84%E7%AD%96%E7%95%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%96%84%E6%80%A7%E8%83%BD%E3%80%82">http://tinyurl.com/9kzmv9s)核实您的策略是否可以改善性能。</a></p></div><p>&emsp;&emsp;为更好地理解位图缓存，使用一个简单示例是有帮助的。在下列中，一个动画推动一个简单的图形——正方形——在Canvas面板上移动，Cavans面板包含一条具有复杂集合图形的路径。当正方形在Canvas面板表面上移动时，强制WPF重新计算路径并填充丢失的部分。这会带来极大的CPU负担，并且动画甚至可能看哦是变得断断续续</p><p>&emsp;&emsp;可采用几种方法解决该问题。一种选择是使用一幅位图替换背景，WPF能够更高效地管理位图。更灵活的选择是使用位图缓存，这种方法可继续将存活的、可交互的元素作为背景。<br>&emsp;&emsp;为启用位图缓存功能，将相应元素的CacheMode属性设置为BitmapCache。每个元素都提供了 CacheMode属性，这意味着您可以精确选择为哪个元素使用这一特征。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Path CacheMode=<span class="string">&quot;BitmapCache&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>如果缓存包含其他元素的元素，如布局容器，所有元素都将被缓存到一幅位图中。因此，当为类似 Canvas 的容器添加缓存时要格外谨慎——只有当 Canvas 容器较小而且其内容不会改变时才这么做。</p></div><p>&emsp;&emsp;通过这个简单修改，可立即看到区别。首先，窗口显示的时间要稍长一些。但动画的运行将更平滑，并且CUP的负担将显著降低。可通过 Windows 任务管理器进行检——经常可以看到CPU 的负担从接近 100%减少到20%以下。</p><p>&emsp;&emsp;通常，当启用位图缓存时，WPF采用元素当前尺寸的快照并将其位图复制到显卡中。如果之后使用 ScaleTransfomm 放大元素，这会变成一个问题。<strong>在这种情况下，将放大缓存的位图,而不是实际的元素，当放大元素时这会导致模糊放大以及色块</strong>。</p><p>&emsp;&emsp;例如，设想一个修订过的示例。在示例中，第二个同步动画扩展Path 使其为原始尺寸的10倍，然后缩回原始尺寸。为确保具有良好的显示质量，可使用5倍于Path 原始尺寸的尺寸缓存其位图:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.CacheMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BitmapCache</span> <span class="attr">RenderAtScale</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.CacheMode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样可解决像素化问题。虽然缓存的位图仍比Pat的最大动画尺寸(最大尺寸达 10 倍于其原始尺寸)小，但显卡能使位图的尺寸加倍，从5倍到10倍，而不会有任何明显的缩放问题。更重要的是，这可使应用程序避免过多地使用显存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;理解WPF动画&quot;&gt;&lt;a href=&quot;#理解WPF动画&quot; class=&quot;headerlink&quot; title=&quot;理解WPF动画&quot;&gt;&lt;/a&gt;理解WPF动画&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在许多用户框架中(特别是 WPF 之前的框架，如 Windows窗体和 MF</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 14效果和可视化对象</title>
    <link href="http://bootree.cn/2024/07/09/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/14%E6%95%88%E6%9E%9C%E5%92%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AF%B9%E8%B1%A1/"/>
    <id>http://bootree.cn/2024/07/09/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/14%E6%95%88%E6%9E%9C%E5%92%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AF%B9%E8%B1%A1/</id>
    <published>2024-07-09T13:35:03.000Z</published>
    <updated>2024-07-13T03:29:11.925Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;通常，当基本性能成为问题或需要访问单个像素时，将使用这些低级功能。</p><ul><li><strong>可视化对象（<code>Visual</code>）</strong>：如果希望构建用于绘制矢量图形的程序，或计划创建包含数千个形状并可以分别操作这些形状的画布，那么使用WPF的元素系统和形状类会使速度过慢，不能满足要求。相反，需要更简洁的方法，使用低级的<code>Visual</code>类手动进行执行渲染</li><li><strong>效果（<code>Effect</code>）</strong>：如果希望为元素应用复杂的可视化效果(如模糊和颜色调整)，最简便的方法是使用像素着色器(pixel shader)这个专用工具修改单个像素。为提高性能，像素着色器是硬件加速的，并且有许多已经制作好的效果，您付出很少的努力就可以将这些效果应用到自己的应用程序中</li><li><strong>WriteableBitmap</strong>：虽然需要做很多工作，但通过 WriteableBitmap 类可以完全拥有幅位图--这意味着可以设置并检査位图的任何像素。对于复杂的数据可视化情形(例如当图形化科学计算数据时)可以使用该特性，也可以使用该特性从头开始实现一个赏心悦目的效果。</li></ul><h2 id="可视化对象"><a href="#可视化对象" class="headerlink" title="可视化对象"></a>可视化对象</h2><p>&emsp;&emsp;通过使用几何图形、图画和路径，可以降低2D图形的开销，即使正在使用复杂的具有分层效果的组合形状和渐变画刷，这种方法也仍然能够工作得很好。然而，这种设置不适合需要渲染大量图形元素的绘图密集型应用程序。<br>&emsp;&emsp;WPF针对此类问题的解决方案时，**使用低级的可视化层（<code>visual layer</code>）模型。基本思想时将每个元素定义为一个<code>Visual</code>对象，<code>Visual</code>对象是轻量级的要素，比<code>Geometry</code>对象或<code>Path</code>对象需要的开销更小。然后可使用单个元素在窗口中渲染所有可视化对象</p><h3 id="绘制可视化对象"><a href="#绘制可视化对象" class="headerlink" title="绘制可视化对象"></a>绘制可视化对象</h3><p>&emsp;&emsp;<code>Visual</code>类是抽象类，所有不能创建该类的实例。相反，需要使用继承自<code>Visual</code>类的某个类，包括<code>UIElement</code>类（该类是WPF元素模型的根）、<code>Viewport3DVisual</code>类（通过该类可显示3D内容）以及<code>ContainerVisual</code>（包含其他可视化对象的基本容器）。当最有用的派生类时<code>DrawingVisual</code>类，该类继承自<code>ContainerVisual</code>类，并添加了支持“绘制”希望放置到可视化对象中的图形内容的功能。</p><p>&emsp;&emsp;为使用<code>DrawingVIsual</code>类绘制内容，需要调用<code>DrawingVisual.RenderOpen()</code>方法。该方法返回一个可用于定义可视化内容的<code>DrawingContext</code>对象。绘制完毕后，需要调用<code>DrawingContext.Close()</code>方法。下面时绘制图形的完整过程：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DrawingVisual visual = <span class="keyword">new</span> DrawingVisual();</span><br><span class="line">DrawingContext dc = visual.RenderOpen();</span><br><span class="line"><span class="comment">// Perform drawing here.</span></span><br><span class="line">dc.Close();</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;本质上，<strong>DrawingContext类由各种为可视化对象增加了一些图形细节的方法构成</strong>。可调用这些方法来绘制各种图形、应用变换以及改变不透明度等。</p><center>DrawingContext类的方法</center><p>|名称|说明|<br>|<code>DrawLine()</code> <code>DrawRectangle()</code> <code>DrawRoundedRectangle()</code> <code>DrawEllipse()</code>|在指定的位置，使用指定的填充和轮廓绘制特定的形状。|<br>|<code>DrawGeometry()</code> <code>DrawDrawing()</code>|绘制更复杂的<code>Geometry</code>对象和<code>Drawing</code>对象|<br>|<code>DrawText()</code>|在指定的位置绘制文本。通过为该方法传递<code>FormattedText</code>对象，可指定文本、字体、填充以及其他细节。如果设置了<code>FormattedText.MaxTextWidth</code>属性，可使用该方法绘制换行的文本|<br>|<code>DrawImage()</code>|在指定的区域(由Rect对象定义)绘制一幅位图图像|<br>|<code>DrawVideo()</code>|在特定区域绘制视频内容(封装在MediaPlayer对象中)|<br>|<code>Pop()</code>|封装最后调用的PushXxx()方法，可使用PushXxx()方法暂时应用一个或多个效果并且Pop()方法会翻转它们|<br>|<code>PushClip()</code>|将绘图限制在特定剪裁区域中。这个区域外的内容不被绘制|<br>|<code>PushEffect()</code>|为随后的绘图操作应用<code>BitmapEffect</code>对象|<br>|<code>PushOpacity()</code> <code>PushOpacityMask()</code>|为了使后续的绘图操作部分透明，应用新的不透明设置或不透明掩码|<br>|<code>PushTransform()</code>|设置将应用于后续绘制操作的<code>Transform</code>对象。可使用变换来缩放、移动、旋转或扭曲内容|</p><blockquote><p>下面的示例创建了一个可视化对象，该可视化对象包含没有填充的基本的黑色三角形：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DrawingVisual visual = <span class="keyword">new</span> DrawingVisual();</span><br><span class="line"><span class="keyword">using</span> (DrawingContext dc = visual.RenderOpen())</span><br><span class="line">&#123;</span><br><span class="line">    Pen drawingPen = <span class="keyword">new</span> Pen(Brushes.Black, <span class="number">3</span>);</span><br><span class="line">    dc.DrawLine(drawingPen, <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">50</span>), <span class="keyword">new</span> Point(<span class="number">50</span>, <span class="number">0</span>));</span><br><span class="line">    dc.DrawLine(drawingPen, <span class="keyword">new</span> Point(<span class="number">50</span>, <span class="number">0</span>), <span class="keyword">new</span> Point(<span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line">    dc.DrawLine(drawingPen, <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">50</span>), <span class="keyword">new</span> Point(<span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当调用 DrawingContext方法时，没有实际绘制可视化对象--而只是定义了可视化外观。当通过调用Cose()方法结束绘制时，完成的图画被存储在可视化对象中，并通过只读的DrawingVisual.Drawing 属性提供这些图画。WPF 会保存 Drawing对象，从而当需要时可以重新绘制窗口。</p><p>&emsp;&emsp;绘图代码的顺序很重要。后面的绘图操作可在已经存在的图形上绘制内容。Pusbxcx0)方法应用的设置会被应用到后续的绘图操作中。例如，可使用PushOpacity()方法改变不透明级别，该设置会影响所有的后续绘图操作。可使用Pop()方法恢复最近的Pushxxx()方法。如果多次调用 Pushxxx()方法，可一次使用一系列 Pop( )方法调用关闭它们。</p><p>&emsp;&emsp;一旦关闭 DrawingContext对象，就不能再修改可视化对象。但可以使用 DrawingVisual 类的 Transfomm 和 Opacity 属性应用变换或改变整个可视化对象的透明度。如果希望提供全新的内容，可以再次调用 RenderOpen()方法并重复绘制过程。</p><div class="note info flat"><p>许多绘图方法都使用 Pen 和 Brush 对象。如果计划使用相同的笔画和填充绘制许多可视化对象，或者如果希望多次渲染同一个可视化对象(为了改变其内容)，就值得事先创建所需的 Pen和 Brush对象，并在窗口的整个生命周期中保存它们。</p></div><h3 id="在元素中封装可视化对象"><a href="#在元素中封装可视化对象" class="headerlink" title="在元素中封装可视化对象"></a>在元素中封装可视化对象</h3><p>&emsp;&emsp;在可视化层中编写程序时，最重要的一步是定义可视化对象，但为了在屏幕上实际显示可视内容，这还不够。为显示可视化对象，还需要借助于功能完备的 WPF 元素，WPF 元素将可视化对象添加到可视化树中。乍一看，这好像降低了可视化层编程的优点--毕竟，避免使用元素并避免它们的巨大开销不正是使用可视化层的全部目的吗?然而，单个元素具有显示任意数量可视化对象的能力。因此，可以很容易地创建只包含一两个元素，但却驻留了几千个可视化对象的窗口。<br>&emsp;&emsp;为在元素中驻留可视化对象，需要执行以下任务：</p><ul><li>为元素调用<code>AddVisualChild()</code>和<code>AddLogicalChild()</code>方法来注册可视化对象。从技术角度看，为了显示可视化对象，不需要执行这些任务，但为了确保正确跟踪可视化对象。从技术角度看，为了显示可视化对象，不需要执行这些人物，但为了确保正确跟踪可视化对象、在可视化树和逻辑树中显示可视化对象以及使用其他WPF特性（如命中测试），需要执行这些操作。</li><li>重写<code>VisualChildrenCount</code>属性并返回已经增加了的可视化对象的数量</li><li>重写<code>GetVisualChild()</code>方法，当通过索引号请求可视化对象时，添加返回可视化对象所需的代码</li></ul><p>&emsp;&emsp;当重写 VisualChildrenCount属性和 GetVisualChild()方法时，本质上是劫持了那个元素。如果使用的是能够包含嵌套元素的内容控件、装饰元素或面板，这些元素将不再被渲染。例如，如果在自定义窗口中重写了这两个方法，就看不到窗口的其他内容。只会看到添加的可视化对象。</p><p>&emsp;&emsp;因此，通常创建专用的自定义类来封装希望显示的可视化对象。例如，下图显示的窗口。该窗口允许用户为自定义的 Canvas 面板添加正方形(每个正方形是可视化对象)。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">DrawingCanvas</button><button type="button" class="tab " data-href="-2">MainWidnow.xaml</button><button type="button" class="tab " data-href="-3">MainWindow.xaml.cs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DrawingCanvas</span> : <span class="title">Canvas</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DrawingVisual&gt; _hits = <span class="keyword">new</span> List&lt;DrawingVisual&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Visual&gt; _visuals = <span class="keyword">new</span> List&lt;Visual&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">int</span> VisualChildrenCount =&gt; _visuals.Count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Visual <span class="title">GetVisualChild</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _visuals[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddVisual</span>(<span class="params">Visual visual</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _visuals.Add(visual);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.AddVisualChild(visual);</span><br><span class="line">        <span class="keyword">base</span>.AddLogicalChild(visual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveVisual</span>(<span class="params">Visual visual</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _visuals.Remove(visual);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.RemoveVisualChild(visual);</span><br><span class="line">        <span class="keyword">base</span>.RemoveLogicalChild(visual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命中测试</span></span><br><span class="line">    <span class="keyword">public</span> DrawingVisual? GetVisual(Point point)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取命中测试结果</span></span><br><span class="line">        HitTestResult hitResult = VisualTreeHelper.HitTest(<span class="keyword">this</span>, point);</span><br><span class="line">        <span class="keyword">return</span> hitResult.VisualHit <span class="keyword">as</span> DrawingVisual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复杂命中测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;DrawingVisual&gt; <span class="title">GetVisuals</span>(<span class="params">Geometry region</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Remove matches from the previous search</span></span><br><span class="line">        _hits.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the parameters for the hit test operation</span></span><br><span class="line">        <span class="comment">// (the geometry and callback).</span></span><br><span class="line">        GeometryHitTestParameters parameters = <span class="keyword">new</span> GeometryHitTestParameters(region);</span><br><span class="line">        HitTestResultCallback callback = <span class="keyword">new</span> HitTestResultCallback(HitTestCallback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search for hits</span></span><br><span class="line">        VisualTreeHelper.HitTest(<span class="keyword">this</span>, <span class="literal">null</span>, callback, parameters);</span><br><span class="line">        <span class="keyword">return</span> _hits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HitTestResultBehavior <span class="title">HitTestCallback</span>(<span class="params">HitTestResult result</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GeometryHitTestResult geometryResult = (GeometryHitTestResult)result;</span><br><span class="line">        DrawingVisual? visual = result.VisualHit <span class="keyword">as</span> DrawingVisual;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only include matches that are DrawingVisual objects and that are completely inside the geometry.</span></span><br><span class="line">        <span class="keyword">if</span> (visual != <span class="literal">null</span> &amp;&amp; geometryResult.IntersectionDetail == IntersectionDetail.FullyInside)</span><br><span class="line">        &#123;</span><br><span class="line">            _hits.Add(visual);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HitTestResultBehavior.Continue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:res</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:i</span>=<span class="string">&quot;http://schemas.microsoft.com/xaml/behaviors&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:t</span>=<span class="string">&quot;http://bootree.cn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Margin</span>=<span class="string">&quot;10 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdSelectMove&quot;</span>&gt;</span>Select/Move<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdAdd&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">IsChecked</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">Margin</span>=<span class="string">&quot;0 10&quot;</span>&gt;</span>Add Square<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdDelete&quot;</span>&gt;</span>Delete Square<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmdSelectMultiple&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">Margin</span>=<span class="string">&quot;0 10&quot;</span>&gt;</span>Select Multiple<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 通过将北京设置成白色（而不是透明），可拦截画布表面上的所有鼠标单击事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">t:DrawingCanvas</span> <span class="attr">x:Name</span>=<span class="string">&quot;drawingSurface&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">Background</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">ClipToBounds</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">MouseLeftButtonDown</span>=<span class="string">&quot;drawingSurface_MouseLeftButtonDown&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">MouseLeftButtonUp</span>=<span class="string">&quot;drawingSurface_MouseLeftButtonUp&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">MouseMove</span>=<span class="string">&quot;drawingSurface_MouseMove&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Drawing contants</span></span><br><span class="line">    <span class="keyword">private</span> Brush drawingBrush = Brushes.AliceBlue;</span><br><span class="line">    <span class="keyword">private</span> Brush selectedDrawingBrush = Brushes.LightGoldenrodYellow;</span><br><span class="line">    <span class="keyword">private</span> Pen drawingPen = <span class="keyword">new</span> Pen(Brushes.SteelBlue, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">private</span> Size squareSize = <span class="keyword">new</span> Size(<span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawSquare</span>(<span class="params">DrawingVisual visual, Point topLeftCorner, <span class="built_in">bool</span> isSelected</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (DrawingContext dc = visual.RenderOpen())</span><br><span class="line">        &#123;</span><br><span class="line">            Brush brush = drawingBrush;</span><br><span class="line">            <span class="keyword">if</span> (isSelected) brush = selectedDrawingBrush;</span><br><span class="line">            dc.DrawRectangle(brush, drawingPen, <span class="keyword">new</span> Rect(topLeftCorner, squareSize));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _isDragging = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> DrawingVisual? _selectedVisual;</span><br><span class="line">    <span class="keyword">private</span> Vector _clickOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DrawingVisual _selectionSquare;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _isMultiSelecting = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Point _selectionSquareTopLeft;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawingSurface_MouseLeftButtonDown</span>(<span class="params"><span class="built_in">object</span> sender, MouseButtonEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Point pointClicked = e.GetPosition(drawingSurface);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmdAdd.IsChecked == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DrawingVisual visual = <span class="keyword">new</span> DrawingVisual();</span><br><span class="line">            DrawSquare(visual, pointClicked, <span class="literal">false</span>);</span><br><span class="line">            drawingSurface.AddVisual(visual);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmdDelete.IsChecked == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DrawingVisual? visual = drawingSurface.GetVisual(pointClicked);</span><br><span class="line">            <span class="keyword">if</span> (visual != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                drawingSurface.RemoveVisual(visual);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmdSelectMove.IsChecked == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DrawingVisual? visual = drawingSurface.GetVisual(pointClicked);</span><br><span class="line">            <span class="keyword">if</span> (visual != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Point topLeftCorner = <span class="keyword">new</span> Point(</span><br><span class="line">                    visual.ContentBounds.TopLeft.X + drawingPen.Thickness / <span class="number">2</span>,</span><br><span class="line">                    visual.ContentBounds.TopLeft.Y + drawingPen.Thickness / <span class="number">2</span></span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                DrawSquare(visual, topLeftCorner, <span class="literal">true</span>);</span><br><span class="line">                _clickOffset = topLeftCorner - pointClicked;</span><br><span class="line">                _isDragging = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_selectedVisual != <span class="literal">null</span> &amp;&amp; _selectedVisual != visual)</span><br><span class="line">                &#123;</span><br><span class="line">                    ClearSelection();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _selectedVisual = visual;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmdSelectMultiple.IsChecked == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _selectionSquare = <span class="keyword">new</span> DrawingVisual();</span><br><span class="line"></span><br><span class="line">            drawingSurface.AddVisual(_selectionSquare);</span><br><span class="line">            _isMultiSelecting = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure we get the MouseLeftButtonUp event even if the user</span></span><br><span class="line">            <span class="comment">// moves off the Canvas.Otherwise, two selection squares could</span></span><br><span class="line">            <span class="comment">// be drawn at once.</span></span><br><span class="line">            drawingSurface.CaptureMouse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (_isMultiSelecting)</span><br><span class="line">        &#123;</span><br><span class="line">            Point pointDragged = e.GetPosition(drawingSurface);</span><br><span class="line">            DrawSelectionSquare(_selectionSquareTopLeft, pointDragged);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Brush _selectionSquareBrush = Brushes.Transparent;</span><br><span class="line">    <span class="keyword">private</span> Pen _selectionSquarePen = <span class="keyword">new</span> Pen(Brushes.Black, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawSelectionSquare</span>(<span class="params">Point point1, Point point2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _selectionSquarePen.DashStyle = DashStyles.Dash;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (DrawingContext dc = _selectionSquare.RenderOpen())</span><br><span class="line">        &#123;</span><br><span class="line">            dc.DrawRectangle(_selectionSquareBrush, _selectionSquarePen, <span class="keyword">new</span> Rect(point1, point2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ClearSelection</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_selectedVisual != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Point topLeftCorner = <span class="keyword">new</span> Point(</span><br><span class="line">                _selectedVisual.ContentBounds.TopLeft.X + drawingPen.Thickness / <span class="number">2</span>,</span><br><span class="line">                _selectedVisual.ContentBounds.TopLeft.Y + drawingPen.Thickness / <span class="number">2</span></span><br><span class="line">                );</span><br><span class="line">            DrawSquare(_selectedVisual, topLeftCorner, <span class="literal">false</span>);</span><br><span class="line">            _selectedVisual = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawingSurface_MouseLeftButtonUp</span>(<span class="params"><span class="built_in">object</span> sender, MouseButtonEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _isDragging = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_isMultiSelecting)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Display all the squares in the region.</span></span><br><span class="line">            RectangleGeometry geometry = <span class="keyword">new</span> RectangleGeometry(</span><br><span class="line">                <span class="keyword">new</span> Rect(_selectionSquareTopLeft, e.GetPosition(drawingSurface)));</span><br><span class="line">            List&lt;DrawingVisual&gt; visualsInRegion = drawingSurface.GetVisuals(geometry);</span><br><span class="line"></span><br><span class="line">            MessageBox.Show(String.Format(<span class="string">&quot;You selected &#123;0&#125; squer(s).&quot;</span>, visualsInRegion.Count));</span><br><span class="line"></span><br><span class="line">            _isMultiSelecting = <span class="literal">false</span>;</span><br><span class="line">            drawingSurface.RemoveVisual(_selectionSquare);</span><br><span class="line">            drawingSurface.ReleaseMouseCapture();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawingSurface_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDragging &amp;&amp; _selectedVisual != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Point pointDragged = e.GetPosition(drawingSurface) + _clickOffset;</span><br><span class="line">            DrawSquare(_selectedVisual, pointDragged, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="命中测试"><a href="#命中测试" class="headerlink" title="命中测试"></a>命中测试</h3><p>&emsp;&emsp;绘制正方形的应用程序不仅允许用户绘制正方形，还允许用户移动和删除已经绘制的正方形。为了执行这些任务，需要编写代码以截获鼠标单击，并查找位于可单击位置的可视化对象。该任务被称为命中测试(hit testing)</p><p>&emsp;&emsp;为支持命中测试，最好为 DrawingCanvas类添加GetVisual()方法。该方法使用一个点作为参数并返回匹配的 DrawingVisual对象。为此使用了 VisualTreeHelper.HitTest( )静态方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DrawingVisual? GetVisual(Point point)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取命中测试结果</span></span><br><span class="line">    HitTestResult hitResult = VisualTreeHelper.HitTest(<span class="keyword">this</span>, point);</span><br><span class="line">    <span class="keyword">return</span> hitResult.VisualHit <span class="keyword">as</span> DrawingVisual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂的命中测试"><a href="#复杂的命中测试" class="headerlink" title="复杂的命中测试"></a>复杂的命中测试</h3><p>&emsp;&emsp;在上面的示例中，命中测试代码始终返回最上面的可视化对象(如果单击空自处，就返回null 引用)。然而，VisualTreeHelper 类提供了 HitTest()方法的两个重载版本，从而可以执行更加复杂的命中测试。使用这些方法，可以检索位于特定点的所有可视化对象，即使它们被其他元素隐藏在后面也同样如此。还可找到位于给定几何图形中的所有可视化对象。</p><p>&emsp;&emsp;为了使用这个更高级的命中测试行为，需要创建回调函数。之后 VisualTreeHelper 类自上而下遍历所有可视化对象(与创建它们的顺序相反)。每当发现匹配的对象时，就会调用回调函数并传递相关细节。然后可以选择停止查找(如果已经查找到足够的层次)，或继续查找直到遍历完所有的可视化对象为止。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;DrawingVisual&gt; _hits = <span class="keyword">new</span> List&lt;DrawingVisual&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;DrawingVisual&gt; <span class="title">GetVisuals</span>(<span class="params">Geometry region</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Remove matches from the previous search</span></span><br><span class="line">    _hits.Clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare the parameters for the hit test operation</span></span><br><span class="line">    <span class="comment">// (the geometry and callback).</span></span><br><span class="line">    GeometryHitTestParameters parameters = <span class="keyword">new</span> GeometryHitTestParameters(region);</span><br><span class="line">    HitTestResultCallback callback = <span class="keyword">new</span> HitTestResultCallback(HitTestCallback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search for hits</span></span><br><span class="line">    VisualTreeHelper.HitTest(<span class="keyword">this</span>, <span class="literal">null</span>, callback, parameters);</span><br><span class="line">    <span class="keyword">return</span> _hits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> HitTestResultBehavior <span class="title">HitTestCallback</span>(<span class="params">HitTestResult result</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GeometryHitTestResult geometryResult = (GeometryHitTestResult)result;</span><br><span class="line">    DrawingVisual? visual = result.VisualHit <span class="keyword">as</span> DrawingVisual;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only include matches that are DrawingVisual objects and that are completely inside the geometry.</span></span><br><span class="line">    <span class="keyword">if</span> (visual != <span class="literal">null</span> &amp;&amp; geometryResult.IntersectionDetail == IntersectionDetail.FullyInside)</span><br><span class="line">    &#123;</span><br><span class="line">        _hits.Add(visual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HitTestResultBehavior.Continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;回调方法实现了命中测试行为。通常，HitTestResult对象只提供一个属性(VisualHit)，但可以根据执行命中测试的类型，将它转换成两个派生类型中的任意一个。<br>&emsp;&emsp;如果使用一个点进行命中测试，可将 HitTestResult 对象转换为 PointHitTestResult 对象，该类提供了一个不起眼的 PointHit 属性，该属性返回用于执行命中测试的原始点。但如果使用 Geometry对象进行命中测试，如本例那样，可将HitTestResult对象转换为 GeometryHitTestResult 对象，并访问 IntersectionDetail 属性。IntersectionDetail 属性告知您几何图形是否完全封装了可视化对象(Fullyinside)，几何图形是否与可视化元素只是相互重叠(lmtersets)，或者用于命中测试的几何图形是杏落在可视化元素的内部(FulyContains)。在该例中，只有当可视化对象完全位于命中测试区域时，才会对命中数量计数。最后，在回调函数的末尾，可返回两个HitTestResultBehavior 枚举值中的一个:返回 Continue 表示继续查找命中，返回Stop 则表示结束查找过程。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>&emsp;&emsp;WPF 提供了可应用于任何元素的可视化效果。效果的目标是提供一种简便的声明式方法从而改进文本、图像、按钮以及其他控件的外观。不是编写自己的绘图代码，而是使用某个继承自 Effect 的类(位于 System.Windows.Media.Effects名称空间中)以立即获得诸如模糊、辉光以及阴影等效果。</p><center>效果类</center><table><thead><tr><th>名称</th><th>说明</th><th>属性</th></tr></thead><tbody><tr><td>BlurEffect</td><td>模糊元素中的内容</td><td><code>Radius</code>、<code>KernelType</code>、<code>RenderingBias</code></td></tr><tr><td>DropShadowEffect</td><td>在元素背后添加矩形阴影</td><td><code>BlurRadius</code>、<code>Color</code>、<code>Direction</code>、<code>Opacity</code>、<code>ShadowDepth</code>、<code>RenderingBias</code></td></tr><tr><td>ShaderEffect</td><td>应用像索着色器，像索着色器是使用高级着色语言(High Level Shading Language,HLSL)事先制作好的并且已经编译过的效果</td><td><code>PixelShader</code></td></tr></tbody></table><p>&emsp;&emsp;上表列出的<code>Effect</code>类的派生类和位图效果类相混淆，位图效果类派生自BitmapEffect类，该类和Effect类位于相同的名称空间中。尽管位图效果具有类似的编程模型，但它们存在几个严重的局限性：</p><ul><li>位图效果不支持像素着色器，像素着色器是创建可重用效果的最强大、最灵活的方式。</li><li>位图效果是用非托管的代码实现的，从而需要完全信任的应用程序。所以，在基于浏览器的 XBAP 应用程序中不能使用位图效果。</li><li>位图效果总使用软件进行渲染，不使用显卡资源。这使得它们的速度较慢，当处理大量元素或具有较大可视化表面的元素时尤其如此。</li></ul><div class="note warning flat"><p>BitmapEffect类是在 WPF 的第一个版本中引入的，该版本没有提供 Efect类。为了向后兼容，仍保留了位图效果。</p></div><h4 id="BlurEffect类"><a href="#BlurEffect类" class="headerlink" title="BlurEffect类"></a>BlurEffect类</h4><p>&emsp;&emsp;最简单的WPF效果时<code>BlurEffect</code>类。该类模糊元素的内容，就像通过失焦透镜观察到的效果。通过增加<code>Radius</code>属性的值(默认值是5)可添加模糊程度。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240711215928.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;Blurred (Radius=2)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Effect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BlurEffect</span> <span class="attr">Radius</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.Effect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DropShaowEffect类"><a href="#DropShaowEffect类" class="headerlink" title="DropShaowEffect类"></a>DropShaowEffect类</h4><p>&emsp;&emsp;<code>DropShadowEffect</code>类在元素背后添加了轻微的偏移阴影。可使用该类的几个属性：</p><center>DropShadowEffect</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Color</td><td>设置阴影的颜色(默认黑色)</td></tr><tr><td>ShadowDepth</td><td>确定阴影离开内容多远，单位为像素(默认为5)。将该属性设置为0会创建外侧辉光(outer-glow)效果，该效果会在内容周围添加晕菜(halo of color)</td></tr><tr><td>BlurRadius</td><td>模糊阴影，该属性和<code>BlurEffect类的Radius</code>属性非常类似</td></tr><tr><td>Opacity</td><td>使用0(完全透明)~1(完全不透明,默认值)之间的小数，使阴影部分透明</td></tr><tr><td>Direction</td><td>使用从0到360之间的角度值指定阴影相对于内容的位置。将该属性设置为0会将阴影放置到右边，增加该属性的值时会逆时针移动阴影。默认值是315，该值会将阴影放置到元素的右下方</td></tr></tbody></table><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240711222911.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Text</span>=<span class="string">&quot;Basic dropshadow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DropShadowEffect</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Text</span>=<span class="string">&quot;BLight blue dropshadow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DropShadowEffect</span> <span class="attr">Color</span>=<span class="string">&quot;SlateBlue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Text</span>=<span class="string">&quot;BLight blue dropshadow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DropShadowEffect</span> <span class="attr">Color</span>=<span class="string">&quot;SlateBlue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">ShadowDepth</span>=<span class="string">&quot;15&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Text</span>=<span class="string">&quot;BLight blue dropshadow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DropShadowEffect</span> <span class="attr">Color</span>=<span class="string">&quot;SlateBlue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">ShadowDepth</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Text</span>=<span class="string">&quot;BLight blue dropshadow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DropShadowEffect</span> <span class="attr">Color</span>=<span class="string">&quot;SlateBlue&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">ShadowDepth</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ShaderEffect类"><a href="#ShaderEffect类" class="headerlink" title="ShaderEffect类"></a>ShaderEffect类</h4><p>&emsp;&emsp;ShaderEffect 类没有提供就绪的效果。相反，它是一个抽象类，可继承该类以创建自己的自定义像素着色器。通过使用 ShaderEfect类(或从该类派生的自定义效果)，可实现更多的效果，而不仅局限于模糊和阴影</p><p>&emsp;&emsp;可能与您所期望的相反，实现像素着色器的逻辑不是直接在效果类中使用C#代码编写的。相反，像素着色器是用高级着色语言(<code>High Level Shader Language</code>，HLSL)编写的，该语言是Microsoft DirectX 的一部分(使用这种语言的优点是很明显的---因为 DirectX和 HLSL 已经存在许多年了，图形开发人员已经创建了许多可在代码中使用的像素着色器例程)。</p><blockquote><p>如果正在使用自定义像素着色器（已经编译到名为<code>Effect.ps</code>的文件中），可使用以下代码：</p></blockquote><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">定义Effect</button><button type="button" class="tab " data-href="-2">使用Effect</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomEffect</span> : <span class="title">ShaderEffect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomEffect</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Use the URI syntax described in Chapter7 to refer to your resource.</span></span><br><span class="line">        <span class="comment">// AssemblyName;component/ResourceFileName</span></span><br><span class="line">        Uri pixelShaderUri = <span class="keyword">new</span> Uri(<span class="string">&quot;Effect.ps&quot;</span>, UriKind.Relative);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load the information from the .ps file</span></span><br><span class="line">        PixelShader = <span class="keyword">new</span> PixelShader();</span><br><span class="line">        PixelShader.UriSource = pixelShaderUri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Text</span>=<span class="string">&quot;Basic dropshadow&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">t:CustomEffect</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">TextBlock.Effect</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;如果使用采用特定输入参数的像素着色器，需要做的工作比上面的示例要更复杂一点。对于这种情况，需要通过调用 RegisterPixelShaderSamplerProperty()静态方法创建相应的依赖项属性。<br>&emsp;&emsp;灵活的像素着色器就像在诸如 Adobe Photoshop 这样的图形软件中使用的插件一样强大。它可以执行任何工作，从添加基本的阴影乃至更富有挑战性的效果，如模糊、辉光、水波、浮雕和锐化等。当结合使用动画实时改变像素着色器的参数时，像素着色器还可创建赏心悦目的效果</p><h4 id="WriteableBitmap类"><a href="#WriteableBitmap类" class="headerlink" title="WriteableBitmap类"></a>WriteableBitmap类</h4><p>&emsp;&emsp;WPF 允许使用 Image 元素显示位图。然而，按这种方法显示图片的方法完全是单向的。应用程序使用现成的位图，读取位图，并在窗口中显示位图。就其本身而言，Image元素没有提供创建或编辑位图信息的方法。<br>&emsp;&emsp;这正是<code>WriteableBitmap</code>类的用武之地。该类继承自<code>BitmapSource</code>，<code>BitmapSource</code>类是当设置<code>Image.Source</code>属性时使用的类（不管是在代码中直接设置图像，还是XAML中隐式地设置图像）。但<code>BitmapSource</code>是只读的位图数据映射，而<code>WriteableBitmap</code>类是个修改的像素数组，为实现需要有趣的效果提供了可能。</p><h5 id="生成位图"><a href="#生成位图" class="headerlink" title="生成位图"></a>生成位图</h5><p>&emsp;&emsp;为使用 WriteableBitmap 类生成一幅位图，必须提供几部分重要信息:以像素为单位的宽度和高度、两个方向上的 DPI分辨率以及图像格式。下面是创建一幅与当前窗口尺寸相同的位图的示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WriteableBitmap wb = <span class="keyword">new</span> WriteableBitmap(</span><br><span class="line">    (<span class="built_in">int</span>)<span class="keyword">this</span>.ActualWidth, </span><br><span class="line">    (<span class="built_in">int</span>)<span class="keyword">this</span>.ActualHeight, </span><br><span class="line">    <span class="number">96</span>, </span><br><span class="line">    <span class="number">96</span>, </span><br><span class="line">    PixelFormats.Bgra32, </span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;PixelFormats枚举提供了许多像素格式，但只有一半格式被认为是可写入的并且得到了WriteableBitmap类的支持。下面是可供使用的像素格式:</p><ul><li><strong>Bgra32</strong>，使用32位的sRGB颜色。这意味每个像素由32位（或4字节）表示</li><li><strong>Bgr32</strong>，这种格式为每个像素使用4字节，就像Bgra32格式一样。区别是忽略了alpha通道。当不需要透明度时可使用这种格式</li><li><strong>Pbgra32</strong>，就像Bgra32格式一样，该格式为每个像素使用4可字节。区别在于处理半透明像素的方式</li><li><strong>BlackWhite、Gray2、Gray4、Gray8</strong>，这种格式是黑白和灰度格式</li><li><strong>Indexed1、Indexed2、Indexed4、Indexed8</strong>，这些是索引格式，这意味着每个像素指向颜色调色板终点额一个值</li></ul><h5 id="写入WiteableBitmap对象"><a href="#写入WiteableBitmap对象" class="headerlink" title="写入WiteableBitmap对象"></a>写入WiteableBitmap对象</h5><p>&emsp;&emsp;开始时，WriteableBitmap对象中所有字节的值都是0。本质上，就是一个大的黑色矩形。<br>&emsp;&emsp;为使用内容填充 WriteableBitmap 对象，需要使用 WritePixels()方法。WritePixels()方法将字节数组复制到指定位置的位图中。可调用 WitePixels()方法设置单个像素、整幅位图或选择的某块矩形区域。为从 WriteableBitmnap对象中获取像素，需要使用 CopyPixels()方法，该方法将您希望获取的多个字节转换成字节数组。总之，WritePixels()和 CopyPixels()方法没有为您提供可供使用的最方便编程模型，但这是低级像素访问需要付出的代价。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240713104825.png" width="20%"/><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">WriteableBitmap wb = <span class="keyword">new</span> WriteableBitmap(<span class="number">200</span>, <span class="number">200</span>, <span class="number">96</span>, <span class="number">96</span>, PixelFormats.Bgra32, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; wb.PixelWidth; x++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; wb.PixelHeight; y++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span> blue = (<span class="built_in">byte</span>)Random.Shared.Next(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="built_in">byte</span> green = (<span class="built_in">byte</span>)Random.Shared.Next(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="built_in">byte</span> red = (<span class="built_in">byte</span>)Random.Shared.Next(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="built_in">byte</span> alpha = (<span class="built_in">byte</span>)Random.Shared.Next(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] colorData = &#123; blue, green, red, alpha &#125;;</span><br><span class="line"></span><br><span class="line">        Int32Rect rect = <span class="keyword">new</span> Int32Rect(x, y, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        wb.WritePixels(rect, colorData, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;Image x:Name=&quot;img&quot;/&gt;</span></span><br><span class="line">img.Source = wb;</span><br></pre></td></tr></table></figure><h5 id="更高效的像素写入"><a href="#更高效的像素写入" class="headerlink" title="更高效的像素写入"></a>更高效的像素写入</h5><p>&emsp;&emsp;尽管在上一节中显示的代码可以工作，但并非最佳方法。如果需要一次性写入大量像素数据--甚至是整幅图像--最好使用更大的块，因为调用 WritePixels()方法需要一定的开销,并且调用该方法越频警，应用程序的运行速度就越慢。</p><p>&emsp;&emsp;为一次更新更多个像素，需要理解像素被打包进字节数组的方式。无论使用哪种格式，更新缓冲区都将包括一维字节数组。这个数组提供了用于图像矩形区域中像素的数值，成左向右延伸填充没放，然后自上而下延伸。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240713112703.png"/><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">WriteableBitmap wb = <span class="keyword">new</span> WriteableBitmap((<span class="built_in">int</span>)img.Width, (<span class="built_in">int</span>)img.Height, <span class="number">96</span>, <span class="number">96</span>, PixelFormats.Bgra32, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">Int32Rect rect = <span class="keyword">new</span> Int32Rect(<span class="number">0</span>, <span class="number">0</span>, (<span class="built_in">int</span>)img.Width, (<span class="built_in">int</span>)img.Height);</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] pixels = <span class="keyword">new</span> <span class="built_in">byte</span>[(<span class="built_in">int</span>)img.Width * (<span class="built_in">int</span>)img.Height * wb.Format.BitsPerPixel / <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; wb.PixelHeight; y++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; wb.PixelWidth; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> alpha, red, green, blue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((x % <span class="number">5</span> == <span class="number">0</span>) || (y % <span class="number">7</span> == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            red = (<span class="built_in">int</span>)(((<span class="built_in">double</span>)y) / wb.PixelHeight * <span class="number">255</span>);</span><br><span class="line">            green = rand.Next(<span class="number">100</span>, <span class="number">255</span>);</span><br><span class="line">            blue = (<span class="built_in">int</span>)((<span class="built_in">double</span>)x / wb.PixelWidth * <span class="number">255</span>);</span><br><span class="line">            alpha = <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            red = (<span class="built_in">int</span>)((<span class="built_in">double</span>)x / wb.PixelWidth * <span class="number">255</span>);</span><br><span class="line">            green = rand.Next(<span class="number">100</span>, <span class="number">255</span>);</span><br><span class="line">            blue = (<span class="built_in">int</span>)((<span class="built_in">double</span>)y / wb.PixelHeight * <span class="number">255</span>);</span><br><span class="line">            alpha = <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> pixelOffset = (x + y * wb.PixelWidth) * wb.Format.BitsPerPixel / <span class="number">8</span>;</span><br><span class="line">        pixels[pixelOffset] = (<span class="built_in">byte</span>)blue;</span><br><span class="line">        pixels[pixelOffset + <span class="number">1</span>] = (<span class="built_in">byte</span>)green;</span><br><span class="line">        pixels[pixelOffset + <span class="number">2</span>] = (<span class="built_in">byte</span>)red;</span><br><span class="line">        pixels[pixelOffset + <span class="number">3</span>] = (<span class="built_in">byte</span>)alpha;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> stride = (wb.PixelWidth * wb.Format.BitsPerPixel) / <span class="number">8</span>;</span><br><span class="line">    wb.WritePixels(rect, pixels, stride, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;Image x:Name=&quot;img&quot; Width=&quot;200&quot; Height=&quot;200&quot;/&gt;</span></span><br><span class="line">img.Source = wb;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>如果需要频繁更新 WriteableBitmap 对象中的图像数据,并希望在另一个线程中执行这些更新，可以使用 WriteableBitmap 后台缓冲区以进一步优化代码。基本过程是:使用 Lock( )方法预订后台缓冲区，获得指向后台缓冲区的指针，更新后台缓冲区，调用 AddDirtyRect()方法指示已经改变的区域，然后通过调用 UnLock()方法释放后台缓冲区。这个过程需要不安全的代码</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;通常，当基本性能成为问题或需要访问单个像素时，将使用这些低级功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化对象（&lt;code&gt;Visual&lt;/code&gt;）&lt;/strong&gt;：如果希望构建用于绘制矢量图形的程序，或计划创建包含数千个形状并可以分</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>Pdms二次开发 —— 01第一个插件程序</title>
    <link href="http://bootree.cn/2024/07/08/Pdms%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/01%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E7%A8%8B%E5%BA%8F/"/>
    <id>http://bootree.cn/2024/07/08/Pdms%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/01%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E7%A8%8B%E5%BA%8F/</id>
    <published>2024-07-08T09:09:34.000Z</published>
    <updated>2024-07-09T12:14:20.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;AVEVA PDMS（<code>Plant Design Management System</code>）是一种专业的三维设计和建模软件，主要用于工程项目的设计、建模和管理。它是针对工厂和工艺设施设计的领先软件之一，广泛应用于石油、天然气、化工、能源等行业。以下是一些主要特点和功能：</p><ul><li><strong>三维建模和设计</strong> ：PDMS提供强大的三维建模能力，允许工程师和设计师创建复杂的工厂和设施模型。它支持多种对象类型和管道设计。</li><li><strong>智能对象</strong> ：PDMS中的对象具有智能化特性，能够自动关联和调整，使得设计变更时能够快速反映在整个模型中。</li><li><strong>工程设计集成</strong> ：PDMS能够与其他工程设计软件集成，如工艺流程模拟软件和结构分析软件，实现工程设计的全面协调。</li><li><strong>项目管理</strong> ：通过PDMS，项目团队可以协同工作，管理设计进度、资源分配和成本控制等项目管理任务。</li><li><strong>自定义和二次开发</strong> ：PDMS支持自定义功能和二次开发，使得用户可以根据特定需求扩展和定制软件功能。</li><li><strong>可视化和报告</strong> ：PDMS提供丰富的可视化和报告功能，支持生成各种设计和管理报告，帮助用户进行决策和沟通。</li></ul><h2 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h2><p>&emsp;&emsp;Pdms有很多的版本，以下教程采用的Pdms版本为<code>Pdms12.1.SP2</code>。Pdms的用户手册集成在Pdms软件中，只要安装好Pdms软件即可查看，具体步骤如下：</p><ol><li>运行Pdms软件(双击Pdms安装路径下的<code>pdms.bat</code>文件即可运行)</li><li>点击<code>Help</code>菜单栏，选择<code>Contents</code>菜单项，会打开<code>User Guides AVEVA Plant</code>窗口</li><li>在目录中依次展开<code>Customisation</code> → <code>.NET Customisation</code> → <code>User Guide</code>，此部分介绍了Pdms的.NET二次开发</li><li>Pdms还提供了对应的实例Demo项目，存放在Pdms安装目录下的<code>Samples.zip</code>压缩包文件中</li></ol><h2 id="编写第一个插件"><a href="#编写第一个插件" class="headerlink" title="编写第一个插件"></a>编写第一个插件</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>&emsp;&emsp;因为Pdms的版本比较旧，因此本项目采用的目标框架为<code>.net framework3.5</code>。但是本人不喜欢<code>.net framework</code>中复杂且冗长的<code>.csproj</code>文件，因此我喜欢创建<code>.net core</code>项目再手动将<code>TargetFramework</code>目标框架改为<code>net35</code>，从而获得一个简洁的<code>.csproj</code>文件。同时在后续方便轻松的实现一键切换依赖的Pdms版本。</p><div class="note warning flat"><p><code>.net core</code>项目最高版本为<code>.net core3.1</code>，之后的版本统称为<code>.net</code>(从<code>.net5</code>开始)</p></div><ol><li>新建<code>.NET Core</code>或<code>.NET</code>的<strong>WPF应用程序</strong>(这里采用的是<code>.NET6</code>项目)，取名为<code>PdmsLibrary</code></li><li>双击项目名称，进入<code>PdmsLibrary.csproj</code>文件；修改目标框架，如下所示 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProjectGroup</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将WinExe改为Library(将Windows应用程序改为类库项目)  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将.net6.0-windows 改为 net35 (目标框架改为.net framework3.5) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net35<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 去掉如下配置，.net framework3.5没有这些配置 begin --&gt;</span></span><br><span class="line">        --- <span class="tag">&lt;<span class="name">Nullable</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">Nullable</span>&gt;</span></span><br><span class="line">        --- <span class="tag">&lt;<span class="name">ImplicitUsings</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">ImplicitUsings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 去掉如上配置，.net framework3.5没有这些配置 end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对WPF程序的支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">UseWPF</span>&gt;</span>true<span class="tag">&lt;/<span class="name">UseWPF</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加对Winform程序的支持 --&gt;</span></span><br><span class="line">        +++ <span class="tag">&lt;<span class="name">UseWindowsForms</span>&gt;</span>true<span class="tag">&lt;/<span class="name">UseWindowsForms</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ProjectGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>将<code>App.xaml</code>文件的属性生成操作从<code>应用程序定义</code>改为<code>页</code>。此时<code>App.xaml</code>会被移除(没有删除)，可通过添加现有项找回，目的是想像开发WPF应用程序一样可在App.xaml中声明应用资源</li></ol><h3 id="引用Pdms程序程序集"><a href="#引用Pdms程序程序集" class="headerlink" title="引用Pdms程序程序集"></a>引用Pdms程序程序集</h3><ol><li><p>在Pdms的安装目录下找到Pdms如下程序集</p><ul><li><code>Aveva.ApplicationFramework.dll</code></li><li><code>Aveva.ApplicationFramework.Presentation.dll</code></li></ul></li><li><p>在项目目录下新建名为<code>packages</code>的目录，然后在<code>packages</code>目录下以Pdms的版本名新建一个目录，例如<code>PDMS12.1.SP2</code>，将程序集复制到<code>packages\PDMS12.1.SP2</code>目录</p></li><li><p>项目添加程序引用，选择浏览找到<code>packages\PDMS12.1.SP2</code>目录，将程序集添加为引用，引用成功后，可在<code>.csproj</code>文件中看到如下</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Aveva.ApplicationFramework&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>..\packages\PDMS12.1.SP2\Aveva.ApplicationFramework.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Aveva.ApplicationFramework.Presentation&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>..\packages\PDMS12.1.SP2\Aveva.ApplicationFramework.Presentation.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h3><p>&emsp;&emsp;现在，我们已经搭建好了Pdms的开发环境，接下来编写第一个<code>HelloWorld</code>程序。</p><h4 id="定义命令"><a href="#定义命令" class="headerlink" title="定义命令"></a>定义命令</h4><p>&emsp;&emsp;定义一个命令用于处理按钮的点击事件。在项目中创建一个名为<code>Commands</code>的目录，在<code>Commands</code>目录下新建<code>DisplayCommand.cs</code>文件，内容如下所示</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> Aveva.ApplicationFramework.Presentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PdmsLibrary.Commands</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DisplayCommand</span> : <span class="title">Command</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DisplayCommand</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Key不允许同名</span></span><br><span class="line">            <span class="keyword">this</span>.Key = <span class="keyword">this</span>.GetType().FullName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重写事件的执行函数逻辑</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;Hello World For Pdms!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编写Addin"><a href="#编写Addin" class="headerlink" title="编写Addin"></a>编写Addin</h4><p>&emsp;&emsp;为将WPF类库项目改造成同WPF应用类似的效果，这里将<code>App.xaml.cs</code>文件作为Pdms插件的**<code>Addin</code>**文本，打开App.xaml.cs文件，编写如下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Aveva.ApplicationFramework;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PdmsLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span>, <span class="title">IAddin</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 插件名称</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name =&gt; <span class="string">&quot;PdmsLibrary&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件描述</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Description =&gt; <span class="string">&quot;My First Pdms Library&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 应用命令栏名称</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> AppCommandBarName =&gt; <span class="string">&quot;PdmsLibraryCommandBar&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件加载时的入口函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params">ServiceManager serviceManager</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 命令管理器</span></span><br><span class="line">            CommandManager commandManager = (CommandManager)serviceManager.GetService(<span class="keyword">typeof</span>(CommandManager));</span><br><span class="line">            <span class="comment">// 命令栏管理器</span></span><br><span class="line">            CommandBarManager commandBarManager = (CommandBarManager)serviceManager.GetService(<span class="keyword">typeof</span>(CommandBarManager));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义自定义命令</span></span><br><span class="line">            DisplayCommand displayCommand = <span class="keyword">new</span> DisplayCommand();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将自定义命令添加到命令管理器中(非必须)</span></span><br><span class="line">            commandManager.Commands.Add(displayCommand);</span><br><span class="line">            <span class="comment">// 在命令栏集合中添加一个新的命令栏</span></span><br><span class="line">            CommandBar commandBar = commandBarManager.CommandBars.AddCommandBar(AppCommandBarName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向工具库集合中添加一个新的按钮</span></span><br><span class="line">            ButtonTool button = commandBarManager.RootTools.AddButtonTool(displayCommand.Key,<span class="string">&quot;Button&quot;</span>,<span class="literal">null</span>,displayCommand);</span><br><span class="line">            <span class="comment">// 在新添加的命令栏上添加这个按钮</span></span><br><span class="line">            commandBar.Tools.AddTool(button.Key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pdms退出时的回调函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="载入插件"><a href="#载入插件" class="headerlink" title="载入插件"></a>载入插件</h4><ol><li><p>选择解决方案<strong>重新生成解决方案</strong>，保证没有语法错误，生成动态链接库</p></li><li><p>在资源管理器中，打开生成的<code>dll</code>文件目录，例如：<code>D:/Codes/PdmsLibrary/bin/Debug/net35</code>，复制资源管理器地址栏地址</p></li><li><p>打开Pdms安装路径，找到<code>DesignAddins.xml</code>文件，添加如下内容：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ArrayOfString</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在最下面添加如下内容 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个路径指向D:/Codes/PdmsLibrary/bin/Debug/net35/PdmsLibrary.dll文件，省略.dll后缀; 这个路径可以是绝对路径或相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>D:/Codes/PdmsLibrary/bin/Debug/net35/PdmsLibrary<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ArrayOfString</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>成功载入我们写好的自定义插件后，启动Pdms程序就可以看到工具栏上多了一个名为&quot;<code>Button</code>&quot;的按钮，点击按钮弹窗显示：&quot;Hello World For Pdms!&quot;</p></li></ol><h2 id="一键切换Pdms版本"><a href="#一键切换Pdms版本" class="headerlink" title="一键切换Pdms版本"></a>一键切换Pdms版本</h2><blockquote><p>这里可以体现使用.NET CORE新的<code>.csproj</code>文件格式的优点</p></blockquote><ol><li><p>在项目的解决方案文件目录下新建名为<code>directory.build.props</code>文件，名为<a href="https://learn.microsoft.com/zh-cn/visualstudio/msbuild/customize-by-directory?view=vs-2022">directory.build.props</a>会被MSBuild自动加载</p></li><li><p>在解决方案下新建名为<code>solution items</code>的解决方案文件夹，并添加现有项将<code>directory.build.props</code>文件添加进来</p></li><li><p>将<code>directory.build.props</code>文件修改为如下内容：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个名为PdmsVersion的变量表示Pdms版本，需同packages下目录同名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PdmsVersion</span>&gt;</span>PDMS12.1.SP2<span class="tag">&lt;/<span class="name">PdmsVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个名为PdmsVersionForDefine的变量值为 将Pdms版本中的点替换为下划线 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PdmsVersionForDefine</span>&gt;</span>$(PdmsVersion.Replace(&quot;.&quot;,&quot;_&quot;))<span class="tag">&lt;/<span class="name">PdmsVersionForDefine</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 将PdmsVersionForDefine的值进行宏定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DefineConstants</span>&gt;</span>$(PdmsVersionForDefine)<span class="tag">&lt;/<span class="name">DefineConstants</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ProjectGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打开<code>.csproj</code>文件，将<code>PDMS.12.1.SP2</code>替换为<code>$(PdmsVersion)</code>，后续添加新的Pdms的dll引用版本位置也需要替换为<code>$(PdmsVersion)</code>。当前修改内容如下：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Aveva.ApplicationFramework&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>..\packages\$(PdmsVersion)\Aveva.ApplicationFramework.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;Aveva.ApplicationFramework.Presentation&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>..\packages\$(PdmsVersion)\Aveva.ApplicationFramework.Presentation.dll<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>现在只要维护<code>PdmsVersion</code>的值就能一键切换Pdms的版本了，同时如果在代码中存在版本的个性化差异，可通过条件编译实现差异</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> PDMS12.1.SP2</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;现在是PDMS12.1.SP2版本&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> PDMS12_1_SP4</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;现在是PDMS12.1.SP3版本&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="调试插件程序"><a href="#调试插件程序" class="headerlink" title="调试插件程序"></a>调试插件程序</h2><div class="note warning flat"><p>插件是运行在Pdms软件上，而不是独立运行的，因此，如果需要调试程序，需要附加到进程才能调试;</p></div><ul><li><p>插件是运行在Pdms软件上，而不是独立运行的，因此，如果需要调试程序，需要附加到进程才能调试;</p></li><li><p>程序的运行速度很快，为了进行调试命中断点可通过如下方式阻塞程序运行</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params">ServiceManager serviceManager</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在插件的入口函数处，通过MessageBox阻塞程序的运行</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        具体做法：</span></span><br><span class="line"><span class="comment">            1. 在入口函数通过弹窗阻塞程序往下运行，在弹窗的下面打上断点</span></span><br><span class="line"><span class="comment">            2. 将pdms附加到vs进程</span></span><br><span class="line"><span class="comment">            3. 关闭弹窗，即可发现命中断点</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        附加进程：</span></span><br><span class="line"><span class="comment">            1. 运行pdms</span></span><br><span class="line"><span class="comment">            2. 点击vs中的调试菜单</span></span><br><span class="line"><span class="comment">            3. 选择附加到进程</span></span><br><span class="line"><span class="comment">            4. 在可用进程中找到名为 des.exe 的进程点击附加 (可使用筛选进程)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    MessageBox.Show(<span class="string">&quot;Wait&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;AVEVA PDMS（&lt;code&gt;Plant Design Management System&lt;/code&gt;）是一种</summary>
      
    
    
    
    <category term="Pdms" scheme="http://bootree.cn/categories/Pdms/"/>
    
    
    <category term=".NET二次开发" scheme="http://bootree.cn/tags/NET%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux可视化界面配置</title>
    <link href="http://bootree.cn/2024/07/08/Linux/Linux%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
    <id>http://bootree.cn/2024/07/08/Linux/Linux%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE/</id>
    <published>2024-07-08T06:55:10.000Z</published>
    <updated>2024-07-09T12:14:20.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装可视化界面"><a href="#安装可视化界面" class="headerlink" title="安装可视化界面"></a>安装可视化界面</h2><ol><li><p>更新系统软件包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>安装XRDP</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xrdp</span><br></pre></td></tr></table></figure></li><li><p>安装桌面环境（<code>Xfce</code>）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xfce4</span><br><span class="line">sudo apt install xfce4-goodies</span><br></pre></td></tr></table></figure></li><li><p>配置XRDP使用Xfce</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> xfce4-session &gt; ~/.xsession</span><br></pre></td></tr></table></figure></li><li><p>重启XRDP服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart xrdp</span><br></pre></td></tr></table></figure></li></ol><h2 id="在Windows上使用远程桌面连接"><a href="#在Windows上使用远程桌面连接" class="headerlink" title="在Windows上使用远程桌面连接"></a>在Windows上使用远程桌面连接</h2><ol><li><p>打开远程桌面连接：在Windows上，按<code>Win + R</code>，输入<code>mstsc</code>并回车，或者通过开始菜单搜索“远程桌面连接”。</p></li><li><p>输入Linux主机的IP地址：在“计算机”字段中输入Linux主机的IP地址，然后点击“连接”。</p></li><li><p>输入Linux用户名和密码：在提示时输入您的Linux用户名和密码。</p></li><li><p>开始远程桌面会话：连接成功后，您应该会看到Linux桌面环境。</p></li></ol><div class="note wanring flat"><p>其他注意事项</p></div><ul><li><p>确保Linux防火墙允许3389端口的通信（这是XRDP使用的默认端口）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 3389</span><br></pre></td></tr></table></figure></li><li><p>如果使用其他桌面环境（如GNOME、KDE等），需相应地配置<code>~/.xsession</code>文件。</p></li><li><p>如果连接失败，检查XRDP服务是否正常运行：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status xrdp</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建新用户账户"><a href="#创建新用户账户" class="headerlink" title="创建新用户账户"></a>创建新用户账户</h2><blockquote><p>某些应用使用root管理员账户会出现警告，例如<code>vscode</code>。因此需要创建一个其他账户</p></blockquote><ol><li><p>使用root权限登录：首先，请确保您以root用户或具有sudo权限的用户身份登录到Linux系统。</p></li><li><p>打开终端：打开终端应用程序，您将在其中执行以下命令。</p></li><li><p>创建新用户：使用以下命令创建一个名为 lcm 的新用户：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser lcm</span><br></pre></td></tr></table></figure></li><li><p>设置密码：输入新用户的密码，然后确认。</p></li><li><p>选择是否添加用户信息：您可以选择是否输入关于新用户的其他信息。如果不需要，可以直接按回车跳过。</p></li><li><p>确认创建：系统会显示确认信息，告诉您新用户是否已成功创建。</p></li></ol><h3 id="添加管理员权限-可选"><a href="#添加管理员权限-可选" class="headerlink" title="添加管理员权限(可选)"></a>添加管理员权限(可选)</h3><blockquote><p>如果您希望让 <code>lcm</code> 用户拥有<code>sudo</code>权限（管理员权限），可以执行以下步骤：</p></blockquote><ol><li><p>将 lcm 用户添加到sudo组：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG sudo lcm</span><br></pre></td></tr></table></figure></li><li><p>验证sudo权限：</p><ol><li><p>注销并重新登录 lcm 用户。</p></li><li><p>运行一些需要sudo权限的命令来验证权限是否生效：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>&emsp;&emsp;通过以上步骤，您应该已经成功创建了名为 lcm 的新用户，并且可以选择是否将其提升为具有管理员权限的用户。请按照您的需求和系统安全策略来设置新用户的权限。</p><h2 id="解决XFCE桌面无法显示中文问题"><a href="#解决XFCE桌面无法显示中文问题" class="headerlink" title="解决XFCE桌面无法显示中文问题"></a>解决XFCE桌面无法显示中文问题</h2><blockquote><p>在使用XRDP远程桌面连接到Linux的XFCE桌面时，可能会遇到中文无法显示的问题。这通常是由于语言环境设置或字体配置不正确所致。以下是一些可能的解决方法：</p></blockquote><ol><li><p>检查语言环境设置：确保您的Linux系统已正确设置中文语言环境。可以通过以下步骤检查和设置：</p><ul><li><p>打开终端，输入以下命令编辑配置文件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/environment</span><br></pre></td></tr></table></figure></li><li><p>在文件中添加以下内容，设置正确的语言环境（例如设置为简体中文）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装中文语言包：如果系统缺少中文语言包，可能会导致无法切换到中文环境。您可以尝试安装中文语言包并重新配置语言环境：</p><ul><li><p>安装中文语言包：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install language-pack-zh-hans</span><br></pre></td></tr></table></figure></li><li><p>然后重新配置语言环境：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure></li><li><p>在交互式界面中选择zh_CN.UTF-8作为系统默认的语言环境，并设置为默认值。</p></li></ul></li><li><p>安装和配置中文字体：确保系统中安装了适当的中文字体。您可以安装一些常用的中文字体，如文泉驿微米黑或思源宋体，并在XRDP会话中配置使用这些字体。</p><ul><li><p>在终端中安装中文字体（以文泉驿微米黑为例）：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install fonts-wqy-microhei</span><br></pre></td></tr></table></figure></li><li><p>编辑XRDP会话的启动文件（通常是<code>~/.xsession</code>或<code>~/.xsessionrc</code>）：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.xsessionrc</span><br></pre></td></tr></table></figure></li><li><p>然后，在XRDP会话配置中设置使用这些字体。在.xsessionrc文件中，添加设置字体的行：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line"><span class="built_in">export</span> GTK_FONT_NAME=<span class="string">&quot;WenQuanYi Micro Hei&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查和修复locale设置：可能还需要检查当前用户的locale设置是否正确。您可以在命令行中执行以下命令来查看和修改locale设置：</p><ul><li><p>查看当前locale设置：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale</span><br></pre></td></tr></table></figure></li><li><p>如果需要，可以使用以下命令修改locale设置：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-locale LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure></li><li><p>确认设置是否成功</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale -a</span><br></pre></td></tr></table></figure></li><li><p>重新配置语言环境：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启XRDP服务：在修改配置后，确保重新启动XRDP服务以使更改生效：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure></li><li><p>调整XRDP设置：如果上述方法仍然无效，您可以尝试调整XRDP的配置文件，以确保正确配置了字体和输入法设置。XRDP的配置文件通常位于&#x2F;etc&#x2F;xrdp目录中，可以尝试编辑xrdp.ini文件来调整相关设置。</p></li></ol><h2 id="安装Google拼音输入法"><a href="#安装Google拼音输入法" class="headerlink" title="安装Google拼音输入法"></a>安装Google拼音输入法</h2><p>&emsp;&emsp;首先fcitx和ibus是不能共存的，两者只能装其一，所以安装其中一个时最好先使用sudo apt purge命令卸载。</p><blockquote><p>卸载fcitx：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge fcitx*</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><blockquote><p>卸载ibus</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge ibus*</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><ol><li><p>安装Google拼音输入法</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx-googlepinyin</span><br></pre></td></tr></table></figure></li><li><p>配置Fcitx输入法：</p><ul><li><p>设置环境变量：编辑~&#x2F;.xinputrc文件，设置Fcitx为默认输入法：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.xinputrc</span><br></pre></td></tr></table></figure></li><li><p>在文件中添加如下内容</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use Fcitx</span></span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=<span class="string">&quot;fcitx&quot;</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=<span class="string">&quot;fcitx&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>保存并退出</p></li></ul></li><li><p>重新登录或重启系统：为了使更改生效，您需要重新登录或重启系统。</p></li><li><p>启动Fcitx配置工具：在终端中输入以下命令启动Fcitx配置工具：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx-configtool</span><br></pre></td></tr></table></figure></li><li><p>启动Fcitx输入法： </p><ul><li><p>启动Fcitx输入法框架：可以在终端中启动Fcitx,您可以将此命令添加到您的桌面环境的启动项中，以便在每次登录时自动启动Fcitx。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx &amp;</span><br></pre></td></tr></table></figure></li><li><p>切换输入法：您可以使用快捷键（默认是<code>Ctrl+Space</code>）来切换输入法。如果Fcitx正在运行，您应该能够在输入文本时看到输入法切换的提示。</p></li></ul></li></ol><h2 id="安装部分应用"><a href="#安装部分应用" class="headerlink" title="安装部分应用"></a>安装部分应用</h2><h3 id="VsCode"><a href="#VsCode" class="headerlink" title="VsCode"></a>VsCode</h3><blockquote><p>推荐采用非root用户操作，root用户才运行vscode时会警告</p></blockquote><ol><li><p>下载VsCode的<code>.deb</code>包：访问<a href="https://code.visualstudio.com/">VS Code官网</a>，下载适用于Debian&#x2F;Ubuntu的.deb安装包。</p></li><li><p>安装VS Code：打开终端，导航到下载目录，然后运行以下命令安装：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i &lt;下载的.deb文件名&gt;</span><br><span class="line">sudo apt-get install -f   <span class="comment"># 安装可能缺少的依赖项</span></span><br></pre></td></tr></table></figure></li><li><p>启动VS Code：在终端中输入code启动VS Code，或者在应用程序菜单中搜索并打开VS Code。</p></li><li><p>默认安装路径，VS Code通常安装在<code>/usr/share/code</code>目录中。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> code</span><br></pre></td></tr></table></figure></li><li><p>创建桌面快捷方式：将<code>/usr/share/applications</code>目录下的<code>code.desktop</code>文件发送到桌面即可</p></li></ol><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><ol><li><p>安装火狐浏览器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install firefox</span><br></pre></td></tr></table></figure></li><li><p>启动Firefox：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firefox</span><br></pre></td></tr></table></figure></li><li><p>创建桌面快捷方式：将<code>/usr/share/applications</code>目录下的<code>firefox.desktop</code>文件发送到桌面即可</p></li></ol><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><p>安装Git</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></li><li><p>确认安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><ol><li><p>安装NodeJs，Node.js 可以通过 NodeSource 的官方软件包源安装。首先，您需要安装 curl 和 gnupg，这些工具可以帮助下载并验证软件包。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install curl gnupg</span><br></pre></td></tr></table></figure></li><li><p>添加 NodeSource 软件包源：下载并添加 NodeSource 的 PPA (Personal Package Archive) 软件包源。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -</span><br></pre></td></tr></table></figure></li><li><p>安装NodeJs和npm</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure></li><li><p>验证安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure></li><li><p>设置国内镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最新地址 淘宝 NPM 镜像站喊你切换新域名啦!</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复官方镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure></li><li><p>查看镜像使用状态</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></li><li><p>安装cnpm</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> npm install -g cnpm --registry=https://registry.npmmirror.com</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注册模块镜像</span></span><br><span class="line">npm <span class="built_in">set</span> registry https://registry.npmmirror.com  </span><br><span class="line"></span><br><span class="line">// node-gyp 编译依赖的 node 源码镜像  </span><br><span class="line">npm <span class="built_in">set</span> disturl https://npmmirror.com/dist </span><br><span class="line"></span><br><span class="line">// 清空缓存  </span><br><span class="line">npm cache clean --force  </span><br><span class="line"></span><br><span class="line">// 安装cnpm  </span><br><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com  </span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装可视化界面&quot;&gt;&lt;a href=&quot;#安装可视化界面&quot; class=&quot;headerlink&quot; title=&quot;安装可视化界面&quot;&gt;&lt;/a&gt;安装可视化界面&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;更新系统软件包&lt;/p&gt;
 &lt;figure class=&quot;highlight bas</summary>
      
    
    
    
    <category term="Linux" scheme="http://bootree.cn/categories/Linux/"/>
    
    
    <category term="Settings" scheme="http://bootree.cn/tags/Settings/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 13几何图形和图画</title>
    <link href="http://bootree.cn/2024/07/07/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/13%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E5%92%8C%E5%9B%BE%E7%94%BB/"/>
    <id>http://bootree.cn/2024/07/07/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/13%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E5%92%8C%E5%9B%BE%E7%94%BB/</id>
    <published>2024-07-07T02:05:07.000Z</published>
    <updated>2024-07-09T13:34:36.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路径和几何图形"><a href="#路径和几何图形" class="headerlink" title="路径和几何图形"></a>路径和几何图形</h2><p>&emsp;&emsp;<code>Path</code>类能够包含任何简单形状、多组形状以及更复杂的要素，如曲线。<code>Path</code>类提供了<code>Data</code>属性，该属性接受一个<code>Geometry</code>对象，该对象定义路径包含的一个活多个图形。不能直接创建Geometry对象，因为Geometry时抽象类，而是需要使用下表的7可派生类中的一个进行创建。</p><center>几何图形类</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>LineGeometry</td><td>代表直线，该几何图形相当于Line形状</td></tr><tr><td>RectangleGeometry</td><td>代表矩形（可以具有圆形拐角），该几何图形相当于Rectangle形状</td></tr><tr><td>EllipseGeometry</td><td>代表椭圆，该图形相当于Ellipse形状</td></tr><tr><td>GeometryGroup</td><td>为单个路径添加任意多个Geometry对象，使用EvenOdd活NonZero填充规则来确定要填充的区域</td></tr><tr><td>CombinedGeometry</td><td>将两个几何图形合并为一个形状。可使用CombineMode属性选择如何组合两个几何图形</td></tr><tr><td>PathGeometry</td><td>代表更复杂的由弧线、曲线以及直线构成的图形，并且既可以时闭合的，也可以不是闭合的</td></tr><tr><td>StreamGeometry</td><td>相当于PathGeometry的只读的轻量级类。StreamGeometry图形可节省内存，因为它不在内存中同时保存路径的所有单个分段。并且这类图形一旦创建就不能再修改</td></tr></tbody></table><blockquote><p>路径和几何图形之间的区别?</p></blockquote><p>&emsp;&emsp;几何图形定义形状，而路径用于绘制形状。因此，Geometry 对象为形状定义了坐标和尺寸等细节，而Path 对象提供了用于绘制形状的 Stroke 和 Fi 画刷。Path 类还提供了继承自 UIElement 基础架构的特性，如鼠标和键盘处理</p><p>&emsp;&emsp;然而，几何图形类并不像看起来那么简单。原因之一是它们都继承自Freezable 类(通过Geometry 基类)，所以支持更改通知。因此，如果使用几何图形创建路径，然后修改几何图形，就会自动被重新绘制路径。还可以使用几何图形类来定义能够通过画刷应用的图画，从而为绘制不需要 Path 类所具有的用户交互功能的复杂内容提供一种简单方法。</p><h3 id="直线、矩形和椭圆图形"><a href="#直线、矩形和椭圆图形" class="headerlink" title="直线、矩形和椭圆图形"></a>直线、矩形和椭圆图形</h3><p>&emsp;&emsp;<code>LineGeometry</code>、<code>RectangleGeometry</code>以及<code>EllipseGeometry</code>类直接对应在<code>Line</code>、<code>Rectangle</code>以及<code>Ellipse</code>形状，例如，可将下面使用Rectangle华丽的标记：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>转换为下面使用Path元素的标记：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0 100,50&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;唯一的实质性区别是 Rectangle 形状使用的是 Height和 Width 值，而 RectangleGeometry 图形使用4个数值来描述矩形的尺寸和位置。前两个数值描述左上角的X和Y坐标，而后两个数值设置矩形的宽度和高度。可在(0，0)点开始绘制矩形，从而得到与普通的 Rectangle 元素相同的效果,或者使用不同的值偏移矩形。RectangleGeometry类还提供了 RadiusX和 RadiusY 属性这两个属性用于圆滑拐角。</p><blockquote><p>类似地，可将下面的Line形状转变为LineGeometry图形：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Line</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">X1</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Y1</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">X2</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Y2</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LineGeometry</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">EndPoint</span>=<span class="string">&quot;10,100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>类似地，可将下面的Ellipse形状转变为EllipseGeometry图形</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Left&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">RadiusX</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">RadiusY</span>=<span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">Center</span>=<span class="string">&quot;50,25&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>两个半径值只是宽度和高度值的一般。还可以使用<code>Center</code>属性偏移椭圆的位置</p></div><h3 id="使用GeometryGroup组合形状"><a href="#使用GeometryGroup组合形状" class="headerlink" title="使用GeometryGroup组合形状"></a>使用GeometryGroup组合形状</h3><p>&emsp;&emsp;组合图形最简单的方法是使用 GeometryGroup对象，该对象在内部嵌套其他 Geometry 类的派生类对象。下面的示例在一个正方形的旁边放置了一个椭圆:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0 100,100&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;150,50&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusX</span>=<span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusY</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这种做法用一个元素替代了两个元素，这一位这降低了用户界面的开销。通常，使用数量更少的较复杂几何图形元素的窗口比具有大量较简单几何图形元素的窗口的性能更高。</p><p>&emsp;&emsp;当然，将多个几何图形组合成单独的 Path 元素也存在缺点--不能单独为不同的形状执行事件处理。反而，Path元素将引发所有的鼠标事件。不过，仍可以独立地控制嵌套的RectangleGeometry 和EllipseGeometry 对象，从而改变整个路径。例如，每个几何图形都提供了Transform 属性，可使用该属性拉伸、扭曲或旋转路径的相应部分。</p><div class="note info flat"><p>几何图形的另一个优点时可在几个独立的Path元素中重用相同的几何图形。这不需要使用代码——只需要在Resources几何中定义几何几何图形，并使用StaticExtension活DynamicExtension标记扩展在路径中进行引用。</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GeometryGroup</span> <span class="attr">x:Key</span>=<span class="string">&quot;Geometry&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0 100,100&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;150,50&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">RadiusX</span>=<span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">RadiusY</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Data</span>=<span class="string">&quot;&#123;StaticResource Geometry&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当形状相互交叉时，GeometryGroup将更有趣。这时不能将图画简单地作为固定形状的组合对待,GeometryGroup 使用 FiRule 属性(该属性可设置为 EvenOdd 或 Nonzero)决定填充哪些形状。如果采用如下方式改变前面显示的标记，在正方形的上面放置椭圆，分析一下会出现什么情况:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240707111137.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GeometryGroup</span> <span class="attr">FillRule</span>=<span class="string">&quot;EvenOdd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0 100,100&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;50,50&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusX</span>=<span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusY</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用CombinedGeometry融合几何图形"><a href="#使用CombinedGeometry融合几何图形" class="headerlink" title="使用CombinedGeometry融合几何图形"></a>使用CombinedGeometry融合几何图形</h3><p>&emsp;&emsp;对于通过基本图元(矩形、椭圆和直线)构建复杂形状，GeometryGroup类是非常有价值的工具。但它也有明显的局限性。如果是绘制形状，并在其内部“减去”另一个形状来创建新的形状，GeometryGroup 类可以工作得很好。然而，如果形状的边界相互交叉，就很难得到所希望的结果了，并且如果希望移除形状的一部分，GeometryGroup 类就不能提供任何帮助了。</p><p>&emsp;&emsp;CombinedGeometry 类专门用于组合重叠到一起并且不相互包含的形状。与GeometryGroup类不同，CombinedGeometry 类只使用两个几何图形，通过 Geometry1 和 Geometry2 属性提供这两个几何图形。CombinedGeometry类没有包含FilRule属性，反而具有功能更强大的GeometryCombineMode 属性，该属性可以使用4个值中的一个，下表列出了这4个值。</p><center>GeometryCombineMode枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Union</td><td>创建包含两个几何图形所有区域的形状</td></tr><tr><td>Intersect</td><td>创建包含两个几何图形共有区域的形状</td></tr><tr><td>Xor</td><td>创建包含两个图形非共有区域的形状。换句话说，就像先合并形状（使用Union），再溢出共有部分（使用Intersect）那样</td></tr><tr><td>Exclude</td><td>创建的形状包含第一个几何图形的所有部分，但不包含第二个几何图形的区域</td></tr></tbody></table><p>&emsp;&emsp;下面的示例演示中如何使用<code>GeometryCombineMode.Union</code>合并两个形状，从而创建包含所有区域的形状：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240707112502.png" width="80%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CombinedGeometry</span> <span class="attr">GeometryCombineMode</span>=<span class="string">&quot;Union&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">CombinedGeometry.Geometry1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0 100,100&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">CombinedGeometry.Geometry1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">CombinedGeometry.Geometry2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;85,50&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusX</span>=<span class="string">&quot;65&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">RadiusY</span>=<span class="string">&quot;35&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">CombinedGeometry.Geometry2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">CombinedGeometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>CombinedGeometry 类只能合并两个形状，这看起来可能是一个重大的局限，但实际上并非如此。可构建包含许多不同几何图形的形状--只需要使用嵌套的CombinedGeometry对象即可。例如，一个 CombinedGeometry 对象可组合另外两个CombinedGeometry 对象，而这两个CombinedGeometry对象自身可能又组合了多个几何图形。采用这种技术，可构建非常复杂的形状。</p></div><center>🈲禁止标志</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240707113639.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CombinedGeometry</span> <span class="attr">GeometryCombineMode</span>=<span class="string">&quot;Union&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">CombinedGeometry.Geometry1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">CombinedGeometry</span> <span class="attr">GeometryCombineMode</span>=<span class="string">&quot;Exclude&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">CombinedGeometry.Geometry1</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;50,50&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">RadiusX</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">RadiusY</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">CombinedGeometry.Geometry1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">CombinedGeometry.Geometry2</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;50,50&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">RadiusX</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">RadiusY</span>=<span class="string">&quot;40&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">CombinedGeometry.Geometry2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">CombinedGeometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">CombinedGeometry.Geometry1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">CombinedGeometry.Geometry2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;44,5 10,90&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RectangleGeometry.Transform</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">&quot;45&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">CenterX</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">                                         <span class="attr">CenterY</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">RectangleGeometry.Transform</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">RectangleGeometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">CombinedGeometry.Geometry2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">CombinedGeometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>CombinedGeometry 对象不会影响用于为形状着色的填充画刷或笔画画刷,这些细节由路径设置。因此，如果希望为路径的各部分使用不同的颜色，就需要创建彼此独立的Path 对象。</p></div><h3 id="使用PathGeometry绘制曲线和直线"><a href="#使用PathGeometry绘制曲线和直线" class="headerlink" title="使用PathGeometry绘制曲线和直线"></a>使用PathGeometry绘制曲线和直线</h3><p>&emsp;&emsp;PathGeometry是功能超级强大的图形，它能绘制其他所有几何图形能够绘制的内容，也能绘制其他所有几何图形所不能绘制的内容。它的唯一缺点是语法比较长(并且在某种程度上更加复杂)。</p><p>&emsp;&emsp;每个 PathGeometry 对象都是由一个或多个 PathFigure 对象构建的(存储在 PathGeometry.Figures集合中)。每个 PathFigure 对象是一系列相互连接的直线和曲线，可闭合也可不闭合。如果图形中最后一条直线的终点连接到了第一条直线的起点，那么图形就是闭合的。</p><center>PathFigure属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>StartPoint</td><td>指示从何处开始绘制图形线条的Point对象</td></tr><tr><td>Segments</td><td>用于绘制图形的PathSegment对象的集合</td></tr><tr><td>IsClosed</td><td>如果为ture，WPF添加直线来连接起点和终点（假设它们不是同一个点）</td></tr><tr><td>IsFilled</td><td>如果true，就使用Path.Fill画刷填充图形内部的区域</td></tr></tbody></table><p>&emsp;&emsp;PathFigure 对象是由包含大量线段的不间断线条绘制的形状。然而，技巧是有几种类型的线段，&quot;它们都继承自 PathSegment类。其中一些类比较简单，如绘制直线的 LineSegment 类。而另外一些类(如 BezierSegment 类)较为复杂，可以绘制曲线。</p><center>PathSegment类</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>LineSegment</td><td>在两点之间创建直线</td></tr><tr><td>ArcSegment</td><td>在两点之间创建椭圆形弧线</td></tr><tr><td>BezierSegment</td><td>在两点之间创建贝塞尔曲线</td></tr><tr><td>QuadraticBezierSegment</td><td>创建形式更简单的贝塞尔曲线，只有一个控制点而不是两个控制点，并且计算速度更快</td></tr><tr><td>PolyLineSegment</td><td>创建一系列直线。可使用多个LineSegment对象得到相同的效果，但使用单个PolyLineSegment对象更简明</td></tr><tr><td>PolyBezierSegment</td><td>创建一系列贝塞尔曲线</td></tr></tbody></table><h4 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h4><p>&emsp;&emsp;使用 <code>LineSegment </code>和 <code>PathGeometry</code>类创建简单的线条非常容易。只需要设置 <code>StartPoint</code>属性，并为线条中的每部分增加一条 <code>LineSegment</code> 直线段。<code>LineSegment.Point</code> 属性标识每条线段的结束点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PathFigure</span> <span class="attr">IsClosed</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">StartPoint</span>=<span class="string">&quot;10,100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">LineSegment</span> <span class="attr">Point</span>=<span class="string">&quot;100,100&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">LineSegment</span> <span class="attr">Point</span>=<span class="string">&quot;100,50&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PathFigure</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>每个PathGeometry可包含任意数量的PathFigure对象。这意味着可创建几个相互独立的闭合或不闭合图形，作为同一路径的一部分</p></div><h4 id="弧线"><a href="#弧线" class="headerlink" title="弧线"></a>弧线</h4><p>&emsp;&emsp;和使用LineSegment 类时一样，使用ArcSegment.Point 属性指定弧线段终点。不过，PathFigure 从起点(或前一条线段的终点)向弧线的终点绘制一条曲线。这条弯曲的连接线实际是椭圆边缘的一部分。</p><p>&emsp;&emsp;显然，为了绘制弧线，只有终点是不够的，因为有许多曲线(一些弯曲程度较缓和，另一些弯曲的程度更大)能够连接这两点。还需要指定用于绘制弧线的假想椭圆的尺寸。可使用ArcSegment.Size 属性完成该工作，该属性提供了椭圆的X半径和 Y半径。假想的椭圆越大,边缘曲线就越缓和。</p><div class="note wanring flat"><p>对于任意两点，实际上存在最大尺寸和最小尺寸的椭圆。当创建的椭圆足够大，以至于绘制的线段看起来像直线时，这时的椭圆就具有最大尺寸。再增大尺寸就没有效果了。当椭圆足够小，以至于使用整个半圆连接两点，这时椭圆的尺寸就最小。再缩小尺寸也没有效果</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span> <span class="attr">StrokeThickness</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PathFigure</span> <span class="attr">IsClosed</span>=<span class="string">&quot;False&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">StartPoint</span>=<span class="string">&quot;10,100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ArcSegment</span> <span class="attr">Point</span>=<span class="string">&quot;250,150&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Size</span>=<span class="string">&quot;200,300&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PathFigure</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;即使提供了起点、终点以及椭圆的尺寸，也仍不具备明确绘制弧线所需的全部信息，如果绘制椭圆上的两点，显然可以由两种方式连接它们—通过沿着短边连接两点，或沿着长边连接两点。，<strong>可通过<code>ArcIsLargeArc.IsLargeArc</code>属性设置弧线的方向</strong></p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240708204346.png" width="30%"/><p>&emsp;&emsp;即使设置了方向，也还有一点需要明确——椭圆位于何处。设想绘制一条弧线连接左边的一点和右边的一点，并使用尽可能短的弧线。连接着两可点的曲线可被向下拉伸，然后向上拉伸；也可以翻转该弧线，从而先向上弯曲，然后现在弯曲。得到的弧线依赖于定义弧线的两点的顺序以及<code>ArcSegment.SweepDirection</code>属性，该属性可以时<code>Counterclockwise(逆时针 默认值)</code>活<code>Clockwise(顺时针)</code>。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240708204906.png" width="40%"/><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><p>&emsp;&emsp;贝塞尔曲线使用更复杂的数学公式连接两条线段，该公式包含的两个控制点决定了曲线的形状。实际上，贝塞尔曲线是每个矢量绘图程序都会创建的要素，因为它们非常灵活。只需要使用起点、终点和两个控制点，就可以创建出令人称奇的各种光滑曲线(包括回线(loop))。下图显示了一条经典的贝塞尔曲线。两个小圆指示控制点，而虚线将每个控制点连接到受该控制点影响最大的线条端点。</p><p>&emsp;&emsp;即使不理解贝塞尔曲线的数学原理，也很容易“感觉”出贝塞尔曲线的工作原理。本质上，两个控制点时所有问题的关键。它们以两种方式影响曲线：</p><ul><li>在起点，贝塞尔曲线和从第一个控制点到起点之间的直线相切。在终点，贝塞尔曲线和连接终点与最后一个点的直线相切（在中间时曲线）</li><li>弯曲程度由两个控制点的距离决定。如果一个控制点更远，该控制点会更强地“拉”贝塞尔曲线</li></ul><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240708205818.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeThickness</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Canvas.Top</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">PathFigure</span> <span class="attr">IsClosed</span>=<span class="string">&quot;False&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">StartPoint</span>=<span class="string">&quot;10,10&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">BezierSegment</span> <span class="attr">Point1</span>=<span class="string">&quot;130,30&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">Point2</span>=<span class="string">&quot;40,140&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">Point3</span>=<span class="string">&quot;150,150&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">PathFigure</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PathGeometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Green&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeThickness</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeDashArray</span>=<span class="string">&quot;5 2&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Canvas.Top</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">LineGeometry</span> <span class="attr">StartPoint</span>=<span class="string">&quot;10,10&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">EndPoint</span>=<span class="string">&quot;130,30&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">LineGeometry</span> <span class="attr">StartPoint</span>=<span class="string">&quot;40,140&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">EndPoint</span>=<span class="string">&quot;150,150&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Fill</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeThickness</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Canvas.Top</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;130,30&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">Center</span>=<span class="string">&quot;40,140&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Path.Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="微语言几何图形"><a href="#微语言几何图形" class="headerlink" title="微语言几何图形"></a>微语言几何图形</h3><p>&emsp;&emsp;到目前为止看到的几何图形都比较简明，只用了少数几个点。更复杂的几何图形在概念上与此相同，只不过动辄就需要几百条线段。在复杂路径中定义每条直线、弧线以及曲线非常繁琐而且不是必需的--毕竟，复杂曲线可能由设计工具生成，而不是通过手工编写，所以保持标记的清晰性并不是最重要的。为此，WPF 创作人员为定义几何图形增加了一种更简明的替换语法，通过该语法可用更少的标记表示详细的图形。这种语法通常称为图形微语言(geometrymini-language)，并且由于应用于 Path 元素，因此有时也称为路径微语言</p><p>&emsp;&emsp;为理解微语言，需要认识到它在本质上是包含一系列命令的长字符串。这些命令由类型转换器读取，然后创建相应的几何图形。每个命令都是单独的字母，后面可选地跟随一些由空格分隔的数字信息(如x和Y坐标)。每个命令也使用空格与前面的命令隔开</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Data</span>=<span class="string">&quot;M 10,100 L 100,100 L 100,50 Z&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个路径使用一个包含4个命令的命令序列。第一个命令(M)创建PathFigure，并将起点设置为(10,100)。接下来的两个命令(L)创建线段。最后一个命令(Z)结束 PathFigure，并将 IsClosed属性设置为true。这个字符串中的逗号是可选的，同样，命令及其参数之间的空格也是可选的但在相邻的两个参数之间以及命令之间至少要保留一个空格。这意味着可以进一步精简语法，形成下面这种更难读的形式:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Path</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Data</span>=<span class="string">&quot;M10 100 L100 100 L100 50 Z&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><center>微语言图形命令</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>F</strong> value  (<code>FillRule</code>)</td><td>设置Geometry.FillRule属性。0表示EvenOdd，1表示NonZero。如果决定使用该命令，就必须将该命令放在字符串的开头</td></tr><tr><td><strong>M</strong> x,y  (<code>Move</code>)</td><td>为几何图形创建新的PathFigure对象，并设置其起点。该命令必须在其他命令之前使用，F命令除外。然而，也可在绘制序列期间使用该命令移动坐标系统的原点</td></tr><tr><td><strong>L</strong> x,y  (<code>Line</code>)</td><td>创建一条到指定点的LineSegment几何图形</td></tr><tr><td><strong>H</strong> x  (<code>HorizontalLine</code>)</td><td>使用指定的X值创建一条水平的LineSegment几何图形，并保持Y值不变</td></tr><tr><td><strong>V</strong> x  (<code>VerticalLine</code>)</td><td>使用指定的Y值创建一条垂直的LineSegment几何图形，并保持X值不变</td></tr><tr><td><strong>A</strong> radiusX,radiusY,degress,isLargeArc,isClockwise,x,y</td><td>创建一条到指定点的ArgSegment线段。指定描述弧线的椭圆半径、弧线旋转的度数，以及用原图设置IsLargeArc和SweepDirection属性的布尔标志</td></tr><tr><td>C x1,y1,x2,y2,x,y</td><td>创建到指定点的贝塞尔曲线，使用点(x1,y1)和(x2,y2)作为控制点</td></tr><tr><td>Q x1,y1,x,y</td><td>创建到指定点的二次贝塞尔曲线，使用一个控制点(x1,y1)</td></tr><tr><td>S x2,y2,x,y</td><td>通过将前一条贝塞尔曲线的第二个控制点作为新建贝塞尔曲线的第一个和控制点，从而创建一条光滑的贝塞尔曲线</td></tr><tr><td>Z</td><td>结束当前 PathFigure对象，并将IsClosed属性设置为true。如果不希望将IsClosed属性设置为tue,就不必使用该命令--如果希望开始一个新的 PathFigure 对象或结束字符串，只需使用M命令</td></tr></tbody></table><div class="note warning flat"><p>在微语言几何图形中另有一个技巧。如果希望命令的参数值相对于前一个点，而不是使用绝对坐标进行计算，可使用小写的命令。</p></div><h3 id="使用几何图形进行裁剪"><a href="#使用几何图形进行裁剪" class="headerlink" title="使用几何图形进行裁剪"></a>使用几何图形进行裁剪</h3><p>&emsp;&emsp;正如您所看到的，几何图形是创建形状的最强大方法。然而，几何图形不仅可用于 Path元素，也可为任何需要的地方提供抽象的图形定义(而不是在窗口中绘制真实的具体形状)。<br>&emsp;&emsp;几何图形的另一个用途是用于设置Clip属性，所有元素都提供了该属性。可以通过Clip属性约束元素的外边界以符合特定的几何图形。可使用Cip 属性创建大量的特殊效果。尽管该属性通常用于修剪 1mage 元素中的图像内容，但也可将 Clip 属性应用于任何元素。唯一的限制是，如果确实希望看到一些内容--而不仅是用处不大的单独曲线和线段，需要使用闭合的几何图形。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240708221926.png" width="50%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GeometryGroup</span> <span class="attr">x:Key</span>=<span class="string">&quot;clipGeometry&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">FillRule</span>=<span class="string">&quot;Nonzero&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">RadiusX</span>=<span class="string">&quot;75&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">RadiusY</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Center</span>=<span class="string">&quot;100,150&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">RadiusX</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">RadiusY</span>=<span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Center</span>=<span class="string">&quot;200,150&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EllipseGeometry</span> <span class="attr">RadiusX</span>=<span class="string">&quot;75&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">RadiusY</span>=<span class="string">&quot;130&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">Center</span>=<span class="string">&quot;140,140&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">GeometryGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Clip</span>=<span class="string">&quot;&#123;StaticResource clipGeometry&#125;&quot;</span>&gt;</span>A button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Clip</span>=<span class="string">&quot;&#123;StaticResource clipGeometry&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Source</span>=<span class="string">&quot;Images/happyface.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用剪裁存在限制。设置的剪裁不会考虑元素的尺寸。换句话说，当改变窗口尺寸时，不管上图显示的按钮变大还是变小，剪裁区域仍保留原样，并显示按钮的不同部分。一种可能的解决方案是在 Viewbox 控件中封装元素，以便提供自动重新缩放功能。但这会导致所有内容都按比例地改变尺寸，包括希望改变尺寸的一些细节(剪裁区域和按钮表面)以及那些可能不希望改变的内容(按钮文本和绘制按钮边框的线条)。</p><h2 id="图画"><a href="#图画" class="headerlink" title="图画"></a>图画</h2><p>&emsp;&emsp;Geometry抽象类表示形状或路径。Drawing抽象类扮演了互补的角色，他表示2D图画(drawing)—换句话说，他包含了显示矢量图形活位图需要的所有信息。</p><center>图画类</center><table><thead><tr><th>类</th><th>说明</th><th>属性</th></tr></thead><tbody><tr><td>GeometryDrawing</td><td>封装一个几何图形，该几何图形具有填充它的画刷和绘制其边框的画笔</td><td>Geometry、Brush、Pen</td></tr><tr><td>ImageDrawing</td><td>封装一幅图像（通常是基于文件的位图图像），该图像具有定义图像边界的矩形</td><td>ImageSource、Rect</td></tr><tr><td>VideoDrawing</td><td>结合用于播放视频文件的媒体播放器和定义其边界的矩形</td><td>Player、Rect</td></tr><tr><td>GlyphRunDrawing</td><td>封装低级文本对象，即所谓的具有绘制用画刷的GlyphRun对象</td><td>GlyphRun、ForgroundBrush</td></tr><tr><td>DrawingGroup</td><td>组合各种类型的Drawing对象的集合。可使用DrawingGroup创建混合图画，并可使用它的一个属性一次为整个集合应用效果</td><td>BitmapEffect、BitmapEffectInput、Children、ClipGeometry、GuidelineSet、Opacity、OpacityMask、Transform</td></tr></tbody></table><h3 id="显示图画"><a href="#显示图画" class="headerlink" title="显示图画"></a>显示图画</h3><p>&emsp;&emsp;因为继承自 Drawing 的类不是元素，所以不能将它们放置到用户界面中。为了显示图画需要使用下表中列出的三个类中的一个。</p><center>用于显示图画的类</center><table><thead><tr><th>类</th><th>父类</th><th>说明</th></tr></thead><tbody><tr><td>DrawingImage</td><td>ImageSource</td><td>允许在Image元素中驻留图画</td></tr><tr><td>DrawingBrush</td><td>Brush</td><td>允许使用画刷封装图画，之后就可以用画刷绘制任何表面</td></tr><tr><td>DrawingVisual</td><td>Visual</td><td>允许在低级的格式化对象中放置图画。可视化对象并不具有真正元素的开销，但是如果实现了需要的基础结构，那么仍可以实现可视化对象</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DrawingGroup</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GeometryDrawing</span> <span class="attr">Brush</span>=<span class="string">&quot;Yellow&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">GeometryDrawing.Pen</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Pen</span> <span class="attr">Brush</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Thickness</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">GeometryDrawing.Pen</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">GeometryDrawing.Geometry</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0 100,100&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">GeometryDrawing.Geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">GeometryDrawing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">DrawingGroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;路径和几何图形&quot;&gt;&lt;a href=&quot;#路径和几何图形&quot; class=&quot;headerlink&quot; title=&quot;路径和几何图形&quot;&gt;&lt;/a&gt;路径和几何图形&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;Path&lt;/code&gt;类能够包含任何简单形状、多组形状以及更复杂</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 12形状、画刷和变换</title>
    <link href="http://bootree.cn/2024/07/04/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/12%E5%BD%A2%E7%8A%B6%E3%80%81%E7%94%BB%E5%88%B7%E5%92%8C%E5%8F%98%E6%8D%A2/"/>
    <id>http://bootree.cn/2024/07/04/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/12%E5%BD%A2%E7%8A%B6%E3%80%81%E7%94%BB%E5%88%B7%E5%92%8C%E5%8F%98%E6%8D%A2/</id>
    <published>2024-07-04T13:17:06.000Z</published>
    <updated>2024-07-07T02:05:31.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解形状"><a href="#理解形状" class="headerlink" title="理解形状"></a>理解形状</h2><p>&emsp;&emsp;在WPF用户界面中，绘制2D图形内容的最简单方法时使用形状（<code>Shape</code>）——专门用于表示简单的直线、椭圆、矩形以及多边形的一些类。从技术角度看，形状就是所谓的绘图图元（<code>Primitive</code>）。可组合这些基本元素来创建更复杂的图形</p><p>&emsp;&emsp;关于 WPF 中形状的最重要细节是，它们都继承自FrameworkElement类。因此，形状是元素。这样会带来许多重要的结果:</p><ul><li><strong>形状绘制自身</strong>：不需要管理无效的情况和绘图过程。例如，当移动内容、改变窗口尺寸或改变形状属性时，不需要手动重新绘制形状。</li><li><strong>使用与其他元素相同的方式组织形状</strong>：换句话说，可在任何布局容器中放置形状(尽管 Canvas 明显是最有用的容器，因为它允许在特定的坐标位置放置形状，当构建复杂的具有多个部分的图画时，这很重要)。</li><li><strong>形状支持与其他元素相同的事件</strong>：这意味着为了处理焦点、按下键盘、移动鼠标以及单击鼠标等，不必执行任何额外工作。可使用用于其他元素的相同事件集，并同样支持工具提示、上下文菜单和拖放操作。</li></ul><h3 id="Shape类"><a href="#Shape类" class="headerlink" title="Shape类"></a>Shape类</h3><p>&emsp;&emsp;每个形状都继承自抽象类<code>System.Windows.Shapes.Shape</code>。下图显示了形状类的继承层次。</p><center>WPF形状类</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240704214123.png" width="70%"/><p>&emsp;&emsp;相对来说，只有很少一部分类继承自<code>Shape</code> 类。<code>Line</code>、<code>Ellipse</code> 以及<code>Rectangle</code> 都很直观，<code>Polyline</code> 是一系列相互连接的直线,<code>Polygon</code> 是由一系列相互连接的直线形成的闭合图形。最后，<code>Path</code> 类功能强大，能将多个基本形状组合成单独的元素。</p><p>&emsp;&emsp;尽管<code>Shape</code>类自身不能执行任何工作，但它定义了少量的重要属性，如下所示：</p><center>Shape类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Fill</td><td>设置绘制形状表面（边框内的所有内容）的画刷对象</td></tr><tr><td>Stroke</td><td>设置绘制形状边缘（边框）的画刷对象</td></tr><tr><td>StrokeThickness</td><td>用设备无关单位设置边框的宽度</td></tr><tr><td>StrokeStartLineCap、StrokeEndLineCap</td><td>决定直线开始端和结束端边缘的轮廓。这些属性只影响<code>Line</code>、<code>Poyline</code>以及（在这些情况下）<code>Path</code>形状。所有其他形状都是闭合的，没有开始点和结束点</td></tr><tr><td>StrokeDashArray、StrokeDashOffset、StrokeDashCap</td><td>用于在形状周围创建点划线边框。可控制电划线的尺寸和频率，以及每条点划线开始端和结束端边缘的轮廓</td></tr><tr><td>StrokeLineJoin、StrokeMiterLimit</td><td>确定形状拐角的轮廓。从技术角度看，这些属性影响不同直线相遇的顶点，如矩形的拐角。对于没有拐角的形状，如<code>Line</code>和<code>Ellipse</code>，这些属性不起作用</td></tr><tr><td>Stretch</td><td>确定形状如何填充可用的区域。可使用该属性创建能够扩展以适合其容器的形状。还可为 HorizontalAlignment或 VerticalAlignmet 属性(这些属性继承自FrameworkElement 类)使用 Stretch 值强制形状在某个方向上扩展</td></tr><tr><td>DefiningGeometry</td><td>为形状提供好<code>Geometry</code>对象。<code>Geometry</code>对象描述了形状的坐标和尺寸，不包括<code>UIElement</code>类的相关内容，例如对键盘和鼠标事件的支持</td></tr><tr><td>GeometryTransform</td><td>可通过该属性应用<code>Transform</code>对象，改版了用于绘制形状的坐标系统，从而可扭曲、旋转活移动形状。当为图形应用动画时，变换特别有用</td></tr><tr><td>RenderedGeometry</td><td>提供描述最终的、已渲染好的图形的<code>Geomerty</code>对象</td></tr></tbody></table><blockquote><p>接下来的几节将分析 Rectangle、Ellipse、Line 以及 Polyline。同时，还将介绍以下基础知识</p></blockquote><ul><li>何改变形状的尺寸，以及如何在布局容器中组织形状。</li><li>如何控制填充复杂形状的哪个区域。</li><li>如何使用点划线和不同的线头终端(或称为“线帽”(cap))。</li><li>如何使形状边缘与像素边界整洁地对齐。</li></ul><h3 id="矩形和椭圆"><a href="#矩形和椭圆" class="headerlink" title="矩形和椭圆"></a>矩形和椭圆</h3><p>&emsp;&emsp;矩形和椭圆是两个最简单的形状。为创建矩形或椭圆,需要设置大家熟悉的 Height 和 Width属性(这两个属性继承自 FrameworkElement类)来定义形状的尺寸，然后设置 Fil 或 Stroke 属性(或同时设置这两个属性)使形状可见。还可以使用 MinHeigth、MinWidth、HorizontalAlignment、VerticalAlignment 以及 Margin 等属性。</p><div class="note warning flat"><p>如果未设置<code>Stroke</code>或<code>Fill</code>属性，形状就根本不会显示</p></div><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240704221239.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Left&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Left&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Elipse 类没有增加任何属性。Rectangle 类只增加了两个属性:RadiusX和 RadiusY。如果将这两个属性的值设为非零值，就可以创建出美观的圆形拐角。</p><div class="note info flat"><p>可认为<code>RadiusX</code>和<code>RadiusY</code>属性时用于填充矩形拐角的椭圆</p></div><h3 id="改变形状的尺寸和放置行为"><a href="#改变形状的尺寸和放置行为" class="headerlink" title="改变形状的尺寸和放置行为"></a>改变形状的尺寸和放置行为</h3><p>&emsp;&emsp;正如您已经知道的，硬编码尺寸通常不是创建用户界面的理想方法。它们会限制处理动态内容的能力，并会使应用程序本地化到其他语言变得更加困难。</p><p>&emsp;&emsp;当绘制形状时，不再总是关心这些问题。通常，需要更严格地控制形状的位置。然而，在许多情况下仍需更灵活一点儿的设计。Ellipse 和 Rectangle 为了适应可用的空间，都能自动改变白身。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>如果未提供 Height 和 Width 属性，形状会根据它们的容器来设置自身的尺寸。</p></div><p>&emsp;&emsp;改变形状尺寸的行为依赖于 Stretch 属性的值(该属性在 Shape 类中定义)。默认情况下，该属性被设置为Fill。如果没有指定明确的尺寸，这一设置会拉伸形状，使其填满容器。</p><center>Stretch枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Fill</td><td>形状拉伸其宽度和高度，从而可以正好适应其容器(如果设置了明确的高度和宽度，该设置就不起作用)</td></tr><tr><td>None</td><td>形状不被拉伸。除非使用 Height 和 Width 属性(或者使用 MinHeight 和 MinWidth 属性)将形状的宽度和高度设置为非0值，否则不会显示形状</td></tr><tr><td>Uniform</td><td>按比例改变形状的宽度和高度，直至形状到达容器边缘。如果为椭圆使用该值，最终将得到适应窗口的最大的圆。如果为矩形使用该值，将得到尽可能大的正方形(如果设置了明确的高度和宽度，形状就会在这些边界内改变尺寸。例如，如果将矩形的Width 属性设置为10 并将 Height 属性设置为 10，将只得到 10x10 大小的正方形)</td></tr><tr><td>UniformToFill</td><td>按比例改变形状的宽度和高度，直到形状填满了整个可用空间的高度和宽度。例如，如果在 100x200单位大小的窗口中放置使用此尺寸设置的矩形，将得到200x200单位大小的矩形，并且矩形的一部分会被剪裁掉(如果设置了明确的宽度和高度，就会在这些边界中改变形状尺寸。例如，如果将矩形的Width属性设为10，并将Height属性设为100，将得到100x100单位大小的矩形，并且会剪裁该矩形以适应不可见的10x100大小的方框)</td></tr></tbody></table><center>填充Grid中的三个单元格</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706095407.png" width="80%"/><div class="note info flat"><p>通常，将<code>Stretch</code>的值设置为<code>Fill</code>相当于将<code>HorizontalAlignment</code>和<code>VericalAlignment</code>属性设置为<code>Stretch</code></p></div><p>&emsp;&emsp;通过<code>Canvas</code>容器，可使用<code>Left</code>、<code>Top</code>、<code>Right</code>或<code>Bottom</code>附加属性，为每个形状指定坐标。这样可以完全控制形状如何相互重叠：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Canvas.Left</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Canvas.Top</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Left</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Top</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用Viewbox控件缩放形状"><a href="#使用Viewbox控件缩放形状" class="headerlink" title="使用Viewbox控件缩放形状"></a>使用Viewbox控件缩放形状</h3><p>&emsp;&emsp;使用 Canvas 控件的唯一限制是图形不能改变自身的尺寸以适应更大或更小的窗口。对于按钮这非常合理(在这些情况下，按钮不改变尺寸)，但是对于其他类型的图形内容，情况就未必如此了。例如，可能创建希望可以改变大小的复杂图形，从而可以充分利用可用的空间。</p><div class="note info flat"><p>WPF 提供了简便的解决方法。如果希望联合Canvas 控件的精确控制功能和方便的改变尺寸功能，可使用 Viewbox元素。</p></div><p>&emsp;&emsp;<code>Viewbox</code>时继承自<code>Decorator</code>的简单类（与<code>Border</code>类似）。该类只接受一个子元素，并拉伸活缩小子元素以适应可用空间。当然，这个单一的子元素可以时布局容器，其中可以包含大量形状（或其他元素），这些元素将同步地改变尺寸。然而，<code>Viewbox</code>更常用与矢量图像而不是普通控件。<br>&emsp;&emsp;尽管可在<code>Viewbox</code>元素中放置耽搁形状，但这并不能提供任何实际的优点。反而，当需要封装构成一幅图画（<code>drawing</code>的一组形状），<code>Viewbox</code>元素才有用处。通常，将在<code>Viewbox</code>控件中放置<code>Canvas</code>面板，并在<code>Canvas</code>面板中放置形状。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706101239.png"/><div class="note warning flat"><p>Viewbox 元素执行的缩放和在 WPF 中当增加系统 DPI 设置时看到的缩放类似。它按比例改变屏幕上的每个元素，包括图像、文本、直线以及形状。例如，如果在 Viewbox 元素中放置一个普通按钮，尺寸的改变会影响它的整个尺寸、内部的文本以及周围边框的粗细。如果在Viewbox 元素内部放置一个形状元素，它会按比例地改变形状内部的区域和边框，从而当放大形状时，其边框也将变粗。</p></div><p>&emsp;&emsp;<strong>默认情况下，<code>Viewbox</code>元素按比例地执行缩放，保持它所包含内容的纵横比</strong>，<code>Viewbox</code>元素使用适应可用空间内部的最大缩放系数。然而，可使用<code>Viewbox.Stretch</code>属性改变该行为，默认情况下，将该属性设置为<code>Uniform</code>。</p><p>&emsp;&emsp;为使<code>Viewbox</code>元素执行其缩放工作，需要能够确定两部分信息：（如果不放在<code>Viewbox</code>元素中）内容应当具有原始尺寸和希望内容具有的新尺寸。</p><ul><li>第一个细节——原始尺寸，不实用<code>Viewbox</code>控件时的尺寸——隐含在定义嵌套内容的方式中</li><li>第二个细节——新尺寸，<code>Viewbox</code>元素根据<code>Stretch</code>属性，让其内部的内容使用所有可用控件，这意味着<code>Viewbox</code>元素越大，其内部的内容就越大</li></ul><div class="note danger flat"><p>如果删除 Canvas 控件的 Width 和 Height属性，分析会发生什么情况。现在，Canvas控件的尺寸被设置为 0X0单位大小，所以Vewbox控件不能改变它的尺寸，并且嵌套在其中的内容不会显示(这与只使用 Canvas 控件时的行为不同。因为尽管 Canvas 控件的尺寸仍设置为0X0，但只要 Canvas.ClipToBounds属性没有被设置为true，就仍然允许在 Canvas 控件之外的区域绘制形状。而 Viewbox 控件不能容忍这一错误)。</p></div><p>&emsp;&emsp;如果在按比例改变尺寸的Grid面板的单元格中封装Canvas面板，并且没有指定Canvas面板的尺寸，如果没有使用Viewbox元素，该方法可工作得很好——拉伸Canvas面板以填充单元格，并且内部的内容时可见的。当如果将所有内容放在Viewbox元素中，这种方法就会失效。<strong>Viewbox控件不能确定最初尺寸，因此不能相应地改变Grid面板的尺寸。</strong></p><p>&emsp;&emsp;可通过直接在能自动改变尺寸的容器(如 Gird 面板)中放置特定的形状(如Rectangle 和Elipse)来避免这个问题。然后 Viewbox 控件就能够评估 Gird 面板为了适合其内容所需的最小尺寸，并且缩放 Grid 面板以适应可用空间。然而，在 Viewbox 元素中获取真正所希望的尺寸的最简单方法，是在具有固定尺寸的元素中封装内容，可以是Canvas面板、按钮或其他控件。这样，固定尺寸就变成了 Viewbox 控件进行计算所使用的原始尺寸。以这种方式硬编码尺寸不会限制布局的灵活性，因为 Viewbox元素根据可用空间和布局容器按比例改变尺寸。</p><h3 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h3><p>&emsp;&emsp;Line 形状表示连接一个点和另一个点的一条直线。起点和终点由4个属性设置:X1与Y1(用于第一个点)和 X2 与 Y2(用于第二个点)。例如,下面是一条从点(0,0)伸展到点(10,100)的直线:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Line</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">X1</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Y1</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">X2</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Y2</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>对于直线，<code>Fill</code>属性不起作用，必须设置<code>Stroke</code>属性</p></div><p>&emsp;&emsp;在直线中使用的坐标是相对于放置直线的矩形区域左上角的坐标。例如,如果在 StackPanel面板上放置上面的直线，坐标(0,0)指向在 StackPanel面板上放置该矩形区域的位置。这可能是窗口的左上角，也可能不是。如果 StackPanel 面板的 Margin 属性值不为0，或直线在其他元素之后，直线的开始点(0.0)与窗口顶部会有一定的距离。</p><p>&emsp;&emsp;然而，在直线中使用负坐标值是非常合理的。实际上，可为直线使用能超出为直线保留的空间的坐标，从而在窗口的其他任意部分绘制直线。对于到目前为止介绍的Rectangle和 Ellipse形状;这是不可能的。然而，这一模型也有缺点，<code>直线不能使用流内容模型。这意味着为直线设置 Margin、HorizontalAlignment 以及 VerticalAlignment 属性是没有意义的，因为它们没有任何效果</code>。对于 Polyline 和 Polygon 形状具有同样的限制。</p><div class="note warning flat"><p>可为直线使用 Height、Width 以及 Stretch属性,但这种做法不常用。基本技术是使用 Heigth和 Width 属性确定为直线分配的空间，然后使用 Stetch 属性改变直线的尺寸以填充该区域。</p></div><p>&emsp;&emsp;如果在 Canvas 面板上放置了 Line 形状,那么仍应用附加的位置属性(如 Top 和 Lef)。它们决定直线的开始位置。换句话说，两个直线坐标被平移了一定的距离。分析下面的直线:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Line</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span> <span class="attr">X1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">X2</span>=<span class="string">&quot;10&quot;</span> <span class="attr">Y2</span>=<span class="string">&quot;100&quot;</span> <span class="attr">Canvas.Left</span>=<span class="string">&quot;5&quot;</span> <span class="attr">Canvas.Top</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Line</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折线"><a href="#折线" class="headerlink" title="折线"></a>折线</h3><p>&emsp;&emsp;可以通过<code>Polyline</code>类绘制一些列相互连接的直线。只需要使用<code>Points</code>属性提供一系列X和Y坐标。从技术角度看，<code>Points</code>属性需要提供<code>PointCollection</code>对象，但在XAML中使用基于简单字符串的语法填充该集合。只需要提供点的列表，并在每个坐标之间添加空格或逗号。</p><blockquote><p>为了便于阅读，可在每个X和Y坐标之间使用逗号：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Polyline</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Points</span>=<span class="string">&quot;5,100 150,200 5,350&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h3><p>&emsp;&emsp;实际上，<code>Polygon</code>和<code>Polyline</code>时相同的。和<code>Polyline</code>类一样，<code>Polygon</code>类也有包含一系列坐标的<code>Points</code>集合。唯一的区别时：<code>Polygon</code>形状添加最后一条线段，将最后一个点连接到开始点（如果最后一个点就是第一个点，<code>Polygon</code>类和<code>Polyline</code>类就没有区别了）。可使用<code>Fill</code>画刷填充该形状的内部区域。</p><p>&emsp;&emsp;对于线条从不相交的简单形状，填充其内部是很容易做到的。但有时会遇到更复杂的Polygon 形状，哪些部分属于内部(并且应当被填充)以及哪些部分属于外部并不明显。例如如下的五角星图案：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706162958.png" width="80%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">ShowGridLines</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Polygon</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0 &quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Points</span>=<span class="string">&quot;15,200 68,70 110,200 0,124 135,125&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">FillRule</span>=<span class="string">&quot;EvenOdd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Polygon</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0 &quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">Points</span>=<span class="string">&quot;15,200 68,70 110,200 0,124 135,125&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">FillRule</span>=<span class="string">&quot;Nonzero&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span>  <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Text</span>=<span class="string">&quot;EvenOdd&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span>  <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Text</span>=<span class="string">&quot;Nonzero&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>每个Polygon和Polyline 形状都有FiRule 属性,该属性用于从两种填充方法中选择一种来填充区域。默认情况下，FilRule 属性被设置为EvenOdd。为了确定是否填充区域，WPF计算为了到达形状的外部必须穿过的直线的数量。如果是奇数，就填充区域;如果是偶数，就不填充区域。</p></div><p>&emsp;&emsp;WPF 还遵循 Nonzero 填充规则,该规则更加复杂。本质上，当使用 Nonzero 填充规则时，WPF使用和 EvenOdd 填充规则相同的方法计算穿过的直线的数量,但是会考虑经过的每条直线的方向如果在经过的直线中，在某个方向上(比如从左向右)直线的数量等于相反方向(从右向左)上直线的数量，就不会填充区域。如果这两个直线数量的差不为0，就填充区域。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706163508.png" width="80%" style="border:1px solid #333;"/><h3 id="直线线帽和直线交点"><a href="#直线线帽和直线交点" class="headerlink" title="直线线帽和直线交点"></a>直线线帽和直线交点</h3><p>&emsp;&emsp;当绘制 <code>Line</code> 和 <code>Polyline</code> 形状时，可使用 <code>StartLineCap</code>和 <code>EndLineCap</code> 属性选择如何绘制直线的开始端和结束端(这些属性不影响其他形状，因为其他形状都是闭合的)。</p><p>&emsp;&emsp;<code>StartLineCap</code> 和 <code>EndLineCap</code> 属性通常都设为 <code>Flat</code>，这意味着直线在它的最后坐标处立即终止。其他选择包括 <code>Round</code>(该设置会平滑地绘制拐角)、<code>Triangle</code>(绘制直线的两条侧边最后交于一点)以及 <code>Square</code>(该设置使直线端点具有尖锐边缘)。这三个设置都会增加直线的长度--换句话说，它们使直线超出了其他情况下的结束位置。额外的距离是直线宽度的一半。</p><p>&emsp;&emsp;下图显示了直线端点处不同线帽之间的区别。除 Line 形状外，所有形状都允许使用<code>StrokeLineJoin</code>属性扭曲它们的拐角，有4种选择。Miter 值(默认值)使用尖锐的边缘，Bevel 值切掉点边缘，Round 值平滑地过渡边缘，Triangle 值显示尖点。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706164044.png" width="80%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Line</span> <span class="attr">X1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Y1</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">X2</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Y2</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">StrokeThickness</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">StrokeStartLineCap</span>=<span class="string">&quot;Round&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">StrokeEndLineCap</span>=<span class="string">&quot;Round&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="点划线"><a href="#点划线" class="headerlink" title="点划线"></a>点划线</h3><p>&emsp;&emsp;除了为形状的边框绘制乏味的实线外，还可绘制点划线(dashed line)——根据指定的模式使用空白断开的直线。当在 WPF中创建一条点划线时，不限制进行特定的预先设置。相反，可通过设置 <code>StrokeDashArray</code>属性来选择实线段的长度和断开空间(空白)的长度。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706165031.png" width="80%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Polyline</span> <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeThickness</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeDashArray</span>=<span class="string">&quot;3 0.5 2&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Points</span>=<span class="string">&quot;10,30 60,0 90,40 120,10 350,10&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p><code>StrokeDashArray</code>的值可以是<strong>小数</strong>、<strong>奇数个</strong>，如果希望从中间开始绘制，可使用<code>StrokeDashOffset</code>属性，该属性时一个从0开始的索引，该索引指向<code>StrokeDashArray</code>中的某个值</p></div><h3 id="像素对齐"><a href="#像素对齐" class="headerlink" title="像素对齐"></a>像素对齐</h3><p>&emsp;&emsp;如您所知，WPF 使用与设备无关的绘图系统。为字体和形状等内容指定的数值使用“虚拟像素，在通常的 96 dpi 显示器上,“虚拟”像素和正常像素的大小相同，但是在更高 dpi 的显示器上其尺寸会被缩放。换句话说，绘制50像素宽的矩形，根据设备的不同，实际上可能使用更多或更少的像素进行渲染。设备无关单位和物理像素之间的转换会自动进行，并且通常根本不需要考虑这个问题。</p><div class="note info flat"><p>根据正在绘制的图形类型，它可能看起来很正常。然而，如果不希望这种行为，可告诉 WPF 不要为特定形状使用反锯齿特性进行处理，反而WPF会将尺寸舍入到最近的设备像素。可通过将<code>UIElement</code>类的<code>SnapsToDevicePixels</code>属性设置为true来启用这个称为像素对齐(pixelsnapping)的特性。</p></div><h2 id="画刷"><a href="#画刷" class="headerlink" title="画刷"></a>画刷</h2><p>&emsp;&emsp;画刷填充区域，不管是元素的背景色、前景色以及边框，还是形状的内部填充和笔画(stroke)。最简单的画刷类型是 <code>SolidColorBrsh</code>，这种画刷填充一种固定、连续的颜色。在XAML 中设置形状的 <code>Stroke</code> 或 <code>Fill</code> 属性时，使用的是 <code>SolidColorBrush</code> 画刷，它们在后台完成绘制。<br>&emsp;&emsp;下面时几个与画刷相关的更基本的方面：</p><ul><li><strong>画刷支持更改通知</strong>，因为它们继承自<code>Freezable</code>类。因此，如果改变了画刷，任何使用画刷的元素都会自动重新绘制自身。</li><li><strong>画刷支持部分透明</strong>，为此，只需要修改<code>Opacity</code>属性，使背景能够透过前面的内容进行显。</li><li><strong>通过 SystemBrushes 类可以访问这样的画刷</strong>，此类画刷使用 Windows 系统设置为当前计算机定义的首选颜色。</li></ul><p>&emsp;&emsp;SolidColorBrush 画刷无疑非常有用，但还有其他几个继承自 System.Windows.Media,Brush 的类,通过这些类可得到更新颖的效果。</p><center>画刷类</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>SolidColorBrush</td><td>使用单一的连续颜色绘制区域</td></tr><tr><td>LinearGradientBrush</td><td>使用渐变填充绘制区域，渐变的阴影填充从一种颜色变化到另一种颜色</td></tr><tr><td>RadialGradientBrush</td><td>使用径向渐变填充绘制区域，除了是在圆形模式中从中心点向外部辐射渐变之外，这种画刷和线性渐变画刷类似</td></tr><tr><td>ImageBrush</td><td>使用可被拉伸、缩放活平铺的图像绘制区域</td></tr><tr><td>DrawingBrush</td><td>使用<code>Drawing</code>对象绘制区域，该对象可以包含已经定义的形状和位图</td></tr><tr><td>VisualBrush</td><td>使用<code>Visual</code>对象绘制区域。因为所有WPF元素都继承自<code>Visual</code>类，所以可使用该画刷将部分用户界面复制到另一个区域。当创建特殊效果时，比如部分反射效果，该画刷特别有用</td></tr><tr><td>BitmapCacheBrush</td><td>使用从<code>Visual</code>对象缓存的内容绘制区域。这种画刷和<code>VisualBrush</code>类似，但如果需要在多个地方重用图形内容或者频繁地重绘图形内容，这种画刷更高效</td></tr></tbody></table><h3 id="SolidColorBrush画刷"><a href="#SolidColorBrush画刷" class="headerlink" title="SolidColorBrush画刷"></a>SolidColorBrush画刷</h3><p>&emsp;&emsp;在大多数控件中，通过三个字<code>Foreground</code>属性绘制文本颜色，并设置<code>Background</code>属性绘制文本背后的空间。形状使用类似但不同的属性：<code>Stroke</code>属性用于绘制形状的边框，而<code>Fill</code>属性用于绘制形状的内部。</p><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">XAML</button><button type="button" class="tab " data-href="note-2">C#</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Foreground</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">cmd.Foreground = <span class="keyword">new</span> SolidColorBrush(Colors.White);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="LinearGradientBrush画刷"><a href="#LinearGradientBrush画刷" class="headerlink" title="LinearGradientBrush画刷"></a>LinearGradientBrush画刷</h3><p>&emsp;&emsp;可通过<code>LinearGradientBrush</code>画刷创建从一种颜色变化到另一种颜色的混合填充。下图为左下角到右上角的蓝色到绿色的渐变：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706173315.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0 1&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Green&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>通过<code>StartPoint</code>和<code>EndPoint</code>设置（0 ~ 1）的起始和结束点位用于确定渐变的方向；通过<code>GradientStop</code>的<code>Offset</code>设置（0~1）的偏移值</p></div><p>&emsp;&emsp;渐变不仅可以使用在控件或元素上，也可以作用于文本上，如下渐变文本：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706173941.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;This is a Text&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">FontSize</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock.Foreground</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock.Foreground</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RadialGradientBrush画刷"><a href="#RadialGradientBrush画刷" class="headerlink" title="RadialGradientBrush画刷"></a>RadialGradientBrush画刷</h3><p>&emsp;&emsp;<code>RadialGradientBrush</code> 画刷和 <code>LinearGradientBrush</code> 画刷的工作方式类似，也使用一系列具有不同偏移值的颜色。与<code>LinearGradientBrush</code> 画刷一样，可使用希望的任意多种颜色。区别是放置渐变的方式。</p><p>&emsp;&emsp;为指定第一种颜色在渐变中的开始点，需要使用 <code>GradientOrigin</code> 属性。默认情况下，**渐变的开始点是(0.5,0.5)**，该点表示填充区域的中心。</p><div class="note wanring flat"><p>与 <code>LinearGradientBrush</code> 一样，<code>RadialGradientBrush</code> 也使用比例坐标系统，该坐标系统将(0,0)作为矩形填充区域的左上角坐标，将(1,1)作为右下角坐标。这意味着可使用(0,0)到(1,1)之间的任何坐标作为渐变的开始点。实际上，如果希望在填充区域之外定位开始点，甚至可超出这一范围。</p></div><p>&emsp;&emsp;渐变从开始点以环形的方式向外辐射。渐变最终到达内部渐变圆的边缘，这里是渐变的终点。根据所期望的效果，渐变圆的中心可能和渐变开始点对齐，也可能和渐变开始点不对齐。超出内部渐变圆的区域以及填充区域的最外侧边缘，使用在:RadialGradientBrush.GradientStops集合中定义的最后一种颜色进行纯色填充。下图演示了径向渐变效果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusX</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusY</span>=<span class="string">&quot;0.3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Green&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可使用三个属性设置内部渐变圆的边界：<code>Center</code>、<code>RadiusX</code>和<code>RadiusY</code>。默认情况下，<code>Center</code>属性被设置为<strong>（0.5,0.5）</strong>，该设置将限定圆的中心放在填充区域的中央，并且该点同时也是渐变开始点。<br>&emsp;&emsp;<code>RadiusX</code>和<code>RadiusY</code>属性决定了限定圆的尺寸，默认情况下这两个属性都被设置为<strong>0.5</strong>。这个值可能不够直观，因为它们根据填充区域的对角范围（一条从填充区域的左上角延伸到右下角的假想线）进行度量。这意味着半径0.5定义了一个圆，该圆的半径时对角线长度的一般。如果填充区域为正方形，使用勾股定理可计算出，该长度大约是填充区域宽度（或高度）的0.7倍。因此，如果用默认设置填充正方形区域，渐变就从中心点开始，并拉伸大约正方形宽度0.7倍的距离到达最外侧边界。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706202550.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">StrokeThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">RadiusX</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">RadiusY</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.7,0.3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ImageBrush画刷"><a href="#ImageBrush画刷" class="headerlink" title="ImageBrush画刷"></a>ImageBrush画刷</h3><p>&emsp;&emsp;可通过 IageBrush画刷使用位图填充区域。可使用最常见的文件类型，包括BMP、PNGGIF 以及 JPEG 文件。可通过设置 ImageSource 属性来指定希望使用的图像。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">ImageSource</span>=<span class="string">&quot;/Images/happyface.png&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">AlignmentX</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">AlignmentY</span>=<span class="string">&quot;Center&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>ImageBrush.ImageSource</code> 属性和 Image 元素的 <code>Source</code> 属性的工作方式相同，这意味着也可以使用指向资源、外部文件或 Web站点的 URI设置 ImageSource 属性。也可通过为 ImageSource属性提供 DrawingImage 对象，创建使用由 XAML 定义的矢量内容的 <code>ImageBursh</code> 画刷。可通过这种方法降低开销(通过避免使用更耗资源的 Shape 类的派生类)，或使用矢量图形创建平铺模式。</p><p>&emsp;&emsp;如果容器的大小与背景图的大小不匹配，默认情况下会拉伸背景图，可通过<code>Stretch</code>属性控制拉伸方式，其取值方式如下所示：</p><center>Stretch属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>None</td><td>不填充和拉伸，采用背景图的原始尺寸</td></tr><tr><td>Fill</td><td>默认值，填充整个容器</td></tr><tr><td>Uniform</td><td>以填充容器短边为准</td></tr><tr><td>UniformToFill</td><td>以填充容器长边为准，因此短边部分的背景图可能会被裁剪</td></tr></tbody></table><p>&emsp;&emsp;<strong>如果绘制的图像比填充区域小，图像会根据 AlignmentX和 AlignmentY 属性进行对齐</strong>。未填充的区域保持透明。当使用Uniform设置进行缩放，并且填充区域的形状不同时，就会出现这种情况(在这种情况下，在上部或侧边会出现空白条)。如果将 Stretch 属性设置为 None，并且填充区域比图像大，也会出现这种情况。</p><p>&emsp;&emsp;<strong>还可使用 Viewbox 属性从图像上剪裁有兴趣使用的一小部分</strong>。为此，需要指定4个数值以描述希望从源图像上剪裁并使用的矩形部分。前两个数值指定矩形开始的左上角，而后两个数值指定矩形的宽度和高度。唯一的问题是 Vewbox属性使用的是相对坐标系统，就像渐变画刷使用的坐标系统那样。这一坐标系统将图像的左上角指定为(0,0)，将右下角指定为(1,1)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">ImageSource</span>=<span class="string">&quot;/Images/happyface.png&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Stretch</span>=<span class="string">&quot;Uniform&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">AlignmentX</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">AlignmentY</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Viewbox</span>=<span class="string">&quot;0.1,0.1 0.3,0.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;现在，Viewbox属性从(0.1,0.1)开始（从技术角度看，X坐标是宽度的0.1倍，Y坐标时高度的0.1倍）。然后伸展矩形以填充一个30%宽度和50%高度的小方框作为整幅图像（从技术角度看，矩形的长度为图像宽度的0.3倍，矩形的高度为图像高度的0.5倍）。根据<code>Stretch</code>、<code>AlignmentX</code>以及<code>AlignmentY</code>属性的设置，倍裁剪下来的部分图像会被拉伸活居中显示。</p><h3 id="平铺的ImageBrush画刷"><a href="#平铺的ImageBrush画刷" class="headerlink" title="平铺的ImageBrush画刷"></a>平铺的ImageBrush画刷</h3><p>&emsp;&emsp;除普通的ImageBrush画刷外，还有其他令人更加激动的内容。可通过在画刷的表面平铺图像来得到一些有趣的效果。<br>&emsp;&emsp;平铺图像时，有两种选择:</p><ul><li><strong>按比例平铺</strong>：填充区域始终具有相同数量的平铺图像。为适应填充区域，平铺的图像会扩展活收缩</li><li><strong>按固定尺寸平铺</strong>：平铺图像始终具有相同的尺寸。填充区域的尺寸决定了显示的平铺图像的数量</li></ul><p>&emsp;&emsp;为了平铺一幅图像，需要设置<code>ImageSource</code> 属性(指定希望平铺的图像)以及<code> Viewport</code>、<code>ViewportUnits</code>与 <code>TileMode</code> 属性。后三个属性决定了平铺图像的尺寸和排列方式。</p><p>&emsp;&emsp;可使用<code>Viewport</code> 属性设置每幅平铺图像的尺寸。为使用按比例平铺模式，必须将<code>ViewportUnits</code> 属性设置为 <code>RelativeToBoundingBox</code>(这是默认设置)。然后使用在两个方向上的坐标范围都是从0到1的按比例坐标系统定义平铺图像的尺寸。换句话说，如果一幅平铺图像的左上角位于(0、0)，右下角位于(1，1)，就会占据整个填充区域。为得到平铺模式，为 <code>Viewport</code>属性设置的值应当比整个填充区域的尺寸小，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">ImageSource</span>=<span class="string">&quot;/Images/happyface.png&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">TileMode</span>=<span class="string">&quot;Tile&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Viewport</span>=<span class="string">&quot;0,0 0.5,0.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的标记创建了一个从填充区域的左上角(0，0)开始，并拉伸到中间点(0.5,0.5)的Viewport 方框。因此，不管填充区域的大小如何，填充区域始终包含4幅平铺图像。这种行为非常好，因为可确保平铺图像不会在形状的边缘被剪裁(当然，如果使用 ImageBrush 画刷填充非矩形区域，图像仍会被剪裁)。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706205734.png" width="80%"/><p>&emsp;&emsp;另一种定义平铺图像尺寸的方法是根据原始图像的尺寸使用绝对坐标。为此，将ViewportUnits 属性设置为 Absolute(而不是 RelativeToBoundBox)。下面举一个示例，该例将每幅平铺图像定义为 32x32 单位大小，并从左上角开始平铺:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">ImageSource</span>=<span class="string">&quot;/Images/happyface.png&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">TileMode</span>=<span class="string">&quot;Tile&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ViewportUnits</span>=<span class="string">&quot;Absolute&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Viewport</span>=<span class="string">&quot;0,0 32,32&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可改变 TileMode 值，设置平铺图像的翻转方式</p><center>TileMode枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Tile</td><td>在可用区域复制图像</td></tr><tr><td>FlipX</td><td>复制图像，但垂直翻转每个第二列</td></tr><tr><td>FlipY</td><td>复制图像，但水平翻转每个第二行</td></tr><tr><td>FlipXY</td><td>复制图像，但垂直翻转每个第二列，并水平翻转每个第二行</td></tr></tbody></table><p>&emsp;&emsp;如果需要使平铺图像更无缝地混合，翻转行为通常是有用的。例如，如果使用FlipX，相邻的平铺图像总可以无缝地排列。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706210327.png" width="80%"/><h3 id="VisualBrush画刷"><a href="#VisualBrush画刷" class="headerlink" title="VisualBrush画刷"></a>VisualBrush画刷</h3><p>&emsp;&emsp;VisualBrush 画刷不常用，使用这种画刷获取元素的可视化内容，并使用该内容填充任意表面。例如，可使用 VisualBrush 画刷将窗口中某个按钮的外观复制到同一窗口中的其他位置。然而，复制的按钮不能被单击，也不能通过任何方式与其进行交互。在此只是复制了元素的外观。</p><p>&emsp;&emsp;例如，下面的标记片段定义了一个按钮和用于复制该按钮的 VisualBrush 画刷</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240706210914.png" width="80%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmd&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Is this a real button?<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">VisualBrush</span> <span class="attr">Visual</span>=<span class="string">&quot;&#123;Binding ElementName=cmd&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>尽管可在 VisualBrush 本身定义希望使用的元素，但通常使用绑定表达式引用当前窗口中的元素</p></div><p>&emsp;&emsp;VisualBrush监视元素外观的变化。例如，如果复制某个按钮的可视化外观，而且此后按钮接收到焦点，VisualBmsh画刷会使用新的可视化内容重新绘制填充区域--一个具有焦点的按钮。VisualBrush 类继承自TileBrush类，因此，VisualBrush类也支持所有剪裁、拉伸以及翻转等特性。</p><h3 id="BitmapCacheBrush画刷"><a href="#BitmapCacheBrush画刷" class="headerlink" title="BitmapCacheBrush画刷"></a>BitmapCacheBrush画刷</h3><p>&emsp;&emsp;BitmapCacheBrush 画刷在许多方面和 VisualBrush 画刷类似。尽管 VisualBrush 类提供了用于引用其他元素的 Visual属性，但 BitmapCacheBrush 类提供了与此作用相同的 Target 属性。<br>&emsp;&emsp;两者之间的关键区别是，BitmapCacheBrush画刷采用可视化内容(这些内容已经通过变换剪裁、效果以及透明设置进行了改变)并要求显卡在显存中存储该内容。这样一来，当需要时可快速地重新绘制内容，而不必要求 WPF执行任何额外的工作。</p><p>&emsp;&emsp;为配置位图缓存，设置 BitmapCacheBrush.BitmapCache 属性(使用可预先确定的 BitmapCache对象)。下面是最简单的用法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;cmd&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Is this a real button?<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">BitmapCacheBrush</span> <span class="attr">Target</span>=<span class="string">&quot;&#123;Binding ElementName=cmd&#125;&quot;</span> <span class="attr">BitmapCache</span>=<span class="string">&quot;BitmapCache&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;BitmmapCacheBrush画刷存在严重缺点:渲染位图以及将其复制到显存的初始步骤需要比较短但可察觉到的额外时间。如果在窗口中使用 BitmapCacheBrush画刷，在窗口第一次绘制自身之前，当渲染 BitmapCacheBrush并复制其位图时，将会注意到延迟。因此，在传统窗口中，BitmapCacheBrush 起不到多大的帮助作用。</p><p>&emsp;&emsp;然而，如果在用户界面中大量使用动画，值得考虑使用位图缓存。这是因为动画会强制窗口在每一秒内重新绘制许多次。如果具有复杂的矢量内容，从缓存位图中绘制窗口内容比从头重新绘制窗口要快。但即使是这种情况，也不应当立即使用 BitmapCacheBrush 画刷。可能更愿意通过为每个希望缓存的元素设置更高级的UIElement.CacheMode属性来应用缓存。对于这种情况，WPF 在后台使用 BitmapCacheBrush 画刷获取相同的效果，但需要做的工作更少。</p><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>&emsp;&emsp;通过使用变换（<code>transform</code>）。许多绘图人物将更趋简单；变换时通过不加通告地切换形状或元素有使用的坐标系统来改变形状活元素绘制方式的对象。在WPF中，变换由继承自<code>System.WIndows.Media.Transform</code>抽象类你的来表示。</p><center>变换类</center><table><thead><tr><th>名称</th><th>说明</th><th>重要属性</th></tr></thead><tbody><tr><td>TranslateTransform</td><td>将坐标系统移动一定距离。如果希望在不同的地方绘制相同的形状，该变换非常有用</td><td>X、Y</td></tr><tr><td>RotateTransform</td><td>旋转坐标系统。正常绘制的形状绕着选择的中心点旋转</td><td>Angle、CenterX、CenterY</td></tr><tr><td>ScaleTransform</td><td>放大活缩小坐标系统，从而绘制更大或更小的图形。可在X和Y方向应用不同的缩放度，从而拉伸活压缩形状</td><td>ScaleX、ScaleY、CenterX、CenterY</td></tr><tr><td>SkewTransform</td><td>通过倾斜一定的角度扭曲坐标系统。例如，如果绘制正方形，通过该变换正方形会变成平行四边形</td><td>ScaleX、ScaleY、CenterX、CenterY</td></tr><tr><td>MatrixTransform</td><td>使用提供的矩阵的乘积修改坐标系统。这是最复杂的选择——为实现该变换，需要掌握一些数学技巧</td><td>Matrix</td></tr><tr><td>TransformGroup</td><td>组合多个变换，从而可以一次应用所有这些变换。应用变换的顺序是很重要的，因为这会影响最终结果。例如，首先使用RotateTransform旋转形状，然后使用TranslateTransform移动形状，这样做的结果和先移动再旋转的结果是不同的</td><td>N&#x2F;A</td></tr></tbody></table><p>&emsp;&emsp;从技术角度看，所有变换都使用矩阵数学改变形状的坐标。不过，使用预先构建好的变换，如RotateTransform、ScaleTransform以及SkewTransform，比使用TranslateTransformMatrixTransform 并尝试为希望执行的操作构造正确的矩阵要简单得多。当使用 TransformGroup执行一系列变换时，WPF 将所有变换融合到单独的 MatrixTransform 变换中以确保获得最佳性能。</p><div class="note wanring flat"><p>所有变换都(通过 Transform 类)继承自 Freezable 类，这意味着它们支持自动更改通知功能。如果改变了在形状中使用的变换，形状会立即重新绘制自身。</p></div><h3 id="变换形状"><a href="#变换形状" class="headerlink" title="变换形状"></a>变换形状</h3><p>&emsp;&emsp;为变换形状，将<code>RenderTransform</code>属性指定为希望使用的变换对象。根据使用的变换对象，需要填充不同的属性以配置变换对象。下面的示例中将矩形旋转25°</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Left</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Top</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">&quot;25&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;采用这种方式旋转形状时，是围绕形状的原点进行旋转的（左上角），有时希望绕不同的点旋转形状。与其他许多变换类一样，<code>RoatteTransform</code>变换也提供了<code>CenterX</code>和<code>CenterY</code>属性。可以用这些属性指定将进行选准的中心。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Left</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Top</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">&quot;25&quot;</span> <span class="attr">CenterX</span>=<span class="string">&quot;45&quot;</span> <span class="attr">CenterY</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240707085405.png" width="80%"/><p>&emsp;&emsp;使用 RotateTransform 的 CenterX和 CenterY属性时存在明显的限制。这些属性是使用绝对坐标定义的，这意味着需要了解绘制内容的中心点的准确位置。如果正在显示动态内容(例如，可变维度的图片或可改变尺寸的元素)，就会出现问题。幸运的是，<strong>WPF通过方便的<code>RenderTransforOrigin</code> 属性，为这个问题提供了解决方法，所有形状都支持 RenderTransformOrigin 属性。该属性使用相对坐标系统设置中心点，相对坐标系统在两个方向上的范围都是从0到1</strong>。换句话说，点(0,0)被指定为左上角，点(1,1)表示右下角(如果形状区域不是正方形，那么会相应地拉伸坐标系统)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Height</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Stroke</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Left</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Canvas.Top</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">RenderTransformOrigin</span>=<span class="string">&quot;0.5,0.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RotateTransform</span> <span class="attr">Angle</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>不管形状的尺寸时多少，点（0.5,0.5）都表示形状中心。实际上，<code>RenderTransformOrigin</code>属性通常比<code>CenterX</code>和<code>CenterY</code>属性更有用</p></div><div class="note danger flat"><p>当设置 <code>RenderTransformOrigin</code>属性以指定旋转点时，<strong>可使用大于1或小于0的值</strong>，这时旋转点位于形状边界之外。例如，可使用具有这种设置的RotateTransform 变换，绕着某个非常远的点旋转大的弧形，例如绕点(5.5)进行旋转。</p></div><h3 id="变换元素"><a href="#变换元素" class="headerlink" title="变换元素"></a>变换元素</h3><p>&emsp;&emsp;RenderTransform和 RenderTransformOrigin 属性并不限制只能用于形状。实际上，Shape 类的这些属性从 UIElement 类继承而来，这意味着所有 WPF 元素都支持这两个属性，包括按钮、文本框、TextBlock 控件、充满内容的整个布局容器等。令人感到惊讶的是，可旋转、扭曲以及缩放 WPF 用户界面中的任意一部分(尽管在大多数情况下不会这么做)。</p><p>&emsp;&emsp;RenderTransform 不是在 WPF 基类中定义的唯一与变换相关的属性。<strong>FrameworkElement 类还定义了 LayoutTransform 属性。LayoutTransform 属性以相同的方式变换元素，但在布局之前执行其工作</strong>。这种情况的开销虽然更大些，但如果使用布局容器为一组控件提供自动布局功能这种方式是很关键的(Shape 类也提供了 LayoutTransfomm 属性，但很少需要使用该属性，因为通常使用容器(如 Canvas 面板)明确地放置形状，而不是使用自动布局)。</p><div class="note danger flat"><p>只有很少几个元素不能被变换，因为它们的呈现工作并非由 WPF 本身负责。不能被变换的元素的两个例子是 <code>WindowsFormHost</code>和 <code>WebBrower</code> 元素，WindowsFormHost 元素用于在 WPF窗口中放置 Windows 窗体控件,WebBrower 元素用于显示 HTML 内容。</p></div><p>&emsp;&emsp;在一定程度上，当设置 LayoutTransform或RenderTransform属性时，WPF 元素不知道它们正在被修改。特别是，变换不会影响元素的ActualHeight和 ActualWidth 属性，它们仍记录着变换之前的值。这正是 WPF 能够保证流式布局以及外边距继续以相同的方式工作的部分原理即使应用了一个或多个变换也同样如此。</p><h2 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h2><h3 id="使元素半透明"><a href="#使元素半透明" class="headerlink" title="使元素半透明"></a>使元素半透明</h3><p>&emsp;&emsp;可采用以下几种方式使元素具有半透明效果：</p><ul><li><strong>设置元素的Opacity属性</strong>：每个元素（包括形状）都从<code>UIElement</code>基类继承了<code>Opacity</code>属性。不透明度(Opacity)是0到1之间的小数,1表示完全不透明(默认值)，0 表示完全透明</li><li><strong>设置画刷的Opacity属性</strong>：每个画刷也从<code>Brush</code>基类继承了<code>Opacity</code>属性，可使用0到1之间的值设置该属性，以控制使用画刷绘制的内容的同名都</li><li><strong>使用具有透明Alpha值的颜色</strong>：所有alpha值小于255的颜色都是半透明，例如*#50FF69B4*，最前面的两位用于控制透明度，00表示全透明，FF表示无透明</li></ul><h3 id="透明掩码"><a href="#透明掩码" class="headerlink" title="透明掩码"></a>透明掩码</h3><p>&emsp;&emsp;Opacity 属性使元素的所有内容都是部分透明的。OpacityMask 属性提供了更大的灵活性。可使元素的特定区域透明或部分透明，从而实现各种常见的以及新颖的效果。例如，可使用OpacityMask属性将形状逐渐褪色到完全透明。</p><p>&emsp;&emsp;使用 SolidColorBrush 画刷设置 OpacityMask 属性没什么意义，因为可使用 Opacity 属性更容易地实现相同的效果。然而，当使用更特殊的画刷类型时，例如<strong>使用LinearGradient或RadialGradientBrush画刷，OpacityMask属性就变得更有用了</strong>。使用渐变将一种纯色变换到透明色，可创建在整个元素表面褪色的透明效果。例如，下面的按钮就使用了这种效果:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">FontSize</span>=<span class="string">&quot;14&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">FontWeight</span>=<span class="string">&quot;Bold&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.OpacityMask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0 0&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">EndPoint</span>=<span class="string">&quot;1 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Color</span>=<span class="string">&quot;Black&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Color</span>=<span class="string">&quot;Transparent&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.OpacityMask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Content</span>&gt;</span>A Partially Transparent Button<span class="tag">&lt;/<span class="name">Button.Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;还可以结合使用<code>OpacityMash</code>属性和<code>VisualBrush</code>画刷来创建反射效果，如下最常见的WPF效果之一——具有镜像文本的文本框</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240707100208.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;txt&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">FontSize</span>=<span class="string">&quot;30&quot;</span>&gt;</span>Here is some reflected text<span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">RenderTransformOrigin</span>=<span class="string">&quot;1,0.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">VisualBrush</span> <span class="attr">Visual</span>=<span class="string">&quot;&#123;Binding ElementName=txt&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.OpacityMask</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0,0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">EndPoint</span>=<span class="string">&quot;0,1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;0.3&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Color</span>=<span class="string">&quot;Transparent&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">Color</span>=<span class="string">&quot;#44000000&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.OpacityMask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ScaleTransform</span> <span class="attr">ScaleY</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Rectangle.RenderTransform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;理解形状&quot;&gt;&lt;a href=&quot;#理解形状&quot; class=&quot;headerlink&quot; title=&quot;理解形状&quot;&gt;&lt;/a&gt;理解形状&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在WPF用户界面中，绘制2D图形内容的最简单方法时使用形状（&lt;code&gt;Shape&lt;/code&gt;）—</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 11样式和行为</title>
    <link href="http://bootree.cn/2024/07/03/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/11%E6%A0%B7%E5%BC%8F%E5%92%8C%E8%A1%8C%E4%B8%BA/"/>
    <id>http://bootree.cn/2024/07/03/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/11%E6%A0%B7%E5%BC%8F%E5%92%8C%E8%A1%8C%E4%B8%BA/</id>
    <published>2024-07-03T12:25:41.000Z</published>
    <updated>2024-07-04T13:15:35.717Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;样式(<code>style</code>)时组织和重用格式化选项的重要工具。不是使用重复的标记填充XAML，以便设置外边距、内边距、颜色以及字体等细节，而是创建一系列封装所有这些细节的样式，然后在需要之处通过属性来应用样式<br>&emsp;&emsp;行为(<code>behavior</code>)时一款重用用户界面代码的更有挑战性的工具。其基本思想时：使用行为封装一些通用的UI功能（例如，使元素可被拖动的代码）。如果具有适当的行为，可使用一两行XAML标记将其附加到任意元素，从而节省编写和调试代码的工作。</p><h2 id="样式基础"><a href="#样式基础" class="headerlink" title="样式基础"></a>样式基础</h2><p>&emsp;&emsp;样式是可应用于元素的属性值集合。WPF 样式系统与 HTML标记中的层叠样式表(CascadingStyle Sheet，CSS)标准担当类似的角色。与 CSS 类似，通过 WPF 样式可定义通用的格式化特性集合，并且为了保证一致性，在整个应用程序中应用它们。与CSS样，WPF样式也能够自动工作，指定具体的元素类型为目标，并通过元素树层叠起来。然而，WPF样式的功能更加强大，因为它们能够设置任何依赖项属性。这意味着可以使用它们标准化未格式化的特性，如控件的行为。WPF样式也支持触发器(<code>trigger</code>)，当属性发生变化时，可通过触发器改变控件的样式，并且可使用模板重新定义控件的内置外观。F且学习了如何使用样式，就可以在所有WPF应用程序中使用它们。</p><div class="note info flat"><p>在使用资源设置属性时，正确地匹配数据类型是非常重要的。这时，WPF使用类型转换器的方式和直接设置特性值是不同的。例如，如果正为元素设置 FontFamily特性，可使用字符串Times New Roman，因为 FontFamilyConverter 转换器会创建所需要的 FontFamily 对象。但如果试图使用字符串资源设置 FontFamily属性，情况就不同了--这时，XAML解析器会抛出异常</p></div><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">定义样式资源</button><button type="button" class="tab " data-href="-2">XAML中使用样式</button><button type="button" class="tab " data-href="-3">C#中使用样式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource DefaultButtonStyle&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.Style = (Style)FindResource(<span class="string">&quot;DefaultButtonStyle&quot;</span>);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;<code>Setters</code>集合是<code>Style</code>类中最重要的属性，但并非唯一属性。<code>Style</code>类中更有5可重要属性：</p><center>Style类的属性</center><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Setters</td><td>设置属性值以及自动关联事件处理程序的<code>Setter</code>对象或<code>EventSetter</code>对象的集合</td></tr><tr><td>Triggers</td><td>继承自<code>TriggerBase</code>类并能自动改变样式设置的对象集合。例如，当另一个属性改变时，或者当发生了某个事件时，可以修改样式</td></tr><tr><td>Resources</td><td>希望用于样式的资源集合。例如，可能需要使用一个对象设置多个属性。这时，更高效的做法是作为资源创建对象，然后在 <code>Setter</code> 对象中使用该资源(而不是使用嵌套的标签作为每个 <code>Seter</code> 对象的一部分创建对象)</td></tr><tr><td>BaseOn</td><td>通过该属性可创建继承自（并且可以有选择地进行重写）其他样式设置的更具体样式</td></tr><tr><td>TargetType</td><td>该属性标识应用样式的元素的类型。通过该属性可创建只影响特定类型元素的设置器，还可以创建能够为恰当的元素类型自动起作用的设置器</td></tr></tbody></table><h3 id="创建样式对象"><a href="#创建样式对象" class="headerlink" title="创建样式对象"></a>创建样式对象</h3><p>&emsp;&emsp;可通过直接填充特定元素的样式集合来定义样式，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Button.Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button.Content</span>&gt;</span>A Customized Button<span class="tag">&lt;/<span class="name">Button.Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>上面的代码虽然可奏效，但显然不是很有用，因为现在无法与其他元素共享该样式</p></div><p>&emsp;&emsp;如果只使用样式设置一些属性(如本例所示)，就不值得使用这种方法，因为直接设置属性更加容易。然而，如果正在使用样式的其他特性，并且只希望将它应用到单个元素，这一方法有时会有用。例如，可使用该方法为元素关联触发器，还可以通过该方法修改元素控件模板的一部分(对于这种情况，需要使用 <code>Setter.TargetName</code> 属性，为元素内部的特定组件应用设置器,如列表框中的滚动条按钮)</p><h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p>&emsp;&emsp;正如已经看到的，每个 Style对象都封装了一个 Setter 对象的集合。每个 Setter 对象设置元素的单个属性。唯一的限制是<strong>设置器只能改变依赖项属性——不能修改其他属性</strong>。<br>&emsp;&emsp;在某些情况下，不能使用简单的特性字符串设置属性值。例如，不能使用简单的字符串创建<code>ImageBrush</code>对象。对于此类情况，可使用<code>XAML</code>技巧，用于嵌套的元素代替特性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">TileMode</span>=<span class="string">&quot;Tile&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Viewport</span>=<span class="string">&quot;0 0 32 32&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">ViewportUnits</span>=<span class="string">&quot;Absolute&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">ImageSource</span>=<span class="string">&quot;/Images/happyface.png&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Opacity</span>=<span class="string">&quot;0.3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关联事件处理程序"><a href="#关联事件处理程序" class="headerlink" title="关联事件处理程序"></a>关联事件处理程序</h3><p>&emsp;&emsp;属性设置器是所有样式中最常见的要素，但也可以创建为事件关联特定事件处理程序的EventSetter 对象的集合。下面列举的示例为 MouseEnter 和 MouseLeave 事件关联事件处理程序:</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">属性设置</button><button type="button" class="tab " data-href="-2">事件处理代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;MouseOverHighlightStyle&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventSetter</span> <span class="attr">Event</span>=<span class="string">&quot;Button.MouseEnter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Handler</span>=<span class="string">&quot;element_MouseEnter&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventSetter</span> <span class="attr">Event</span>=<span class="string">&quot;Button.MouseLeave&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Handler</span>=<span class="string">&quot;element_MouseLeave&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource MouseOverHighlightStyle&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;A Coustinze Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">element_MouseEnter</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ((Button)sender).Background = <span class="keyword">new</span> SolidColorBrush(Colors.LightGoldenrodYellow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">element_MouseLeave</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ((Button)sender).Background = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;WPF 极少使用事件设置器这种技术。如果需要使用此处演示的功能，您可能更喜欢使用事件触发器，它以声明方式定义了所希望的行为(并且不需要任何代码)。事件触发器是专为实现动画而设计的，当创建鼠标悬停效果时它们更有用。<br>&emsp;&emsp;当处理使用冒泡路由策略的事件时，事件设置器并非好的选择。对于这种情况，在高层次的元素上处理希望处理的事件通常更容易。例如，如果希望将工具栏上的所有按钮连接到同一个Click事件处理程序，最好为包含所有按钮的Toolbar 元素关联单个事件处理程序。对于这种情况，没必要使用事件设置器。</p><h3 id="多层样式"><a href="#多层样式" class="headerlink" title="多层样式"></a>多层样式</h3><p>&emsp;&emsp;尽管可在许多不同层次定义任意数量的样式，但每个 WPF 元素一次只能使用一个样式对象。乍一看，这像是一种限制，但由于属性值继承和样式继承特性，这种限制实际上并不存在。</p><p>&emsp;&emsp;对于另外一些情况,可能希望在另一个样式的基础上创建样式。可通过为样式设置 BasedOn特性来使用此类样式继承。例如，分析下面两个样式:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;BigFontButtonStyle&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;EmphasizedBigFontButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BasedOn</span>=<span class="string">&quot;&#123;StaticResource BigFontButtonStyle&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Background&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;DarkBlue&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource EmphasizedBigFontButtonStyle&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;A Coustinze Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>可使用 <code>Basedon</code> 属性创建一条完整的样式继承链。唯一的规则是，如果两次设置了同一个属性，最后的属性设置器(在继承链中最远的派生类中的设置器)会覆盖其他以前的定义。</p></div><h3 id="通过类型自动应用样式"><a href="#通过类型自动应用样式" class="headerlink" title="通过类型自动应用样式"></a>通过类型自动应用样式</h3><p>&emsp;&emsp;特定类型的元素自动应用样式，只需要设置 <code>TargetType</code> 属性以指定合适的类型(如前所述)，并完全忽略键名。这样做时，WPF实际上是使用类型标记扩展来隐式地设置键名，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;现在，样式已自动应用于整个元素树中的所有按钮上。例如，如果在窗口中采用这种方式定义了一个样式，它会被应用到窗口中的每个按钮上(除非有一个更特殊的样式替换了该样式)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Style</span>=<span class="string">&quot;&#123;x:Null&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>将 <code>Style</code>属性设置为 <code>NULL</code>值，这样就有效地删除自动样式。</p></div><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>&emsp;&emsp;WPF 中有个主题，就是以声明方式扩展代码的功能。当使用样式、资源或数据绑定时，将发现即使不使用代码，也能完成不少工作。<br>&emsp;&emsp;触发器是另一个实现这种功能的例子。使用触发器，可自动完成简单的样式改变，而这通常需要使用样板事件处理逻辑。例如，当属性发生变化时可以进行响应，并自动调整样式。<br>&emsp;&emsp;触发器通过 <code>Style.Triggers</code> 集合链接到样式。每个样式都可以有任意多个触发器，而且每个触发器都是 <code>System.Windows.TriggerBase</code>的派生类的实例。</p><center>继承自TriggerBase的类</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Trigger</td><td>这是一种最简单的触发器。可以监测依赖项属性的变化，然后使用设置器改变样式</td></tr><tr><td>MultiTrigger</td><td>与Trigger类似，但这种触发器联合了多个条件。只有满足了所有这些条件，才会启动触发器</td></tr><tr><td>DataTrigger</td><td>这种触发器使用数据绑定。与Trigger类似，只不过监视的时任意绑定数据的变化</td></tr><tr><td>MultiDataTrigger</td><td>联合多个数据触发器</td></tr><tr><td>EventTrigger</td><td>这是最复杂的触发器。当事件发生时，这种触发器应用动画</td></tr></tbody></table><p>&emsp;&emsp;通过使用 <code>FrameworkElement.Triggers</code>集合,可直接为元素应用触发器,而不需要创建样式但这存在一个相当大的缺陷。这个 <code>Triggers</code> 集合只支持事件触发器(并非技术上的原因造成了该限制，只是因为 WPF 团队没时间实现该特性，将来的版本中可能包含该特性)。</p><h3 id="简单触发器"><a href="#简单触发器" class="headerlink" title="简单触发器"></a>简单触发器</h3><p>&emsp;&emsp;可为任何依赖项属性关联简单触发器。例如，可通过响应Control类的IsFocused、IsMouseOver 以及 IsPressed属性的变化，创建鼠标悬停效果和焦点效果。<br>&emsp;&emsp;每个简单触发器都指定了正在监视的属性，以及正在等待的属性值。当该属性值出现时，将应用存储在 Trigger.Setters 集合中的设置器(但不能使用更复杂的触发器逻辑。例如，比较某个值以查看其是否处于某个范围，或执行某种计算等。对于这些情况，最好使用事件处理程序)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                 <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;DarkRed&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;触发器的有点时不需要为翻转它们而编写任何逻辑。只要停止应用触发器，元素就会恢复到正常外观。</p><div class="note danger flat"><p>触发器时众多覆盖从依赖项属性返回的值的属性提供者之一。但原始的属性值（不管是在本地设置的还是通过样式设置的）仍会保留。<strong>只要触发器被禁用，触发器之前的属性值就会再次可用</strong></p></div><p>&emsp;&emsp;可创建一次应用于同一元素的多个触发器。如果这些触发器设置不同的属性，这种情况就不会出现混乱。然而，如果多个触发器修改同一属性，那么最后的触发器将有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsFocused&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                 <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;DarkRed&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                 <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;LightYellow&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">&quot;IsPressed&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                 <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Control.Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">Value</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果希望创建只有当几个条件都为真时才激活的触发器，可使用<code>MultiTrigger</code>。这种触发器提供了一个<code>Conditions</code>集合，可通过该集合定义一些列属性和值的组合。在下面的示例中，只有当按钮具有焦点而且鼠标悬停在该按钮上时，才会应用格式化信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MultiTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MultiTrigger.Conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Condition</span> <span class="attr">Property</span>=<span class="string">&quot;IsFocused&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                           <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Condition</span> <span class="attr">Property</span>=<span class="string">&quot;IsMouseOver&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                           <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">MultiTrigger.Conditions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MultiTrigger.Setters</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">Value</span>=<span class="string">&quot;DarkRed&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">MultiTrigger.Setters</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MultiTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>对于<code>MultiTrigger</code>不必关心声明条件的顺序，因为这些条件都必须保持为真</p></div><h3 id="事件触发器"><a href="#事件触发器" class="headerlink" title="事件触发器"></a>事件触发器</h3><p>&emsp;&emsp;普通触发器等待属性发生变化，而事件触发器等待特定的事件被引发。您可能会认为此时应使用设置器来改变元素，但情况并非如此。相反，事件触发器要求用户提供一系列修改控件的动作。这些动作通常被用于动画。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Times New Roman&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">Value</span>=<span class="string">&quot;Bold&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;MouseEnter&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                         <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                         <span class="attr">To</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">EventTrigger</span> <span class="attr">RoutedEvent</span>=<span class="string">&quot;MouseLeave&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">DoubleAnimation</span> <span class="attr">Duration</span>=<span class="string">&quot;0:0:0.2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                         <span class="attr">Storyboard.TargetProperty</span>=<span class="string">&quot;FontSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                         <span class="attr">To</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Storyboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">BeginStoryboard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">EventTrigger.Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在 XAML 中，必须在故事板中定义每个动画，故事板为动画提供了时间线。用户可以在故事板内部定义希望使用的一个或多个动画对象。每个动画对象执行本质上相同的任务:<code>在一定时期内修改依赖项属性</code>。</p><div class="note danger flat"><p>与属性触发器不同，如果希望元素返回到原始状态，需要反转事件触发器（这是因为默认的动画行为时一旦动画完成就继续处于激活状态，从而保持最后的属性值）</p></div><h2 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h2><p>&emsp;&emsp;样式提供了重用一组属性设置的实用方法。它们为帮助构建一致的、组织良好的界面迈出了重要的第一步——但是它们还有许多限制。</p><h3 id="创建行为"><a href="#创建行为" class="headerlink" title="创建行为"></a>创建行为</h3><ul><li><code>.Net Framework</code>：添加对<code>System.Windows.Interactivity.dll</code>的引用</li><li><code>.Net Core</code>：安装<code>Microsoft.Xaml.Behaviors.Wpf</code>Nuget包</li></ul><p>&emsp;&emsp;行为旨在封装一些U功能，从而可以不必编写代码就能够将其应用到元素上。从另一个角度看，每个行为都为元素提供了一个服务。该服务通常涉及监听几个不同的事件并执行几个相关的操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DragInCanvasBehavior</span> : <span class="title">Behavior</span>&lt;<span class="title">UIElement</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 跟踪放置此元素的Canvas。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Canvas? _canvas;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 跟踪元素被拖动的时间。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _isDragging = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当元素被点击时，记录点击的确切位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Point _mouseOffset;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnAttached</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AssociatedObject.MouseLeftButtonDown += AssociatedObject_MouseLeftButtonDown;</span><br><span class="line">        AssociatedObject.MouseMove += AssociatedObject_MouseMove;</span><br><span class="line">        AssociatedObject.MouseLeftButtonUp += AssociatedObject_MouseLeftButtonUp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnDetaching</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AssociatedObject.MouseLeftButtonDown -= AssociatedObject_MouseLeftButtonDown;</span><br><span class="line">        AssociatedObject.MouseMove -= AssociatedObject_MouseMove;</span><br><span class="line">        AssociatedObject.MouseLeftButtonUp -= AssociatedObject_MouseLeftButtonUp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AssociatedObject_MouseLeftButtonDown</span>(<span class="params"><span class="built_in">object</span> sender, System.Windows.Input.MouseButtonEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 找到Canvas</span></span><br><span class="line">        <span class="keyword">if</span> (_canvas == <span class="literal">null</span>)</span><br><span class="line">            _canvas = (Canvas)VisualTreeHelper.GetParent(AssociatedObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动拖动模式</span></span><br><span class="line">        _isDragging = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取点击相对于元素的位置</span></span><br><span class="line">        _mouseOffset = e.GetPosition(AssociatedObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 捕获鼠标这样就能一直收到MouseMove事件</span></span><br><span class="line">        AssociatedObject.CaptureMouse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AssociatedObject_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, System.Windows.Input.MouseEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDragging)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取元素相对于Canvas的位置</span></span><br><span class="line">            Point point = e.GetPosition(_canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移动元素</span></span><br><span class="line">            AssociatedObject.SetValue(Canvas.TopProperty, point.Y - _mouseOffset.Y);</span><br><span class="line">            AssociatedObject.SetValue(Canvas.LeftProperty, point.X - _mouseOffset.X);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AssociatedObject_MouseLeftButtonUp</span>(<span class="params"><span class="built_in">object</span> sender, System.Windows.Input.MouseButtonEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDragging)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 释放鼠标</span></span><br><span class="line">            AssociatedObject.ReleaseMouseCapture();</span><br><span class="line">            _isDragging = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用行为"><a href="#使用行为" class="headerlink" title="使用行为"></a>使用行为</h3><ul><li><code>.Net Framework</code>：添加对<code>System.Windows.Interactivity.dll</code>的引用</li><li><code>.Net Core</code>：安装<code>Microsoft.Xaml.Behaviors.Wpf</code>Nuget包</li></ul><p>&emsp;&emsp;下面的标记创建一个具有三个图形的Canvas面板，两个Ellipse元素使用了<code>DragInCanvasBehavior</code>，并能在Canvas面板中拖动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:res</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:i</span>=<span class="string">&quot;http://schemas.microsoft.com/xaml/behaviors&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:custom</span>=<span class="string">&quot;clr-namespace:BehaviorsLibrary;assembly=BehaviorsLibrary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Canvas.Left</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">Canvas.Top</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">Fill</span>=<span class="string">&quot;Yellow&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">Width</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">Height</span>=<span class="string">&quot;60&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Canvas.Left</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Canvas.Top</span>=<span class="string">&quot;70&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Fill</span>=<span class="string">&quot;Blue&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Height</span>=<span class="string">&quot;60&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i:Interaction.Behaviors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">custom:DragInCanvasBehavior</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">i:Interaction.Behaviors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Canvas.Left</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Canvas.Top</span>=<span class="string">&quot;70&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Fill</span>=<span class="string">&quot;OrangeRed&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Width</span>=<span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">Height</span>=<span class="string">&quot;70&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i:Interaction.Behaviors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">custom:DragInCanvasBehavior</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">i:Interaction.Behaviors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Blend中的设计时行为支持"><a href="#Blend中的设计时行为支持" class="headerlink" title="Blend中的设计时行为支持"></a>Blend中的设计时行为支持</h3><p>&emsp;&emsp;在 Expression Blend中，对行为的操作就是拖放和配置操作。为给控件添加动作，从AssetLibrary中拖动一个动作，然后将其拖动到控件上(在该例中，是 Canvas 面板中的某个形状)。当采取这一步骤时，Expression Blend 会自动创建行为，然后可以配置该行为(如果行为具有属性的话)。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240704211253.png" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;样式(&lt;code&gt;style&lt;/code&gt;)时组织和重用格式化选项的重要工具。不是使用重复的标记填充XAML，以便设置外边距、内边距、颜色以及字体等细节，而是创建一系列封装所有这些细节的样式，然后在需要之处通过属性来应用样式&lt;br&gt;&amp;emsp;&amp;em</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 10资源</title>
    <link href="http://bootree.cn/2024/06/29/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/10%E8%B5%84%E6%BA%90/"/>
    <id>http://bootree.cn/2024/06/29/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/10%E8%B5%84%E6%BA%90/</id>
    <published>2024-06-29T01:16:47.000Z</published>
    <updated>2024-07-03T12:54:15.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源基础"><a href="#资源基础" class="headerlink" title="资源基础"></a>资源基础</h2><p>&emsp;&emsp;WPF允许在代码中以及在标记中的各个位置定义资源（和特定的控件、窗口一起定一，或在整个应用程序中定义）。资源具有很多重要的优点，如下所述：</p><ul><li><strong>高效</strong>：可以通过资源定义对象，并在标记中的多个地方使用。这会精简代码，使其更高效</li><li><strong>可维护性</strong>：可通过资源使用低级的格式化细节(如字号)，并将它们移到便于对其进行修改的中央位置。在XAML中创建资源相当于在代码中创建常量。</li><li><strong>适应性</strong>：一旦特定信息与应用程序的其他部分分离开来，并放置到资源部分中，就可以动态地修改这些信息。例如，可能希望根据用户的个人喜好或当前语言修改资源的细节。</li></ul><h3 id="资源集合"><a href="#资源集合" class="headerlink" title="资源集合"></a>资源集合</h3><p>&emsp;&emsp;每个元素都有<code>Resources</code>属性，该属性存储了一个资源字典集合（它是<code>ResourceDIctionary</code>类的示例）。资源集合可包含任意类型的对象，并根据字符串编写索引。</p><p>&emsp;&emsp;尽管每个元素都提供了 Resources 属性(该属性作为 FrameworkElement 类的一部分定义),但通常在窗口级别定义资源。这是因为每个元素都可以访问各自资源集合中的资源，也可以访问所有父元素的资源集合中的资源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;Pink&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="资源的层次"><a href="#资源的层次" class="headerlink" title="资源的层次"></a>资源的层次</h3><p>&emsp;&emsp;每个元素都有自己的资源集合，为了找到期望的资源，WPF在元素树中进行递归搜索。在使用静态资源时，必须中是在引用资源之前在标记中定义资源。一般采用就近原则</p><h3 id="静态资源和动态资源"><a href="#静态资源和动态资源" class="headerlink" title="静态资源和动态资源"></a>静态资源和动态资源</h3><ul><li>静态资源只从资源集合中获取对象一次。根据对象的类型（以及使用对象的方式），对象的任何变化都可能被立即注意到。</li><li>动态资源在每次需要对象时都会重新从资源集合中查找对象。这意味着可在同一键下放置一个全新对象，而且动态资源会应用看变化</li></ul><p>&emsp;&emsp;作为一般规则，只有在下列情况下才需要使用动态资源：</p><ul><li>资源具有依赖于系统设置的属性（如当前Windows操作系统的颜色或字体）</li><li>准备通过编程方式替换资源对象（例如，实现几类动态皮肤特性）</li></ul><p>&emsp;&emsp;然而，不应过度使用动态资源。主要问题时对资源的修改未必会触发对用户界面的更新。许多情况下，需要在控件中显示动态内容，而且控件需要随着内容的改变调整自身。对于这种情况，使用数据绑定更合理。</p><div class="note info flat"><p>在极少数情况下，动态资源还用于提高第一次加载窗口时的性能。这是因为动态资源中是在创建窗口时加载，而动态资源在第一次使用时加载。然而，除非资源非常大并且非常复杂（在这这种情况下，解析资源标记会耗时较长时间），否则否则这样做没有任何溢出。</p></div><h3 id="非共享资源"><a href="#非共享资源" class="headerlink" title="非共享资源"></a>非共享资源</h3><p>&emsp;&emsp;通常，在多个地方使用某种资源时，使用的是同一个对象实例。这种行为——称为共享通常这也正是所希望的。然而，也可能希望告诉解析器在每次使用时创建单独的对象实例。为关闭共享行为，需要使用<code>Shared</code>特性，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageBrush x:Key=<span class="string">&quot;TileBrush&quot;</span> x:Shared=<span class="string">&quot;False&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;很少有理由需要使用非共享的资源。如果希望以后分别修改资源实例，可考虑使用非共享资源。例如，可创建包含几个使用同一画刷按钮的窗口，并关闭共享行为，从而可以分别改变每个画刷。由于效率低下，这种方式不常见。在这个示例中，开始时告诉所有按钮使用同一个画刷，当需要时再创建并应用新的画刷，这样可能更好。这样，只有当确实需要时才承担额外的画刷对象开销。</p><p>&emsp;&emsp;使用非共享资源的另一个原因是，可能希望以一种原本不允许的方式重用某个对象。例如,使用该技术，可将某个元素(如一幅图像或一个按钮)定义为资源，然后在窗口的多个不同位置显示该元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span> <span class="attr">x:Key</span>=<span class="string">&quot;border&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">x:Shared</span>=<span class="string">&quot;False&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">&quot;Pink&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;StaticResource border&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;StaticResource border&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContentControl</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;StaticResource border&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过代码访问资源"><a href="#通过代码访问资源" class="headerlink" title="通过代码访问资源"></a>通过代码访问资源</h3><p>&emsp;&emsp;通常在标记中定义和使用资源。如有必要，也可在代码中使用资源集合。正如已经看到的，可通过名称从资源集合中提取资源。为此，需要使用正确元素的资源集合</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> brush = (ImageBrush)FindResource(<span class="string">&quot;TileBrush&quot;</span>);</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>可使用<code>TryFindResource()</code>方法替代<code>FindResource()</code>方法。如果找不到资源，该方法会会返回null引用，而不是抛出异常。</p></div><p>&emsp;&emsp;此外，还可通过编写代码添加资源。选择希望放置资源的元素，并使用资源集合的<code>Add()</code>方法。然而，通常在标记中定义资源。</p><h3 id="应用程序资源"><a href="#应用程序资源" class="headerlink" title="应用程序资源"></a>应用程序资源</h3><p>&emsp;&emsp;窗口不是查找资源的最后一站。如果在控件或其容器中(直到包含窗口或页面)找不到指定的资源，WPF 会继续检査为应用程序定义的资源集合。在 VisualStudio 中,这些资源是在 App.xaml文件的标记中定义的资源，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.App&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">StartupUri</span>=<span class="string">&quot;MainWindow.xaml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;TileBrush&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">TileMode</span>=<span class="string">&quot;Tile&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ViewboxUnits</span>=<span class="string">&quot;Absolute&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Viewport</span>=<span class="string">&quot;0 0 32 32&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ImageSource</span>=<span class="string">&quot;happyface.jpg&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">Opacity</span>=<span class="string">&quot;0.3&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在创建应用程序资源之前，需要考虑在复杂性和重用性之间取得平衡。添加应用程序资源可提高重用性，但会增加复杂性，因为没有立即明确哪些窗口使用给定的资源(从概念上讲，这与使用太多全局变量的旧式 C++程序一样)。一条正确的指导原则是:如果对象需要被广泛重用(例如，在许多窗口中重用)，可使用应用程序资源;如果只是在两三个窗口中使用，可考虑在每个窗口中分别定义资源。</p><h3 id="系统资源"><a href="#系统资源" class="headerlink" title="系统资源"></a>系统资源</h3><p>&emsp;&emsp;动态资源主要用于辅助应用程序对系统环境设置的变化做出响应，为此需要使用三个类，分别时<code>SystemColors</code>、<code>SystemFonts</code>和<code>SystemParameters</code>，这些类都位于<code>System.Windows</code>名称空间中。<code>SystemColors</code>类用于访问颜色设置；<code>SystemFonts</code>类用于访问字体设置；而<code>SystemParameters</code>类封装了大量的设置列表，这些设置描述了各种屏幕元素的标准尺寸、键盘和鼠标设置、屏幕尺寸以及各种图形效果（如热跟踪、阴影以及当拖动窗口时显示窗口内容）是否已经打开。</p><div class="note warning flat"><p><code>SystemColors</code>和<code>SystemFonts</code> 类有两个版本，它们分别位于 <code>System.Windows </code>名称空间和<code>System.Drawing</code>名称空间。<code>System.Windows</code>名称空间中的版本是 WPF 的一部分，它们使用正确的数据类型并且支持资源系统。位于<code>System.Drawing</code>名称空间中的版本是 Windows 窗体的一部分，对于WPF应用程序，它们没有用处。</p></div><p>&emsp;&emsp;<code>SystemColors</code>、<code>SystemFonts</code>和<code>SystemParameters</code>类通过静态属性公开了它们的所有细节，可通过如下方式使用：</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">C#</button><button type="button" class="tab " data-href="-2">XAML</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用颜色</span></span><br><span class="line">txt.Foreground = <span class="keyword">new</span> SolidBrush(SYstemColors.WindowTextColor);</span><br><span class="line"><span class="comment">// 使用现成画刷</span></span><br><span class="line">txt.Foreground = SystemColors.WindowTextBrush;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Foreground</span>=<span class="string">&quot;&#123;x:Static SystemColors.WindowTextBrush&#125;&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;上面的示例没有使用资源，这可能会引发一个小问题——当解析窗口并创建标签时，会根据当前窗口文本颜色的“快照”创建画刷。如果在应用程序运行时（在显示了包含标签的窗口后）改变了Windows颜色，<code>TextBlock</code>控件不会更新自身。为了解决这个问题，<code>不能讲Foreground属性直接设置为画刷对象，而是需要将它设置为封装了该系统资源的DynamicResource对象</code>。</p><div class="note info flat"><p>所有<code>SystemXXX</code>类都提供了可返回<code>ResourceKey</code>对象引用的补充属性集，使用这些引用可从系统资源集合中提取资源。这些属性于直接返回对象的普通属性同名，后面加上单词<code>Key</code></p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Foreground</span>=<span class="string">&quot;&#123;DynamicResource &#123;x:Static SystemColors.WindowTextBrushKey&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">Text</span>=<span class="string">&quot;Ordinary text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="资源字典"><a href="#资源字典" class="headerlink" title="资源字典"></a>资源字典</h2><p>&emsp;&emsp;如果希望在多个项目之间共享资源，可创建资源字典。资源字典只是XAML文档，除了存储希望使用的资源外，不做其他任何事情。</p><h3 id="创建资源字典"><a href="#创建资源字典" class="headerlink" title="创建资源字典"></a>创建资源字典</h3><p>&emsp;&emsp;当为应用程序添加资源字典时，务必将Build Action 设置为 Page(与其他任意 XAML 文件一样)。这样可保证为了获得最佳性能而将资源字典编译为 BAML。不过，将资源字典的 BuildAction 设置为 Resource 也是非常完美的,这样它会被嵌入到程序集中,但是不会被编译。当然,在运行时解析它的速度要稍慢一些。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">&quot;DefaultButtonStyle&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Button&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Background&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;Purple&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Foreground&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;White&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用资源字典"><a href="#使用资源字典" class="headerlink" title="使用资源字典"></a>使用资源字典</h3><p>&emsp;&emsp;为了使用资源字典，需要将其合并到应用程序某些位置的资源集合中。例如，可在特定窗口中执行此操作，但通常将其合并到应用程序的资源集合中，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.App&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">StartupUri</span>=<span class="string">&quot;MainWindow.xaml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;ButtonStyles.xaml&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果希望添加自己的资源并合并到资源字典中，只需要在MergedDictionaries部分之前或之后放置资源就可以了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>在相互重叠的不同资源集合中存储同名的资源是完全合理的。然而，不允许合并使用相同资源名称的资源字典。如果使用重复的资源名称，当编译应用程序时将收到XamlParseException异常。</p></div><p>&emsp;&emsp;使用资源字典的一个原因时为了定义一个活多个可重用的应用程序“皮肤”，可将“皮肤”应用到控件上。另一个原因时为了存储需要被本地化的内容（如错误消息字符串）</p><h3 id="在程序集之间共享资源"><a href="#在程序集之间共享资源" class="headerlink" title="在程序集之间共享资源"></a>在程序集之间共享资源</h3><p>&emsp;&emsp;当共享包含一个或多个资源字典的编译过的程序集时，还需要面对另一种挑战-- 需要有一种方法来提取所希望的资源并在应用程序中使用资源。为此，可使用两种方法。最直观的解决方法是使用代码创建合适的ResourceDictionary对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ResourceDictionary resourceDictionary = <span class="keyword">new</span> ResourceDictionary();</span><br><span class="line"><span class="comment">// pack URI语法</span></span><br><span class="line">resourceDictionary.Source = <span class="keyword">new</span> Uri(</span><br><span class="line">    <span class="string">&quot;ResourceLibrary;component/ReusablkeDictionary.xaml&quot;</span>,UriKind.Relative</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的代码片段使用了在本章前面介绍的packURI语法。它构造了一个相对URI，该URI指向另一个程序集中名为 ReusableDictionary.xaml 的编译过的 XAML 资源。一旦创建ResourceDictionary对象，就可以从集合中手动检索所需的资源了:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.Background = (Brush)resourceDictionary[<span class="string">&quot;TileBrush&quot;</span>];</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然而，不必手动指定资源。当加载新的资源字典时，窗口中的所有 DynamicResource 引用都会被自动重新评估。当构建动态皮肤特性时,将看到使用这种技术。</p><p>&emsp;&emsp;如果不想编写任何代码，还有另一种选择。可使用<code>ComponentResourceKey</code> 标记扩展，该标记扩展是专门针对这种情况而设计的。使用<code>ComponentResourceKey</code>为资源创建键名。通过执行这一步骤，告知 WPF 您准备在程序集之间共享资源。</p><div class="note info flat"><p>命名资源的最常用方式就是使用字符串。然而，WPF还提供了一些聪明的资源扩展功能，当使用特定类型的非字符串键名时，它们会自动起作用。例如，在下一章将看到，对于样式，可使用Type对象作为键名。这会告诉 WPF 自动将样式应用到相应类型的元素上。同样，可为希望在程序集之间共享的任何资源使用 <code>ComponentResourceKey</code>实例作为键名。</p></div><p>&emsp;&emsp;在继续执行任何操作前，需要确保已经为资源字典提供了正确的名称。为了让这种技巧生效，必须将资源字典放置到generic.xaml文件中，并且必须将该文件放到应用程序文件夹的Themes 子文件夹中。generic.xaml 文件中的资源被认为是默认主题的一部分，并且它们总是可用的</p><center>使用类库共享资源</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240702212422.png" width="50%"/><p>&emsp;&emsp;下一步是为存储在ResourceLibrary程序集中希望共享的资源创建键名。当使用ComponentResourceKey时，需要提供两部分信息:<code>类库程序集中类的引用和描述性的资源ID</code>。类引用是 WPF允许和其他程序集共享资源的关键部分。当使用资源时，需要提供相同的类引用和资源 ID。<br>&emsp;&emsp;该类的实际外观并不重要，它不需要包含代码。定义该类型的程序集就是ComponentResourceKey 将要从中查找资源的程序集。如下<code>CustomResources</code>所示</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomResources</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;现在可以使用该类和资源ID创建键名了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:ResourceLibrary&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;&#123;ComponentResourceKey TypeInTargetAssembly=&#123;x:Type local:CustomResources&#125;,ResourceId=PrimarySolidBrush&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Color</span>=<span class="string">&quot;Green&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;使用包含<code>ComponentResourceKey</code>的<code>DynamicaResource</code>（这是合理的，因为<code>ComponentResourceKey</code>时资源名）。在使用资源字典的应用程序中国使用的<code>ComponentResourceKey</code>，就是在类库中使用的<code>ComponentResourceKey</code>，再次提供了对同一个类的引用和相同的资源ID.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:res</span>=<span class="string">&quot;clr-namespace:ResourceLibrary;assembly=ResourceLibrary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Background</span>=<span class="string">&quot;&#123;DynamicResource &#123;ComponentResourceKey TypeInTargetAssembly=&#123;x:Type res:CustomResources&#125;,ResourceId=PrimarySolidBrush&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            A Resource From ResourceLinrary</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>当使用<code>ComponentResourceKey</code>时，必须使用动态资源，不能使用静态资源</p></div><p>&emsp;&emsp;还可以采取一个附加步骤，使资源更容易使用。可定义一个静态属性，让它返回需要使用的正确<code>ComponentResourceKey</code>。通常在组件的类中定义该属性，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomResources</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ComponentResourceKey PrimarySolidBrushKey</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ComponentResourceKey(</span><br><span class="line">                typeInTargetAssembly: <span class="keyword">typeof</span>(CustomResources),</span><br><span class="line">                resourceId: <span class="string">&quot;PrimarySolidBrush&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;现在可使用<code>Static</code>标记扩展访问该属性并应用资源，而不必在标记中使用很长的<code>ComponentResourceKey</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Background</span>=<span class="string">&quot;&#123;DynamicResource &#123;x:Static res:CustomResources.PrimarySolidBrushKey&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    A Resource From ResourceLinrary</span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在本质上，这种便捷方法与前面介绍的<code>Systemxcx</code>类使用相同的技术。例如，当检索<code>SystemColors.WindowTextBrushKey</code> 时，所接收的也是正确的资源键对象。唯一的区别是，它是私有 <code>SystemResourceKey</code>(而不是 <code>ComponentResourceKey</code>)的一个实例。这两个类都继承自ResourceKey 抽象类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;资源基础&quot;&gt;&lt;a href=&quot;#资源基础&quot; class=&quot;headerlink&quot; title=&quot;资源基础&quot;&gt;&lt;/a&gt;资源基础&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;WPF允许在代码中以及在标记中的各个位置定义资源（和特定的控件、窗口一起定一，或在整个应用程序中定义</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>51单片机从入门到入坟 - 05点亮第一个LED</title>
    <link href="http://bootree.cn/2024/06/25/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/05%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E4%B8%AALED/"/>
    <id>http://bootree.cn/2024/06/25/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/05%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E4%B8%AALED/</id>
    <published>2024-06-25T14:16:22.000Z</published>
    <updated>2024-06-25T15:14:36.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="51单片机GPIO介绍"><a href="#51单片机GPIO介绍" class="headerlink" title="51单片机GPIO介绍"></a>51单片机GPIO介绍</h2><div class="note danger flat"><p>51单片机4类GPIO口特点说明：</p></div><ol><li>P0口是漏极开路，要使其输出高电平，必须外接上拉电阻，通常选择<code>4.7K~10K</code>阻值</li><li>P0、P1、P2几乎都用做普通I&#x2F;O口使用，即可作为输入，有课作为输出</li><li>P3口即可用作普通I&#x2F;O口，又可作为第二功能使用，比如窗口、外部中断、计数器等</li></ol><h3 id="GPIO概念"><a href="#GPIO概念" class="headerlink" title="GPIO概念"></a>GPIO概念</h3><p>&emsp;&emsp;GPIO(general purpose intput output)是通用输入输出端口的简称，可以通过软件来控制其输入和输出。51单片机芯片的GPIO引脚与外部设备连接起来，从而实现与外部通讯、控制以及数据采集的功能。不过 GPIO 最简单的应用还属点亮 LED 灯了，只需通过软件控制 GPIO 输出高低电平即可。当然 GPIO还可以作为输入控制，比如在引脚上接入一个按键，通过电平的高低判断按键是否按下。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240625222208.png" /><p>&emsp;&emsp;GPIO引脚图中带有<code>Px.x</code>等字样的均属于GPIO引脚。从引脚图可以看出，GPIO占用了芯片大部分的引脚，共达32个，分为4组，P0、P1、P2、P3，每组为8可IO，而且在P3组中每个IO都具备额外功能，只要通过相应的寄存器设置即可配置对应的附加功能，同一时刻，每个引脚只能使用该引脚的一个功能。</p><h3 id="GPIO结构框图于工作原理"><a href="#GPIO结构框图于工作原理" class="headerlink" title="GPIO结构框图于工作原理"></a>GPIO结构框图于工作原理</h3><h4 id="P0端口"><a href="#P0端口" class="headerlink" title="P0端口"></a>P0端口</h4><p>&emsp;&emsp;P0端口还有8位引脚，下图为其中一个，其他几个与之完全一致，因此只需了解当中一个即可。如下图所示：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240625222754.png" width="70%"/><p>&emsp;&emsp;由上图可见，P0端口由锁存器、输入缓冲器、切换开关、一个非门、一个与非门及场效应管驱动电路构成。再看图的最右边，标号为<code>P0.x</code>引脚的图标，也就是说<code>P0.x</code>引脚可以是P0.0到P0.7的任何一位，即在P0口由8可于上图相同的电路组成。</p><blockquote><p>输入缓冲器</p></blockquote><p>&emsp;&emsp;在 P0口中，有两个三态的缓冲器，在学数字电路时，我们已知道，三态门有三个状态,即在输出端可以是高电平、低电平,同时还有一种就是高阻状态(或称为禁止状态)，大家看上图，上面一个是读锁存器的缓冲器，也就是说，要读取D锁存器输出端Q的数据，那就得使读锁存器的这个缓冲器的三态控制端(上图中标号为&#39;读锁存器’端)有效。下面一个是读引脚的缓冲器，要读取 P0.x引脚上的数据，也要使标号为&#39;读引脚’的这个三态缓冲器的控制端有效，引脚上的数据才会传输到我们单片机的内部数据总线上。</p><blockquote><p>D锁存器</p></blockquote><p>&emsp;&emsp;构成一个锁存器，通常要用一个时序电路，时序的单元电路在学数字电路时我们已知道，一个触发器可以保存一位的二进制数(即具有保持功能)，在51单片机的 32 根 I&#x2F;O 口线中都是用一个D触发器来构成锁存器的。大家看上图中的D锁存器，D端是数据输入端，CP(CLK)是控制端(也就是时序控制信号输入端)，Q是输出端，Q 非是反向输出端。<br>&emsp;&emsp;对于D触发器来讲，当D输入端有一个输入信号，如果这时控制端 CP没有信号(也就是时序脉冲没有到来)，这时输入端D的数据是无法传输到输出端Q及反向输出端Q非的。如果时序控制端CP的时序脉冲一旦到了，这时D端输入的数据就会传输到Q及Q非端。数据传送过来后，当CP时序控制端的时序信号消失了，这时，输出端还会保持着上次输入端D的数据(即把上次的数据锁存起来了)。如果下一个时序控制脉冲信号来了，这时D端的数据才再次传送到Q端，从而改变Q端的状态。</p><blockquote><p>多路开关</p></blockquote><p>&emsp;&emsp;在 51 单片机中，当内部的存储器够用(也就是不需要外扩展存储器时，这里讲的存储器包括数据存储器及程序存储器)时，P0 口可以作为通用的输入输出端口(即 I&#x2F;O)使用，对于 8031(内部没有 ROM)的单片机或者编写的程序超过了单片机内部的存储器容量，需要外扩存储器时，P0口就作为&#39;地址&#x2F;数据总线使用。那么这个多路选择开关就是用于选择是做为普通 I&#x2F;O 口使用还是作为数据&#x2F;地址’总线使用的选择开关了。大家看上图，当多路开关与下面接通时P0 口是作为普通的 I&#x2F;O 口使用的,当多路开关是与上面接通时,P0 口是作为&#39;地址&#x2F;数据’总线使用的。</p><blockquote><p>场效应管输出驱动</p></blockquote><p>&emsp;&emsp;从上图中可以看出，P0 口的输出是由两个 MOS 管组成的推拉式结构，也就是说，这两个 MOS 管一次只能导通一个，当 V1 导通时，V2 就截止，当 V2 导通时V1 截止。</p><h4 id="P1端口"><a href="#P1端口" class="headerlink" title="P1端口"></a>P1端口</h4><p>&emsp;&emsp;P1 口的结构最简单，用途也单一，仅作为数据输入&#x2F;输出端口使用。输出的信息有锁存，输入有读引脚和读锁存器之分。P1端口的一位结构见下图:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240625230618.png" width="70%"/><p>&emsp;&emsp;由图可见，P1 端口与 P0 端口的主要差别在于，P1 端口用内部上拉电阻 R 代替了 P0 端口的场效应管 V1，并且输出的信息仅来自内部总线。由内部总线输出的数据经锁存器反相和场效应管反相后，锁存在端口线上，所以，P1 端口是具有输出锁存的静态口。<br>&emsp;&emsp;要正确地从引脚上读入外部信息，必须先使场效应管关断，以便由外部输入的信息确定引脚的状态。为此，在作引脚读入前，必须先对该端口写入 l。具有这种操作特点的输入&#x2F;输出端口，称为准双向 I&#x2F;O 口。8051 单片机的 P1、P2、P3 都是准双向口。P0 端口由于输出有三态功能，输入前，端口线已处于高阻态，无需先写入 l 后再作读操作</p><h4 id="P2端口"><a href="#P2端口" class="headerlink" title="P2端口"></a>P2端口</h4><p>&emsp;&emsp;P2 端口的一位结构见下图:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240625230815.png" width="70%"/><p>&emsp;&emsp;由图可见，P2 端口在片内既有上拉电阻，又有切换开关 MUX，所以 P2 端口在功能上兼有 P0 端口和 P1 端口的特点。这主要表现在输出功能上，当切换开关向下接通时，从内部总线输出的一位数据经反相器和场效应管反相后，输出在端口引脚线上；当多路开关向上时，输出的一位地址信号也经反相器和场效应管反相后，输出在端口引脚线上。<br>&emsp;&emsp;P2 口既可作为 I&#x2F;O 口使用，也可作为地址总线使用，通常主要用作 I&#x2F;O 口使用，地址总线使用不作分析。</p><h4 id="P3端口"><a href="#P3端口" class="headerlink" title="P3端口"></a>P3端口</h4><p>&emsp;&emsp;P3 口是一个多功能口，它除了可以作为 I&#x2F;O 口外，还具有第二功能，P3 端口的一位结构见下图：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240625230949.png" width="70%"/><p>&emsp;&emsp;由上图可见，P3 端口和 Pl 端口的结构相似，区别仅在于 P3 端口的各端口线有两种功能选择。当处于第一功能时，第二输出功能线为 1，此时，内部总线信号经锁存器和场效应管输入&#x2F;输出，其作用与 P1 端口作用相同，也是静态准双向 I&#x2F;O 端口。当处于第二功能时，锁存器输出 1，通过第二输出功能线输出特定的内含信号，在输入方面，即可以通过缓冲器读入引脚信号，还可以通过替代输入功能读入片内的特定第二功能信号。由于输出信号锁存并且有双重功能，故P3 端口为静态双功能端口。有关 P3 口第二功能，在前面章节芯片管脚功能定义已经讲解过，此处不再重复</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;51单片机GPIO介绍&quot;&gt;&lt;a href=&quot;#51单片机GPIO介绍&quot; class=&quot;headerlink&quot; title=&quot;51单片机GPIO介绍&quot;&gt;&lt;/a&gt;51单片机GPIO介绍&lt;/h2&gt;&lt;div class=&quot;note danger flat&quot;&gt;&lt;p&gt;51单片</summary>
      
    
    
    
    <category term="MCU" scheme="http://bootree.cn/categories/MCU/"/>
    
    <category term="51MCU" scheme="http://bootree.cn/categories/MCU/51MCU/"/>
    
    
    <category term="51单片机从入门到入坟" scheme="http://bootree.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git基础教程</title>
    <link href="http://bootree.cn/2024/06/25/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <id>http://bootree.cn/2024/06/25/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</id>
    <published>2024-06-25T11:49:46.000Z</published>
    <updated>2024-06-25T14:52:46.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><h3 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h3><p>&emsp;&emsp;用于设置提交记录中的用户名和邮箱，这些信息会出现在每一次提交中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;john.doe@example.com&quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><div class="note warning flat"><p>  Git通过SSH连接Github，详情可见 <a class="btn-beautify green larger" href="/2024/05/27/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/git%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5github/" title="SSH配置"><i class="far fa-hand-point-right"></i><span>SSH配置</span></a></p></div><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><h3 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h3><p>&emsp;&emsp;在当前目录下创建一个新的Git仓库，生成一个隐藏的<code>.git</code>目录用于存放Git的所有版本控制信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# MyExample&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/cnlicm/MyExample.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="克隆git仓库"><a href="#克隆git仓库" class="headerlink" title="克隆git仓库"></a>克隆git仓库</h3><p>&emsp;&emsp;从远程仓库复制一个完整的Git仓库到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt; [localRepositoryName]</span><br></pre></td></tr></table></figure><ul><li><strong>url(必填)</strong> ：Git仓库地址</li><li><strong>localRepositoryName(可选)</strong> ：克隆后本地仓库的名称，若未指定默认采用远程仓库的名字</li></ul><p>&emsp;&emsp;克隆时，可以用不同的协议，包括<code>ssh</code>、<code>git</code>、<code>https</code>等，其中最常用的是ssh，因为速度较快，还可以配置公钥免输入密码，各种写法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com/example/example.git            --SSH协议</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/example/example.git          --GIT协议</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/example/example.git        --HTTPS协议</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><p>&emsp;&emsp;将指定文件的改动添加到暂存区。可以使用<code>.</code>添加所有改动的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><h3 id="查看文件的状态"><a href="#查看文件的状态" class="headerlink" title="查看文件的状态"></a>查看文件的状态</h3><p>&emsp;&emsp;显示当前工作目录和暂存区的状态，显示哪些文件发生了变化但还未暂存，哪些文件已经暂存但未提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="查看更新的详细信息"><a href="#查看更新的详细信息" class="headerlink" title="查看更新的详细信息"></a>查看更新的详细信息</h3><p>&emsp;&emsp; 执行 <code>git diff</code> 来查看更新的详细信息，与<code>git status</code>不同的是，<code>git status</code>只显示更新的状态，而 <code>git diff</code> 可以显示已写入缓存与已修改但尚未写入缓存的改动的区别具体的详细信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><h3 id="提交暂存区文件到本地仓库"><a href="#提交暂存区文件到本地仓库" class="headerlink" title="提交暂存区文件到本地仓库"></a>提交暂存区文件到本地仓库</h3><p>&emsp;&emsp;将暂存区的所有内容提交到本地仓库，并附带一条提交信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>&emsp;&emsp;使用<code>git log</code>可查看提交历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="撤销暂存区的改动"><a href="#撤销暂存区的改动" class="headerlink" title="撤销暂存区的改动"></a>撤销暂存区的改动</h3><p>&emsp;&emsp;将文件从暂存区移除，但保留工作目录的改动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD README.md</span><br></pre></td></tr></table></figure><h3 id="撤销工作区的改动"><a href="#撤销工作区的改动" class="headerlink" title="撤销工作区的改动"></a>撤销工作区的改动</h3><p>&emsp;&emsp;将文件恢复到最近一次提交的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>&emsp;&emsp;如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 Changes not staged for commit 的提示。要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以如下使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file&gt;</span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> -f &lt;file&gt; <span class="comment"># 强制删除，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt; <span class="comment"># 仅删除暂存区跟踪状态不会删除文件</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> –r * <span class="comment"># 可递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="移动或重命名文件"><a href="#移动或重命名文件" class="headerlink" title="移动或重命名文件"></a>移动或重命名文件</h3><p>&emsp;&emsp;<code>git mv </code>命令用于移动或重命名一个文件、目录、软连接，如要将一个test.txt文件重命名为newtest.txt，则可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> test1.txt test2.txt <span class="comment"># 原地移动可实现重命名</span></span><br></pre></td></tr></table></figure><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h3><p>&emsp;&emsp;列出所有本地分支，当前所在的分支前会有一个星号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><p>&emsp;&emsp;创建一个新的分支，但不会自动切换到新分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch main</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>&emsp;&emsp;切换到指定的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br></pre></td></tr></table></figure><h3 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支"></a>创建并切换到新分支</h3><p>&emsp;&emsp;创建一个新分支并自动切换到该分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这是一个符合操作，类似于执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;        <span class="comment"># 创建新分支</span></span><br><span class="line">git checkout &lt;branch-name&gt;      <span class="comment"># 切换到新分支</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b pro</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>&emsp;&emsp;删除指定的本地分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d pro</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>&emsp;&emsp;将指定分支的历史记录和改动合并到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将dev分支合并到main分支</span></span><br><span class="line">git checkout main</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><p>&emsp;&emsp;列出所有远程仓库的别名及其对应的URL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>&emsp;&emsp;为当前仓库添加一个新的远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;repository_url&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/cnlicm/MyExample.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>&emsp;&emsp;将本地分支的更新推送到指定的远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h3 id="拉去远程仓库的更新"><a href="#拉去远程仓库的更新" class="headerlink" title="拉去远程仓库的更新"></a>拉去远程仓库的更新</h3><p>&emsp;&emsp;从远程仓库拉取更新并合并到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>&emsp;&emsp;为当前提交创建一个标签，标签通常用于标记重要的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><p>&emsp;&emsp;列出所有标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h3><p>&emsp;&emsp;将指定标签推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure><h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2><p>&emsp;&emsp;<code>.gitignore </code>文件用于指定哪些文件或目录不应被Git管理。例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Ignore Visual Studio temporary files, build results, and</span></span><br><span class="line"><span class="comment">## files generated by popular Visual Studio add-ons.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vscode</span></span><br><span class="line">.vscode</span><br><span class="line"></span><br><span class="line"><span class="comment"># User-specific files</span></span><br><span class="line">*.suo</span><br><span class="line">*.user</span><br><span class="line">*.userosscache</span><br><span class="line">*.sln.docstates</span><br><span class="line"></span><br><span class="line"><span class="comment"># User-specific files (MonoDevelop/Xamarin Studio)</span></span><br><span class="line">*.userprefs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build results</span></span><br><span class="line">[Dd]ebug/</span><br><span class="line">[Dd]ebugPublic/</span><br><span class="line">[Rr]elease/</span><br><span class="line">[Rr]eleases/</span><br><span class="line">x64/</span><br><span class="line">x86/</span><br><span class="line">bld/</span><br><span class="line">[Bb]<span class="keyword">in</span>/</span><br><span class="line">[Oo]bj/</span><br><span class="line">[Ll]og/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio 2015 cache/options directory</span></span><br><span class="line">.vs/</span><br><span class="line"><span class="comment"># Uncomment if you have tasks that create the project&#x27;s static files in wwwroot</span></span><br><span class="line"><span class="comment">#wwwroot/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MSTest test Results</span></span><br><span class="line">[Tt]est[Rr]esult*/</span><br><span class="line">[Bb]uild[Ll]og.*</span><br><span class="line"></span><br><span class="line"><span class="comment"># NUNIT</span></span><br><span class="line">*.VisualState.xml</span><br><span class="line">TestResult.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Results of an ATL Project</span></span><br><span class="line">[Dd]ebugPS/</span><br><span class="line">[Rr]eleasePS/</span><br><span class="line">dlldata.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># DNX</span></span><br><span class="line">project.lock.json</span><br><span class="line">artifacts/</span><br><span class="line"></span><br><span class="line">*_i.c</span><br><span class="line">*_p.c</span><br><span class="line">*_i.h</span><br><span class="line">*.ilk</span><br><span class="line">*.meta</span><br><span class="line">*.obj</span><br><span class="line">*.pch</span><br><span class="line">*.pdb</span><br><span class="line">*.pgc</span><br><span class="line">*.pgd</span><br><span class="line">*.rsp</span><br><span class="line">*.sbr</span><br><span class="line">*.tlb</span><br><span class="line">*.tli</span><br><span class="line">*.tlh</span><br><span class="line">*.tmp</span><br><span class="line">*.tmp_proj</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.vspscc</span><br><span class="line">*.vssscc</span><br><span class="line">.builds</span><br><span class="line">*.pidb</span><br><span class="line">*.svclog</span><br><span class="line">*.scc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Chutzpah Test files</span></span><br><span class="line">_Chutzpah*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual C++ cache files</span></span><br><span class="line">ipch/</span><br><span class="line">*.aps</span><br><span class="line">*.ncb</span><br><span class="line">*.opendb</span><br><span class="line">*.opensdf</span><br><span class="line">*.sdf</span><br><span class="line">*.cachefile</span><br><span class="line">*.VC.db</span><br><span class="line">*.VC.VC.opendb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio profiler</span></span><br><span class="line">*.psess</span><br><span class="line">*.vsp</span><br><span class="line">*.vspx</span><br><span class="line">*.sap</span><br><span class="line"></span><br><span class="line"><span class="comment"># TFS 2012 Local Workspace</span></span><br><span class="line"><span class="variable">$tf</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Guidance Automation Toolkit</span></span><br><span class="line">*.gpState</span><br><span class="line"></span><br><span class="line"><span class="comment"># ReSharper is a .NET coding add-in</span></span><br><span class="line">_ReSharper*/</span><br><span class="line">*.[Rr]e[Ss]harper</span><br><span class="line">*.DotSettings.user</span><br><span class="line"></span><br><span class="line"><span class="comment"># JustCode is a .NET coding add-in</span></span><br><span class="line">.JustCode</span><br><span class="line"></span><br><span class="line"><span class="comment"># TeamCity is a build add-in</span></span><br><span class="line">_TeamCity*</span><br><span class="line"></span><br><span class="line"><span class="comment"># DotCover is a Code Coverage Tool</span></span><br><span class="line">*.dotCover</span><br><span class="line"></span><br><span class="line"><span class="comment"># NCrunch</span></span><br><span class="line">_NCrunch_*</span><br><span class="line">.*crunch*.local.xml</span><br><span class="line">nCrunchTemp_*</span><br><span class="line"></span><br><span class="line"><span class="comment"># MightyMoose</span></span><br><span class="line">*.mm.*</span><br><span class="line">AutoTest.Net/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web workbench (sass)</span></span><br><span class="line">.sass-cache/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Installshield output folder</span></span><br><span class="line">[Ee]xpress/</span><br><span class="line"></span><br><span class="line"><span class="comment"># DocProject is a documentation generator add-in</span></span><br><span class="line">DocProject/buildhelp/</span><br><span class="line">DocProject/Help/*.HxT</span><br><span class="line">DocProject/Help/*.HxC</span><br><span class="line">DocProject/Help/*.hhc</span><br><span class="line">DocProject/Help/*.hhk</span><br><span class="line">DocProject/Help/*.hhp</span><br><span class="line">DocProject/Help/Html2</span><br><span class="line">DocProject/Help/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># Click-Once directory</span></span><br><span class="line">publish/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Publish Web Output</span></span><br><span class="line">*.[Pp]ublish.xml</span><br><span class="line">*.azurePubxml</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Comment the next line if you want to checkin your web deploy settings</span></span><br><span class="line"><span class="comment"># but database connection strings (with potential passwords) will be unencrypted</span></span><br><span class="line">*.pubxml</span><br><span class="line">*.publishproj</span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Azure Web App publish settings. Comment the next line if you want to</span></span><br><span class="line"><span class="comment"># checkin your Azure Web App publish settings, but sensitive information contained</span></span><br><span class="line"><span class="comment"># in these scripts will be unencrypted</span></span><br><span class="line">PublishScripts/</span><br><span class="line"></span><br><span class="line"><span class="comment"># NuGet Packages</span></span><br><span class="line">*.nupkg</span><br><span class="line"><span class="comment"># The packages folder can be ignored because of Package Restore</span></span><br><span class="line">**/packages/*</span><br><span class="line"><span class="comment"># except build/, which is used as an MSBuild target.</span></span><br><span class="line">!**/packages/build/</span><br><span class="line"><span class="comment"># Uncomment if necessary however generally it will be regenerated when needed</span></span><br><span class="line"><span class="comment">#!**/packages/repositories.config</span></span><br><span class="line"><span class="comment"># NuGet v3&#x27;s project.json files produces more ignoreable files</span></span><br><span class="line">*.nuget.props</span><br><span class="line">*.nuget.targets</span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Azure Build Output</span></span><br><span class="line">csx/</span><br><span class="line">*.build.csdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Azure Emulator</span></span><br><span class="line">ecf/</span><br><span class="line">rcf/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows Store app package directories and files</span></span><br><span class="line">AppPackages/</span><br><span class="line">BundleArtifacts/</span><br><span class="line">Package.StoreAssociation.xml</span><br><span class="line">_pkginfo.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio cache files</span></span><br><span class="line"><span class="comment"># files ending in .cache can be ignored</span></span><br><span class="line">*.[Cc]ache</span><br><span class="line"><span class="comment"># but keep track of directories ending in .cache</span></span><br><span class="line">!*.[Cc]ache/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Others</span></span><br><span class="line">ClientBin/</span><br><span class="line">~$*</span><br><span class="line">*~</span><br><span class="line">*.dbmdl</span><br><span class="line">*.dbproj.schemaview</span><br><span class="line">*.pfx</span><br><span class="line">*.publishsettings</span><br><span class="line">node_modules/</span><br><span class="line">orleans.codegen.cs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Since there are multiple workflows, uncomment next line to ignore bower_components</span></span><br><span class="line"><span class="comment"># (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)</span></span><br><span class="line"><span class="comment">#bower_components/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RIA/Silverlight projects</span></span><br><span class="line">Generated_Code/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Backup &amp; report files from converting an old project file</span></span><br><span class="line"><span class="comment"># to a newer Visual Studio version. Backup files are not needed,</span></span><br><span class="line"><span class="comment"># because we have git ;-)</span></span><br><span class="line">_UpgradeReport_Files/</span><br><span class="line">Backup*/</span><br><span class="line">UpgradeLog*.XML</span><br><span class="line">UpgradeLog*.htm</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQL Server files</span></span><br><span class="line">*.mdf</span><br><span class="line">*.ldf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Business Intelligence projects</span></span><br><span class="line">*.rdl.data</span><br><span class="line">*.bim.layout</span><br><span class="line">*.bim_*.settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Fakes</span></span><br><span class="line">FakesAssemblies/</span><br><span class="line"></span><br><span class="line"><span class="comment"># GhostDoc plugin setting file</span></span><br><span class="line">*.GhostDoc.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node.js Tools for Visual Studio</span></span><br><span class="line">.ntvs_analysis.dat</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio 6 build log</span></span><br><span class="line">*.plg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio 6 workspace options file</span></span><br><span class="line">*.opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio LightSwitch build output</span></span><br><span class="line">**/*.HTMLClient/GeneratedArtifacts</span><br><span class="line">**/*.DesktopClient/GeneratedArtifacts</span><br><span class="line">**/*.DesktopClient/ModelManifest.xml</span><br><span class="line">**/*.Server/GeneratedArtifacts</span><br><span class="line">**/*.Server/ModelManifest.xml</span><br><span class="line">_Pvt_Extensions</span><br><span class="line"></span><br><span class="line"><span class="comment"># Paket dependency manager</span></span><br><span class="line">.paket/paket.exe</span><br><span class="line">paket-files/</span><br><span class="line"></span><br><span class="line"><span class="comment"># FAKE - F# Make</span></span><br><span class="line">.fake/</span><br><span class="line"></span><br><span class="line"><span class="comment"># JetBrains Rider</span></span><br><span class="line">.idea/</span><br><span class="line">*.sln.iml</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git配置&quot;&gt;&lt;a href=&quot;#Git配置&quot; class=&quot;headerlink&quot; title=&quot;Git配置&quot;&gt;&lt;/a&gt;Git配置&lt;/h2&gt;&lt;h3 id=&quot;设置用户名和邮箱&quot;&gt;&lt;a href=&quot;#设置用户名和邮箱&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Tool" scheme="http://bootree.cn/categories/Tool/"/>
    
    <category term="Git" scheme="http://bootree.cn/categories/Tool/Git/"/>
    
    
    <category term="Git" scheme="http://bootree.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>51单片机从入门到入坟 - 04单片机工程模板创建</title>
    <link href="http://bootree.cn/2024/06/24/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/04%E5%8D%95%E7%89%87%E6%9C%BA%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E5%88%9B%E5%BB%BA/"/>
    <id>http://bootree.cn/2024/06/24/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/04%E5%8D%95%E7%89%87%E6%9C%BA%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E5%88%9B%E5%BB%BA/</id>
    <published>2024-06-24T12:40:34.000Z</published>
    <updated>2024-06-25T11:49:04.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="51单片机工程模板创建"><a href="#51单片机工程模板创建" class="headerlink" title="51单片机工程模板创建"></a>51单片机工程模板创建</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ol><li><p>打开<code>Keil</code>软件，新建一个工程</p> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624213534.png"/></li><li><p>在保存项目文件窗口，手动创建一个项目目录，例如<code>Teample</code></p> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624213803.png"/></li></ol><h4 id="选择CPU型号"><a href="#选择CPU型号" class="headerlink" title="选择CPU型号"></a>选择CPU型号</h4><p>&emsp;&emsp;根据开发板的CPU具体的型号来选择，我们开发板使用的是<code>STC89C52</code>或<code>STC89C516</code>芯片。在Keil软件内找不到这种型号的单片机，因为51内核单片机具有通用性，所以在这里可以任选一款89C52就行，Keil软件的关键是程序代码的编写，而非用户选择什么硬件，在这里我们选择<code>Microchip</code>的<code>AT89C52</code>来说明。具体操作如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624214343.png"/><p>&emsp;&emsp;点击OK键后，弹出如下对话框：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624214435.png"/><p>&emsp;&emsp;看对话框内容是提示我们是否要将8051启动文件添加到工程中，这里我们选择“否”，原因是Keil C51内已经帮我们完成了启动，所以只需要编写应用程序即可。选择“否”后界面如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624214612.png"/><h4 id="给工程添加文件"><a href="#给工程添加文件" class="headerlink" title="给工程添加文件"></a>给工程添加文件</h4><p>&emsp;&emsp;选择**File&#x2F;New...**或者使用工具栏的图标 <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624214723.png"/> 来新建一个文件后点击保存，系统会自动定位到我们工程目录，只需要在文件名栏输入新建的文件名即可，一个51单片机工程必须还有且仅有一个main函数，因此将新建的文件命名为<code>main.c</code>(当然也可以根据个人习惯自定义命名，但必须是英文)，点击保存。具体操作步骤如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624214941.png"/><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624215041.png"/><p>&emsp;&emsp;然后将新建的文件添加到工程中，选择工程组“Source Group 1”，鼠标右键选择“Add Existing Files to Group &#39;Source Group 1&#39; ...”，然后选择对应的xxx.c文件，点击Add键在点击Close关闭。这时工程中就显示已进入的文件。具体操作如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624215304.png"/><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624215728.png"/><h4 id="配置魔术棒选项卡"><a href="#配置魔术棒选项卡" class="headerlink" title="配置魔术棒选项卡"></a>配置魔术棒选项卡</h4><h5 id="生成Hex文件"><a href="#生成Hex文件" class="headerlink" title="生成Hex文件"></a>生成Hex文件</h5><p>&emsp;&emsp;选择魔术棒工具的<strong>Output</strong>选项卡，勾选红色框3，即程序编译成功后会产生HEX文件。具体操作如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624220406.png"/><h5 id="51仿真器配置"><a href="#51仿真器配置" class="headerlink" title="51仿真器配置"></a>51仿真器配置</h5><p>&emsp;&emsp;仿真器一端连接电脑，同时仿真器也给开发板供电，所以使用仿真器可不接电源线。要使用51仿真器在线调试程序，需要在Keil软件内进行相应的配置。具体的配置如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624220758.png" width="70%"/><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624220819.png" width="70%"/><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624220848.png" width="70%"/><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624220907.png" width="70%"/><p>&emsp;&emsp;最后点击OK按钮即可。然后双击工程组的main.c文件，输入如下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;编译后结果0错误0警告，表明我们创建的51单片机工程完全正确。如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624221608.png" width="70%"/><h2 id="reg52-h头文件介绍"><a href="#reg52-h头文件介绍" class="headerlink" title="reg52.h头文件介绍"></a>reg52.h头文件介绍</h2><h3 id="头文件作用"><a href="#头文件作用" class="headerlink" title="头文件作用"></a>头文件作用</h3><p>&emsp;&emsp;在代码中引用头文件，其实际意义就是将这个头文件中的全部内容放到引用头文件的位置处，免去我们每次编写同类程序都要将头文件中的语句重复编写。在代码中加入头文件有两种书写方法，分别为<code>#include &lt;reg52.h&gt;</code>和<code>#include &quot;reg52.h&quot;</code>，包含头文件时不需要在后面加分号。两种写法的区别如下：</p><ul><li><p>当使用<code>&lt;&gt;</code>包含头文件时，编译器先进入到软件安装文件夹处开始搜索这个头文件，也就是<code>KeilC51/C51/INC</code>这个文件夹下，如果这个文件夹没有引用的头文件，编译器将会报错</p></li><li><p>当使用<code>&quot;&quot;</code>包含头文件时，编译器先进入到当前工程所在文件夹处开始搜索看头文件，如果当前工程所在文件夹下没有看头文件，编译器将继续回到软件安装文件夹处搜索这个头文件，弱找不到看头文件，编译器将报错</p></li></ul><h3 id="头文件内容"><a href="#头文件内容" class="headerlink" title="头文件内容"></a>头文件内容</h3><p>&emsp;&emsp;大家看头文件查看其内容，将鼠标移动到<code>reg52.h</code>上，单击右键，选择“Open dpcument &lt;reg52.h&gt;”，即可打开该头文件，如下：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624225437.png"/><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">REG52.H</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Header file for generic 80C52 and 80C32 microcontroller.</span></span><br><span class="line"><span class="comment">Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.</span></span><br><span class="line"><span class="comment">All rights reserved.</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __REG52_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __REG52_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  BYTE Registers  */</span></span><br><span class="line">sfr P0    = <span class="number">0x80</span>;</span><br><span class="line">sfr P1    = <span class="number">0x90</span>;</span><br><span class="line">sfr P2    = <span class="number">0xA0</span>;</span><br><span class="line">sfr P3    = <span class="number">0xB0</span>;</span><br><span class="line">sfr PSW   = <span class="number">0xD0</span>;</span><br><span class="line">sfr ACC   = <span class="number">0xE0</span>;</span><br><span class="line">sfr B     = <span class="number">0xF0</span>;</span><br><span class="line">sfr SP    = <span class="number">0x81</span>;</span><br><span class="line">sfr DPL   = <span class="number">0x82</span>;</span><br><span class="line">sfr DPH   = <span class="number">0x83</span>;</span><br><span class="line">sfr PCON  = <span class="number">0x87</span>;</span><br><span class="line">sfr TCON  = <span class="number">0x88</span>;</span><br><span class="line">sfr TMOD  = <span class="number">0x89</span>;</span><br><span class="line">sfr TL0   = <span class="number">0x8A</span>;</span><br><span class="line">sfr TL1   = <span class="number">0x8B</span>;</span><br><span class="line">sfr TH0   = <span class="number">0x8C</span>;</span><br><span class="line">sfr TH1   = <span class="number">0x8D</span>;</span><br><span class="line">sfr IE    = <span class="number">0xA8</span>;</span><br><span class="line">sfr IP    = <span class="number">0xB8</span>;</span><br><span class="line">sfr SCON  = <span class="number">0x98</span>;</span><br><span class="line">sfr SBUF  = <span class="number">0x99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  8052 Extensions  */</span></span><br><span class="line">sfr T2CON  = <span class="number">0xC8</span>;</span><br><span class="line">sfr RCAP2L = <span class="number">0xCA</span>;</span><br><span class="line">sfr RCAP2H = <span class="number">0xCB</span>;</span><br><span class="line">sfr TL2    = <span class="number">0xCC</span>;</span><br><span class="line">sfr TH2    = <span class="number">0xCD</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  BIT Registers  */</span></span><br><span class="line"><span class="comment">/*  PSW  */</span></span><br><span class="line">sbit CY    = PSW^<span class="number">7</span>;</span><br><span class="line">sbit AC    = PSW^<span class="number">6</span>;</span><br><span class="line">sbit F0    = PSW^<span class="number">5</span>;</span><br><span class="line">sbit RS1   = PSW^<span class="number">4</span>;</span><br><span class="line">sbit RS0   = PSW^<span class="number">3</span>;</span><br><span class="line">sbit OV    = PSW^<span class="number">2</span>;</span><br><span class="line">sbit P     = PSW^<span class="number">0</span>; <span class="comment">//8052 only</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  TCON  */</span></span><br><span class="line">sbit TF1   = TCON^<span class="number">7</span>;</span><br><span class="line">sbit TR1   = TCON^<span class="number">6</span>;</span><br><span class="line">sbit TF0   = TCON^<span class="number">5</span>;</span><br><span class="line">sbit TR0   = TCON^<span class="number">4</span>;</span><br><span class="line">sbit IE1   = TCON^<span class="number">3</span>;</span><br><span class="line">sbit IT1   = TCON^<span class="number">2</span>;</span><br><span class="line">sbit IE0   = TCON^<span class="number">1</span>;</span><br><span class="line">sbit IT0   = TCON^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  IE  */</span></span><br><span class="line">sbit EA    = IE^<span class="number">7</span>;</span><br><span class="line">sbit ET2   = IE^<span class="number">5</span>; <span class="comment">//8052 only</span></span><br><span class="line">sbit ES    = IE^<span class="number">4</span>;</span><br><span class="line">sbit ET1   = IE^<span class="number">3</span>;</span><br><span class="line">sbit EX1   = IE^<span class="number">2</span>;</span><br><span class="line">sbit ET0   = IE^<span class="number">1</span>;</span><br><span class="line">sbit EX0   = IE^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  IP  */</span></span><br><span class="line">sbit PT2   = IP^<span class="number">5</span>;</span><br><span class="line">sbit PS    = IP^<span class="number">4</span>;</span><br><span class="line">sbit PT1   = IP^<span class="number">3</span>;</span><br><span class="line">sbit PX1   = IP^<span class="number">2</span>;</span><br><span class="line">sbit PT0   = IP^<span class="number">1</span>;</span><br><span class="line">sbit PX0   = IP^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  P3  */</span></span><br><span class="line">sbit RD    = P3^<span class="number">7</span>;</span><br><span class="line">sbit WR    = P3^<span class="number">6</span>;</span><br><span class="line">sbit T1    = P3^<span class="number">5</span>;</span><br><span class="line">sbit T0    = P3^<span class="number">4</span>;</span><br><span class="line">sbit INT1  = P3^<span class="number">3</span>;</span><br><span class="line">sbit INT0  = P3^<span class="number">2</span>;</span><br><span class="line">sbit TXD   = P3^<span class="number">1</span>;</span><br><span class="line">sbit RXD   = P3^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  SCON  */</span></span><br><span class="line">sbit SM0   = SCON^<span class="number">7</span>;</span><br><span class="line">sbit SM1   = SCON^<span class="number">6</span>;</span><br><span class="line">sbit SM2   = SCON^<span class="number">5</span>;</span><br><span class="line">sbit REN   = SCON^<span class="number">4</span>;</span><br><span class="line">sbit TB8   = SCON^<span class="number">3</span>;</span><br><span class="line">sbit RB8   = SCON^<span class="number">2</span>;</span><br><span class="line">sbit TI    = SCON^<span class="number">1</span>;</span><br><span class="line">sbit RI    = SCON^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  P1  */</span></span><br><span class="line">sbit T2EX  = P1^<span class="number">1</span>; <span class="comment">// 8052 only</span></span><br><span class="line">sbit T2    = P1^<span class="number">0</span>; <span class="comment">// 8052 only</span></span><br><span class="line">             </span><br><span class="line"><span class="comment">/*  T2CON  */</span></span><br><span class="line">sbit TF2    = T2CON^<span class="number">7</span>;</span><br><span class="line">sbit EXF2   = T2CON^<span class="number">6</span>;</span><br><span class="line">sbit RCLK   = T2CON^<span class="number">5</span>;</span><br><span class="line">sbit TCLK   = T2CON^<span class="number">4</span>;</span><br><span class="line">sbit EXEN2  = T2CON^<span class="number">3</span>;</span><br><span class="line">sbit TR2    = T2CON^<span class="number">2</span>;</span><br><span class="line">sbit C_T2   = T2CON^<span class="number">1</span>;</span><br><span class="line">sbit CP_RL2 = T2CON^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info flat"><p>从上面代码中可以看到，该头文件中定义了52系列单片机内部所有的功能寄存器</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;51单片机工程模板创建&quot;&gt;&lt;a href=&quot;#51单片机工程模板创建&quot; class=&quot;headerlink&quot; title=&quot;51单片机工程模板创建&quot;&gt;&lt;/a&gt;51单片机工程模板创建&lt;/h2&gt;&lt;h3 id=&quot;新建工程&quot;&gt;&lt;a href=&quot;#新建工程&quot; class=&quot;</summary>
      
    
    
    
    <category term="MCU" scheme="http://bootree.cn/categories/MCU/"/>
    
    <category term="51MCU" scheme="http://bootree.cn/categories/MCU/51MCU/"/>
    
    
    <category term="51单片机从入门到入坟" scheme="http://bootree.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>51单片机从入门到入坟 - 03单片机最小系统</title>
    <link href="http://bootree.cn/2024/06/24/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/03%E5%8D%95%E7%89%87%E6%9C%BA%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F/"/>
    <id>http://bootree.cn/2024/06/24/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/03%E5%8D%95%E7%89%87%E6%9C%BA%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-06-24T12:22:50.000Z</published>
    <updated>2024-06-24T12:40:12.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单片机最小系统构成"><a href="#单片机最小系统构成" class="headerlink" title="单片机最小系统构成"></a>单片机最小系统构成</h2><p>&emsp;&emsp;若要使系统正常运行，必须确保单片机的最小系统稳定工作。51单片机的最小系统由以下几部分组成：</p><ol><li>晶振电路</li><li>复位电路</li><li>电源电路</li></ol><p>&emsp;&emsp;晶振电路提供时钟给单片机工作，犹如人的心脏。复位电路提供系统复位操作,当系统出现运行不正常或者死机等情况时,可以通过复位按键重新启动系统电源电路也是非常关键的一个部分，因为单片机对供电电压是有要求的，如果电压过大将烧坏芯片，如果电压过小系统将运行不了。所以选择一个合适稳定的电源电路是非常关键的。</p><h3 id="晶振电路"><a href="#晶振电路" class="headerlink" title="晶振电路"></a>晶振电路</h3><p>&emsp;&emsp;由于单片机正常工作需要一个时钟，因此就需要在其品振引脚上外接晶振(我们使用的 STC89CXX 单片机晶振引脚是18和 19 脚)，至于需要多大晶振这就取决于你所使用的单片机，由于我们使用的是51单片机，其时钟频率可在0-40MHZ上运行，一般情况下我们建议选择12M(适合计算延时时间)或者是11.0592M(适合串口通信)。若直接将此晶振接入单片机品振引脚，会发现系统工作不稳定，这是因为品振起振的一瞬间会产生一些电感，为了消除这个电感所带来的于扰，可以在此晶振两端分别加上一个电容，电容的选取需要无极性的，另一端需要共地。根据选取的晶振大小决定电容值，通常电容可在 10-33PF 值范围内选取。我们使用的是 33PF 电容。这样一来就构成了品振电路。只有保证晶振电路稳定，单片机才能继续工作。其电路如下所示:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624203159.png" width="70%"/><h3 id="复位电路"><a href="#复位电路" class="headerlink" title="复位电路"></a>复位电路</h3><p>&emsp;&emsp;单片机引脚当中就有一个 RST 复位引脚，而 STC89CXX 单片机又是高电平复位，所以只需要让这个引脚保持一段时间高电平就可以。要实现此功能通常有两种方式，一种是通过按键进行手动复位，还有一种是上电复位，即电源开启后自动复位。手动复位是通过一个按键及电容电阻所组成，利用按键的开关功能实现复位，按键按下后 VCC 直接进入到单片机RST 引脚，松开后 VCC 断开，RST 被电阻拉为低电平。这一合一开就实现了手动复位。而自动复位主要是利用 RC 充放电功能，电源已开启，由于电容隔直，VCC直接进入 RST，然后电容开始慢慢充电，直到充电完成，此时 RST 被电阻拉低。这样就起到上电复位的效果。这里我们采用手动复位。不到系统崩溃，我们几乎不会操作复位。复位电路如下图所示：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624203536.png" width="70%"/> <h3 id="电源电路"><a href="#电源电路" class="headerlink" title="电源电路"></a>电源电路</h3><p>&emsp;&emsp;STC89CXX 单片机的工作电压是 3.3-5.5V 范围，通常我们使用 5V 直流。将电源接入到各芯片电源引脚即可。开发板电源电路如下图所示：</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624203704.png" width="70%"/><h3 id="下载电路"><a href="#下载电路" class="headerlink" title="下载电路"></a>下载电路</h3><p>&emsp;&emsp;我们知道现在的笔记本电脑没有 RS232 接口，所以要使用 USB 转 TTL 串口电平芯片来建立 PC机和单片机数据传输通路。通常使用CH340G或者CH340C芯片来完成电平转换。CH340G 需外接 12M 晶振，而 CH340C内部自带晶振，所以可以不接外部 12M 晶振。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240624203835.png" width="70%"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单片机最小系统构成&quot;&gt;&lt;a href=&quot;#单片机最小系统构成&quot; class=&quot;headerlink&quot; title=&quot;单片机最小系统构成&quot;&gt;&lt;/a&gt;单片机最小系统构成&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;若要使系统正常运行，必须确保单片机的最小系统稳定工作。51单</summary>
      
    
    
    
    <category term="MCU" scheme="http://bootree.cn/categories/MCU/"/>
    
    <category term="51MCU" scheme="http://bootree.cn/categories/MCU/51MCU/"/>
    
    
    <category term="51单片机从入门到入坟" scheme="http://bootree.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>51单片机从入门到入坟 - 02_51单片机介绍</title>
    <link href="http://bootree.cn/2024/06/20/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/02%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8B%E7%BB%8D/"/>
    <id>http://bootree.cn/2024/06/20/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/02%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-06-20T12:37:07.000Z</published>
    <updated>2024-06-24T11:54:02.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单片机介绍"><a href="#单片机介绍" class="headerlink" title="单片机介绍"></a>单片机介绍</h2><h3 id="单片机简介"><a href="#单片机简介" class="headerlink" title="单片机简介"></a>单片机简介</h3><p>&emsp;&emsp;一台能够工作的计算机要有这几个部件构成：<code>CPU</code>（进行运算、控制）、<code>RAM</code>（数据存储）、<code>ROM</code>（程序存储）、<code>输入/输出设备</code>，而字啊单片机中，这些部件全部被做到一块集成电路芯片中，所以就称为单片机（也称为<strong>微控制器MCU</strong>）</p><blockquote><p>51单片机时对所有兼容<code>Intel 8031</code>指令系统的单片机的统称</p></blockquote><ul><li><strong>Intel(英特尔)</strong> ：<code>i80C31</code>、<code>i80C51</code>、<code>i87C51</code>、<code>i80C32</code>、<code>i80C52</code>、<code>i87C52</code>等</li><li><strong>ATMEL(艾德梅尔)</strong> ：<code>AT89C51</code>、<code>AT89C52</code>、<code>AT89C2051</code>、<code>AT89S51(RC)</code>、<code>AT89S52(RC)</code>等</li><li><strong>STC(国产宏晶)</strong> ：<code>STC89C51</code>、<code>STC89C52</code>、<code>STC89C516</code>、<code>STC90C516</code>等</li></ul><center>51单片机引脚图</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240620210304.png" width="60%"><center>8051内部结构</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240620210959.png" width="60%"/><h2 id="STC89CXX芯片介绍"><a href="#STC89CXX芯片介绍" class="headerlink" title="STC89CXX芯片介绍"></a>STC89CXX芯片介绍</h2><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240620211420.png" width="50%"/><ul><li><strong>STC</strong>: 前缀，表示芯片为STC公司生产的产品。其他前缀还有如：AT，I，Winbond，SST等。</li><li><strong>8</strong>: 表示该芯片为8051内核芯片。</li><li><strong>9</strong>：表示内部含 FlashE²PROM 寄存器。还有如80C51中0表示内部含有 Mask Rom（掩模ROM）存储器；又如87C51中7表示内部含有EPROM存储器（紫外线可擦出除ROM）。</li><li><strong>C</strong>: 表示该器件为CMOS产品。还有如89LV52和89LE58中的LV和LE都表示该芯片为低电压产品（通常为3.3V供电）；而89S52中S表示该芯片含有可串行下载功能的Flash存储器，即具有ISP可在线编程功能。</li><li><strong>5</strong>: 固定不变。</li><li><strong>1</strong>：表示该芯片内部程序存储空间大小。1为4KB，2为8KB……</li><li><strong>RC</strong>: STC单片机内部RAM（随机读写存储器）为512B。还有如RD+表示内部RAM为1280B。</li><li><strong>40</strong>: 表示芯片外部晶振最高可接入40MHz。对AT单片机数值一般为24.，表示外部可接入晶振最高24MHz。例如还有</li><li><strong>I</strong>：产品级别，表示芯片使用温度还未。I表示工业级（Industrial），温度范围：<code>-40℃~+85℃</code>；<ul><li>C表示商业级（Commercial），温度范围：<code>0~75℃</code></li><li>A表示汽车级（Automotive），温度范围：<code>-40°C~+125℃</code></li><li>M表示军用级（Military），温度范围：<code>-55℃~150℃</code></li></ul></li><li><strong>PDIP</strong>：表示封装型号。PDIP表示双列直插式。</li><li><strong>1947</strong>：生产日期为19年第47周</li></ul><h3 id="内部资源"><a href="#内部资源" class="headerlink" title="内部资源"></a>内部资源</h3><p>&emsp;&emsp;STC89C51RC&#x2F;RD+系列单片机是STC推出的新一代高速&#x2F;低功耗&#x2F;超强抗干扰的单片机，指令代码完全兼容传统8051单片机，12时钟&#x2F;机器周期和6时钟&#x2F;机器周期可以任意选择，HD版本和90C版本内部集成MAX810专用复位电路。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240620215000.png"/><ul><li>增强型8051单片机，6时钟&#x2F;机器周期和12时钟&#x2F;机器周期可任意选择，指令代码完全兼容传统8051</li><li>工作电压：<code>5.5V - 3.3V</code>（5V单片机） &#x2F; <code>3.8V - 2.0V</code>（3V单片机）</li><li>工作频率范围：<code>0 ~ 40MHz</code>，相当于普通8051的 <code>0 ~ 80MHz</code>，实际工作频率可达48Mhz</li><li>用户应用程序控件：4K &#x2F; 8K &#x2F; 13K &#x2F; 16K &#x2F; 32K &#x2F; 64K 字节</li><li>片上集成1280字节或512字节RAM</li><li>通用通用IO口(35&#x2F;39个)，复位后为:P1&#x2F;P2&#x2F;P3&#x2F;P4是准双向口&#x2F;弱上拉(普通8051传统I&#x2F;O口):PO口是开漏输出，作为总线扩展用时，不用加上拉电阻，作为I&#x2F;O口用时，需加上拉电阻。</li><li>ISP(在系统可编程)&#x2F;IAP(在应用可编程)，无需专用编程器，无需专用仿真器可通过串口(RxD&#x2F;P3.0,TxD&#x2F;P3.1)直接下载用户程序，数秒即可完成一片</li><li>有EEPROM功能</li><li>看门狗</li><li>内部集成MAX810专用复位电路(HD版本和90C版本才有)，外部晶体20M以下时，可省外部复位电路。</li><li>共3个16位定时器&#x2F;计数器，其中定时器0还可以当成2个8位定时器使用。</li><li>外部中断4路,下降沿中断或低电平触发中断，Power Down模式可由外部中断低电平触发中断方式唤醒。</li><li>通用异步串行口(UART)，还可用定时器软件实现多个UART</li><li>工作温度范围:-40<del>+85℃(工业级)&#x2F;0</del>75℃(商业级)</li><li>封装:LOFP-44,PDIP-40,PLCC-44,PQFP-44</li></ul><h3 id="脚位判断"><a href="#脚位判断" class="headerlink" title="脚位判断"></a>脚位判断</h3><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240623222213.png"></p><div class="note info flat"><p>通过小圆点或凹槽判断<code>引脚1</code>，通常单片机的引脚为逆时针排序</p></div><h3 id="脚位功能"><a href="#脚位功能" class="headerlink" title="脚位功能"></a>脚位功能</h3><p>&emsp;&emsp;我们按其功能类别可分为四类：</p><ol><li>电源引脚。如<code>VCC</code>、<code>GND</code></li><li>时钟引脚。如<code>XTAL1</code>、<code>XTAL2</code></li><li>变成控制引脚。如<code>RST</code>、<code>PSEN</code>、<code>ALE/PROG</code>、<code>EA/Vpp</code></li><li>I&#x2F;O扣引脚。如<code>P0</code>、<code>P1</code>、<code>P2</code>、<code>P3</code>，4组8位I&#x2F;O口</li></ol><h4 id="VCC-40脚-GND-20脚"><a href="#VCC-40脚-GND-20脚" class="headerlink" title="VCC(40脚)&#x2F;GND(20脚)"></a>VCC(40脚)&#x2F;GND(20脚)</h4><p>&emsp;&emsp;电源引脚，不同型号单片机接入对应电压，常压为<code>+5V</code>，低压为<code>+3.3V</code></p><h4 id="XTAL1-19脚-XTAL2-18脚"><a href="#XTAL1-19脚-XTAL2-18脚" class="headerlink" title="XTAL1(19脚)&#x2F;XTAL2(18脚)"></a>XTAL1(19脚)&#x2F;XTAL2(18脚)</h4><p>&emsp;&emsp;外接时钟引脚。XTAL1为片内振荡电路的输入端。XTAL2为片内振荡电路的输出端。8051的时钟有两种方式，一种是片内时钟振荡方式，即需在这两个引脚处外接石英和振荡电容，振荡电容的值一般取<code>10p~30p</code>；另一种是外部时钟方式，即将XTAL1接地，外部时钟信号从XTAL2脚输入。通常使用第一种方式</p><h4 id="RST-9脚"><a href="#RST-9脚" class="headerlink" title="RST(9脚)"></a>RST(9脚)</h4><p>&emsp;&emsp;复位引脚。当输入连续两个机器周期以上高电平时为有效，用来完成单片机的复位初始化操作，即单片机从头开始执行程序。</p><h4 id="PSEN-29脚"><a href="#PSEN-29脚" class="headerlink" title="PSEN(29脚)"></a>PSEN(29脚)</h4><p>&emsp;&emsp;程序存储器允许输出控制端。在读外部程序存储器时PSEN低电平有效，以实现外部程序存储器单元的读操作，由于现在我们使用的单片机内部已经有足够大的 ROM，所以几乎没有人再去扩展外部 ROM</p><h4 id="ALE-PROG-30脚"><a href="#ALE-PROG-30脚" class="headerlink" title="ALE&#x2F;PROG(30脚)"></a>ALE&#x2F;PROG(30脚)</h4><p>&emsp;&emsp;在扩展外部 RAM 时，ALE 用于控制把 PO 口的输出低8位地址送锁存器锁存起来，以实现低位地址和数据的隔离。ALE有可能是高电平也有可能是低电平，当 ALE为高电平时，允许地址锁存型号，当访问外部存储器时，ALE信号负跳变(即由正变负)将P0口上低8位地址信号送入锁存器;当ALE 为高电平时，P0 口上的内容和锁存器输出一致。关于锁存器后面我们会有介绍。在没有访问外部存储器期间，ALE以1&#x2F;6振荡周期频率输出(即6分频)当访问外部存储器时，以1&#x2F;12振荡周期输出(12分频)。从这里可以看到，当没有扩展外部 RAM 时，ALE 会以 1&#x2F;6 振荡周期的固定频率输出，因此可以作为外部时钟，或作为外部定时脉冲使用。PROG为编程脉冲的输入端，单片机的内部有程序存储器(ROM)，它的作用是用来存放用户需要执行的程序，那么我们怎样才能将写好的程序存入这个 ROM 中呢?实际上,我们是通过编程脉冲输入才写进去的，这个脉冲的输入端口就是PROG。现在绝大多数单片机都已经不需要编程脉冲引脚往内部写程序了，比如我们使用的 STC单片机，它可以直接通过串口往里面写程序，只需要三条线与计算机相连即可。而且现在的单片机内部都已经带有丰富的 RAM，所以也不需要再扩展 RAM 了，因此 ALE&#x2F;PROG 引脚用于不大，大家了解即可。</p><h4 id="EA-Vpp-31脚"><a href="#EA-Vpp-31脚" class="headerlink" title="EA&#x2F;Vpp(31脚)"></a>EA&#x2F;Vpp(31脚)</h4><p>&emsp;&emsp;EA接高电平时，单片机读取内部程序存储器。当扩展有外部 ROM 时，当读取完内部 ROM 后自动读取外部 ROM。EA 接低电平时，单片机直接读取外部 ROM。我们没有外扩 ROM,并且需要单片机直接读取内部程序存储器因此 EA&#x2F;Vpp 脚直接接高电平。</p><h4 id="P0口-39脚-32脚"><a href="#P0口-39脚-32脚" class="headerlink" title="P0口(39脚~32脚)"></a>P0口(39脚~32脚)</h4><p>&emsp;&emsp;双向8位三态 I&#x2F;O 口，每个口可独立控制。51 单片机 PO 口内部没有上拉电阻，若输出高时为高阻态，不能正常输出高电平，因此该组 I&#x2F;O 口，每个口可独立控制。51 单片机 P0 口内部没有上拉电阻，若输出高时为高阻态，不能正常输出高电平，因此该组 I&#x2F;0口在使用时务必要外接上拉电阻，一般我们选择接入 10K 欧上拉电阻。</p><h4 id="P1口-1脚-8脚"><a href="#P1口-1脚-8脚" class="headerlink" title="P1口(1脚~8脚)"></a>P1口(1脚~8脚)</h4><p>&emsp;&emsp;准双向8位 I&#x2F;O口，每个口可独立控制，内部自带上拉电阻，这种接口输出没有高阻态，输入也不能锁存，故不是真正的双向 I&#x2F;O口。之所以称它为“准双向”是因为该口在作为输入使用前，要先向该口进行写 1操作，然后单片机内部才可正确读出外部信号，也就是要使其先有个“准”备的过程，所以才称为准双向口。对 52 单片机 P1.0引脚的第二功能未 T2 定时器计数器的外部输入，P1.1引脚的第二功能为 T2EX 捕捉、重装触发，即 T2的外部控制端。</p><h4 id="P2口-21脚-28脚"><a href="#P2口-21脚-28脚" class="headerlink" title="P2口(21脚~28脚)"></a>P2口(21脚~28脚)</h4><p>&emsp;&emsp;准双向8位 I&#x2F;O 口，每个口可独立控制，内部自带上拉电阻，与 P1 口相似。</p><h4 id="P3口-10脚-17脚"><a href="#P3口-10脚-17脚" class="headerlink" title="P3口(10脚~17脚)"></a>P3口(10脚~17脚)</h4><p>&emsp;&emsp;准双向8位 I&#x2F;O 口，每个口可独立控制，内部自带上拉电阻。作为第一功能使用时就当做普通 I&#x2F;O 口，与 P1口相似。作为第二功能使用时，各引脚的定义如下:</p><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240623225551.png"></p><h3 id="STC89C51芯片内部结构"><a href="#STC89C51芯片内部结构" class="headerlink" title="STC89C51芯片内部结构"></a>STC89C51芯片内部结构</h3><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240623225833.png" width="70%"/><p>&emsp;&emsp;STC89C51 单片机中包含中央处理器(CPU)、程序存储器(Flash)、数据存储器(SRAM)、定时&#x2F;计数器、UART 串口、I&#x2F;O 接口、EEPROM、看门狗等模块。STC89C51系列单片机几乎包含了数据采集和控制中所需的所有单元模块,可称得上一个片上系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单片机介绍&quot;&gt;&lt;a href=&quot;#单片机介绍&quot; class=&quot;headerlink&quot; title=&quot;单片机介绍&quot;&gt;&lt;/a&gt;单片机介绍&lt;/h2&gt;&lt;h3 id=&quot;单片机简介&quot;&gt;&lt;a href=&quot;#单片机简介&quot; class=&quot;headerlink&quot; title=&quot;单片机</summary>
      
    
    
    
    <category term="MCU" scheme="http://bootree.cn/categories/MCU/"/>
    
    <category term="51MCU" scheme="http://bootree.cn/categories/MCU/51MCU/"/>
    
    
    <category term="51单片机从入门到入坟" scheme="http://bootree.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 09命令</title>
    <link href="http://bootree.cn/2024/06/20/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/09%E5%91%BD%E4%BB%A4/"/>
    <id>http://bootree.cn/2024/06/20/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/09%E5%91%BD%E4%BB%A4/</id>
    <published>2024-06-20T11:40:59.000Z</published>
    <updated>2024-06-27T15:49:15.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解命令"><a href="#理解命令" class="headerlink" title="理解命令"></a>理解命令</h2><p>&emsp;&emsp;所谓的命令——并将控件连接到命令，从而不需要重复编写事件处理代码。更重要的是，当连接的命令不可用时，命令特性通过自动禁用控件来管理用户界面的状态。命令模型还为存储和本地化命令的文本标题提供了一个中心场所。</p><center>将事件映射到命令</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240620195041.png"/><p>&emsp;&emsp;虽然WPF命令系统是一款简化应用程序设计的优秀工具，但仍有一些很重要的问题没有解决。特别是，WPF 对以下方面没有提供任何支持:</p><ul><li>命令跟踪（例如，保留最近命令的历史）</li><li>“可撤销的”命令</li><li>具有状态并可处于不同“模式”的命令（例如，可被打开或关闭的命令）</li></ul><h2 id="命令模型"><a href="#命令模型" class="headerlink" title="命令模型"></a>命令模型</h2><p>&emsp;&emsp;WPF命令模型由许多可变的部分组成。总之，它们具有如下4个重要元素：</p><ul><li><strong>命令</strong>：命令表示应用程序任务，并且跟踪任务是否能够被执行，然而，命令实际上不包含执行应用程序任务的代码。</li><li><strong>命令绑定</strong>：每个命令绑定针对用户界面的具体区域，将命令连接到相关的应用程序逻辑。这种分解的设计是非常重要的，因为单个命令可用于应用程序中的多个地方，并且在每个地方具有不同的意义。为处理这一问题，需要将同一命令与不同的命令绑定。</li><li><strong>命令源</strong>：命令源触发命令。例如，MenuItem和Button都是命令元。单击它们都会执行绑定命令。</li><li><strong>命令目标</strong>：命令目标是在其中执行命令的元素。例如，Paste命令可在TextBox控件中插入文本，而 OpenFile 命令可在 DocumentViewer 中打开文档。根据命令的本质，目标可能很重要，也可能不重要。</li></ul><h3 id="ICommand接口"><a href="#ICommand接口" class="headerlink" title="ICommand接口"></a>ICommand接口</h3><p>&emsp;&emsp;WPF命令模型的核心时<code>System.Windows.ICommand</code>接口，看接口定义了命令的工作原理。看接口包含两个方法和一个事件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 包含应用程序任务逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于指示命令是否可用</span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当命令状态改变时引发CanExecuteChanged事件</span></span><br><span class="line">    <span class="keyword">event</span> EventHandler CanExecuteChanged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RoutedCommand类"><a href="#RoutedCommand类" class="headerlink" title="RoutedCommand类"></a>RoutedCommand类</h3><p>&emsp;&emsp;当创建自己的命令时，不会直接实现ICommand接口;而是使用<code>System.Windows.Input.RoutedCommand</code> 类，该类自动实现了ICommand 接口。RoutedCommand 类是 WPF 中唯一实现了 ICommand 接口的类。换句话说，<strong>所有 WPF 命令都是 RoutedCommand 类及其派生类的实例</strong>。</p><p>&emsp;&emsp; <strong>RoutedCommand 类为事件冒泡和隧道添加了一些额外的基础结构</strong>。鉴于 ICommand 接口封装了命令的思想——可被触发的动作并可被启用或禁用——RoutedCommand 类对命令进行了修改，使命令可在 WPF 元素层次结构中冒泡，以便获得正确的事件处理程序。</p><p>&emsp;&emsp;为支持路由事件，RoutedCommand 类私有地实现了ICommand 接口，并添加了ICommand 按口方法的一些不同版本。最明显的变化是，Execute()和 CanExecute()方法使用了一个额外参数。下面是新的签名:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">object</span> parameter,IInputElement target</span>)</span></span><br><span class="line">&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="built_in">object</span> parameter,IInputElement target</span>)</span></span><br><span class="line">&#123;...&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>参数 target 是开始处理事件的元素。事件从target 元素开始，然后冒泡至高层的容器，直到应用程序为了执行合适的任务而处理了事件(为了处理Executed 事件，元素还需要借助于另一个类--CommandBinding类的帮助)。</p></div><h3 id="RoutedUICommand类"><a href="#RoutedUICommand类" class="headerlink" title="RoutedUICommand类"></a>RoutedUICommand类</h3><p>&emsp;&emsp;在程序中处理的大部分命令不是RoutedCommand 对象,而是 RoutedUICommand 类的实例，RoutedUICommand 类继承自 RoutedCommand 类(实际上，<strong>WPF 提供的所有预先构建好的命令都是 RoutedUICommand 对象</strong>)。<br>&emsp;&emsp;RoutedUICommand 类用于具有文本的命令，这些文本显示在用户界面中的某些地方(例如菜单项文本、工具栏按钮的工具提示)。<code>RoutedUICommand 类只增加了 Text 属性，该属性是为命令显示的文本</code>。<br>&emsp;&emsp;为命令定义命令文本(而不是直接在控件上定义文本)的优点是可在某个位置执行本地化。但<code>如果命令文本永远不会在用户界面的任何地方显示，那么RoutedUICommand 类和RoutedCommand 类是等效的</code>。</p><h3 id="命令库"><a href="#命令库" class="headerlink" title="命令库"></a>命令库</h3><p>&emsp;&emsp;WPF 设计者认识到，<strong>每个应用程序可能都有大量命令，并且对于许多不同的应用程序，很多命令是通用的</strong>。例如，所有基于文档的应用程序都有它们自己版本的 New、Open 以及 Save命令。为减少创建这些命令所需的工作，WPF提供了基本命令库，基本命令库中保存的命令超过100条。这些命令通过以下5个专门的静态类的静态属性提供:</p><ul><li><strong>ApplicationCommands</strong>：看类提供了通用命令，包括剪贴板命令（如<code>Copy</code>、<code>Cut</code>和<code>Paste</code>）以及文档命令（如<code>New</code>、<code>Open</code>、<code>Save</code>、<code>Save As</code>和<code>Print</code>等）</li><li><strong>NavigationCommands</strong>：该类提供了用于导航的命令，包括为基于页面的应用程序设计的一些命令（如<code>BrowseBack</code>、<code>BrowseForward</code>和<code>NextPage</code>），以及其他适合于基于文档的应用程序的命令（如<code>IncreaseZoom</code>和<code>Refresh</code>）</li><li><strong>EditingCommands</strong>：该类提供了许多重要的文档编辑命令，包括用于移动的命令（<code>MoveToLineEnd</code>、<code>MoveLeftByWord</code>和<code>MoveUpByPage</code>等），选择内容的命令（<code>SelectToLineEnd</code>、<code>SelectLeftByWord</code>），以及改变格式的命令（<code>ToggleBold</code>和<code>ToggleUnderline</code>）</li><li><strong>ComponentCommands</strong>：该类提供了由用户界面组件使用的命令，包括用于移动和选择内容的命令，这些命令和<code>EditingCommands</code>类中的一些命令类似（甚至完全相同）</li><li><strong>MediaCommands</strong>：看类提供了一组用于处理多媒体的命令（如<code>Play</code>、<code>Pause</code>、<code>NextTrack</code>以及<code>IncreaseVolume</code>）</li></ul><p>&emsp;&emsp;ApplicationCommands 类提供了一组基本命令，在所有类型的应用程序中都经常会用到这些命令，所以在此简单介绍一下。下面列出了所有这些命令:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240620202657.png" width="50%"/><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><h3 id="命令源"><a href="#命令源" class="headerlink" title="命令源"></a>命令源</h3><p>&emsp;&emsp;命令库中的命令始终可用。触发它们的最简单方法是将它们关联到实现了ICommandSource接口的控件,其中包括继承自 ButtonBase 类的控件(Button和 CheckBox 等)、单独的 ListBoxItem对象、Hyperlink 以及 Menultem。</p><center>ICommandSource接口的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Command</td><td>指向连接的命令，这是唯一必要的细节</td></tr><tr><td>CommandParameter</td><td>提供其他希望随命令发生的数据</td></tr><tr><td>CommandTarget</td><td>确定将在其中执行命令的元素</td></tr></tbody></table><blockquote><p>下面的按钮使用Command属性连接到<code>ApplicationCommands.New</code>命令</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.New&quot;</span>&gt;</span>New<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- WPF的智能程度足够高，可简写为如下形式，但是这种语法不够明确、不够清晰 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;New&quot;</span>&gt;</span>New<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命令绑定"><a href="#命令绑定" class="headerlink" title="命令绑定"></a>命令绑定</h3><div class="note danger flat"><p>当将命令关联到命令源时，会感到一些有趣的现象。命令源将会被自动禁用</p></div><p>&emsp;&emsp;这是因为按钮已经查询了命令的状态，而且由于命令还没有与其关联的绑定，所以按钮被认为是禁用的，为改变这种现状，需要为命令创建绑定以明确以下三件事情：</p><ul><li>当命令被触发时执行什么操作</li><li>如何确定命令是否能够被执行（这是可选的。<strong>如果未提供这一细节，只需要提供了关联的事件处理程序，命令总是可用</strong>）</li><li>命令在何处起作用。例如，命令可被限制在当个按钮中使用，或在整个窗口中使用（这种情况更常见）</li></ul><blockquote><p>下面的代码片段为 New命令创建绑定。可将这些代码添加到窗口的构造函数中:</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the binding.</span></span><br><span class="line">CommandBing binding = <span class="keyword">new</span> CommandBinding(ApplicationCommands.New);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach the event handler.</span></span><br><span class="line">binding.Executed += NewCommand_Executed;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register the binging.</span></span><br><span class="line"><span class="keyword">this</span>.CommandBindings.Add(binding);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意，上面创建的 CommandBinding 对象被添加到包含窗口的 CommandBindings 集合中,这通过事件冒泡进行工作。实际上，当单击按钮时，CommandBinding.Executed 事件从按钮冒泡到包含元素。<br>&emsp;&emsp;尽管习惯上为窗口添加所有绑定，但 CommandBindings 属性实际是在 UIElement 基类中定义的。这意味着任何元素都支持该属性。例如，如果将命令绑定直接添加到使用它的按钮中，这个示例仍工作得很好(尽管不能再将该绑定重用于其他高级元素)。为得到最大的灵活性，命令绑定通常被添加到顶级窗口。如果希望在多个窗口中使用相同的命令，需要在这些窗口中分别创建命令绑定。</p><div class="note info flat"><p>上面的示例中，使用代码生成了命令绑定。然而，如果希望精简代码隐藏文件，使用XAML以声明方式关联命令同样很容易。下面是所需的标记：</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.CommandBindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CommandBinding</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.New&quot;</span> <span class="attr">Executed</span>=<span class="string">&quot;NewCommand_Executed&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.CommandBindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.New&quot;</span>&gt;</span>New<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用多命令源"><a href="#使用多命令源" class="headerlink" title="使用多命令源"></a>使用多命令源</h3><p>&emsp;&emsp;按钮示例中触发普通事件的方式看起来不那么直接。然而，当添加使用相同命令的更多控件时，额外命令层的意义就会体现出来。例如，可添加如下也使用New命令的菜单项:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Header</span>=<span class="string">&quot;File&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.New&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 注意，New 命令的这个 Menultem 对象没有设置 Header 属性。这是因为 Menultem 类足够智能，<code>如果没有设置 Header属性，它将从命令中提取文本(Button 控件不具有这一特性)</code>。虽然该特性带来的便利看起来不大，但如果计划使用不同的语言本地化应用程序，这一特性就很重要了。在这种情况下，只需要在一个地方修改文本即可(通过设置命令的 Text 属性)，这比在整个窗口中进行跟踪更容易。</p><p>&emsp;&emsp; <code>Menultem类还有一项功能:能自动提取Command.InputBindings 集合中的第一个快捷键(如果存在的话)</code>。对于 ApplicationCommands.New 命令对象，这意味着在菜单文本的旁边会显示Ctrl+N 快捷键</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240626220104.png" width="50%"/><h3 id="微调命令文本"><a href="#微调命令文本" class="headerlink" title="微调命令文本"></a>微调命令文本</h3><p>&emsp;&emsp;既然菜单具有自动提取命令项文本的功能，您可能会好奇其他ICommandSource 类是否也具有类似功能，如 Button 控件。<br>&emsp;&emsp;可以，但需要完成一点额外的工作。可使用两种技术重用命令文本。一种选择是直接从静态命令对象中提取文本。XAML可使用 Static 标记扩展完成这一任务。下面的示例获取命令名 New，并将它作为按钮的文本:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这种方式只是调用命令对象的ToString()方法，因此，得到的是命令名，而不是命令的文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.New&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;x:Static ApplicationCommands.New&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用这种语法可以绑定到命令的文本，并且自动实现了本地化功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.New&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding RelativeSource=&#123;RelativeSource Mode=Self&#125;,Path=Command.Text&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="直接调用命令"><a href="#直接调用命令" class="headerlink" title="直接调用命令"></a>直接调用命令</h3><p>&emsp;&emsp;并非只能实现了<code>ICommandSource</code>接口的类来触发希望执行的命令。也可以用<code>Execute()</code>方法直接调用来自任何事件处理程序的方法。这是需要传递参数值（或null引用）对目标元素的引用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接触发New命令绑定的命令</span></span><br><span class="line">ApplicationCommands.New.Execute(<span class="literal">null</span>, targetElement);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接触发当前关联的第一个命令</span></span><br><span class="line"><span class="keyword">this</span>.CommandBindings[<span class="number">0</span>].Command.Execute(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="禁用命令"><a href="#禁用命令" class="headerlink" title="禁用命令"></a>禁用命令</h3><p>&emsp;&emsp;现在需要从窗口向命令绑定传递信息，使链接的控件可根据需要进行更新。技巧是处理命令绑定的 CanExecute 事件。可通过下面的代码为该事件关联事件处理程序:</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">XML</button><button type="button" class="tab " data-href="-2">C#</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 保存命令默认不可用，需要在文本修改后可用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Header</span>=<span class="string">&quot;File&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Save&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MenuItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">TextChanged</span>=<span class="string">&quot;TextBox_TextChanged&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 命令绑定</span></span><br><span class="line">    <span class="keyword">var</span> binding = <span class="keyword">new</span> CommandBinding(ApplicationCommands.Save);</span><br><span class="line">    binding.Executed += SaveCommand_Executed;</span><br><span class="line">    binding.CanExecute += SaveCommand_CanExecute;</span><br><span class="line">    <span class="keyword">this</span>.CommandBindings.Add(binding);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于指示Command是否可以用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveCommand_CanExecute</span>(<span class="params"><span class="built_in">object</span> sender, CanExecuteRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    e.CanExecute = _isDirty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Command执行逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveCommand_Executed</span>(<span class="params"><span class="built_in">object</span> sender, ExecutedRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;Save Successfully!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识脏数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> _isDirty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本修改，通知标识</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TextBox_TextChanged</span>(<span class="params"><span class="built_in">object</span> sender, System.Windows.Controls.TextChangedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _isDirty = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="具有内置命令的控件"><a href="#具有内置命令的控件" class="headerlink" title="具有内置命令的控件"></a>具有内置命令的控件</h3><p>&emsp;&emsp;一些输入控件可自行处理命令事件。例如，TextBox类处理Cut、Copy 以及 Paste 命令(还有 Undo、Redo 命令，以及一些来自 EditingCommand 类的用于选择文本以及将光标移到不同位置的命令)。</p><p>&emsp;&emsp;当控件具有自己的硬编码命令逻辑时，为使命令工作不需要做其他任何事情。例如，对于下图所示的简单文本编辑器，添加以下工具栏按钮，就会自动获得对剪切、复制和粘贴文本的支持:</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240626224201.png" width="60%"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ToolBar中的按钮可获得TextBox的内置命令处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ToolBar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Cut&quot;</span>&gt;</span>Cut<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Copy&quot;</span>&gt;</span>Copy<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Paste&quot;</span>&gt;</span>Paste<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ToolBar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果在不同容器（不是ToolBar或Menu控件）中放置按钮，就不会获得这项优势 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Cut&quot;</span>&gt;</span>Cut<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Copy&quot;</span>&gt;</span>Copy<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Paste&quot;</span>&gt;</span>Paste<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;txtDocument&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>如果在不同容器(不是 ToolBar 或 Menu 控件)中放置按钮，就不会获得这项优势。这意味着除非手动设置 CommandTarget属性，否则按钮不能工作。</p></div><p>&emsp;&emsp;为此，必须使用命名目标元素的绑定表达式。例如，如果文本框被命名为txtDocument，就应该像下面这样定义按钮:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">CommandTarget</span>=<span class="string">&quot;&#123;Binding ElementName=txtDocument&#125;&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Cut&quot;</span>&gt;</span>Cut<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">CommandTarget</span>=<span class="string">&quot;&#123;Binding ElementName=txtDocument&#125;&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Copy&quot;</span>&gt;</span>Copy<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">CommandTarget</span>=<span class="string">&quot;&#123;Binding ElementName=txtDocument&#125;&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Paste&quot;</span>&gt;</span>Paste<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;另一个较简单的选择是使用附加属性<code>FocusManager.IsFocusScope</code>创建新的焦点范围。当触发命令时，看焦点范围会通知WPF在父元素的焦点范围内查找元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">&quot;Horizontal&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">FocusManager.IsFocusScope</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Cut&quot;</span>&gt;</span>Cut<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Copy&quot;</span>&gt;</span>Copy<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Paste&quot;</span>&gt;</span>Paste<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该方法还有一个附加优点，即相同的命令可应用于多个控件，不像上个示例那样对CommandTarget 进行硬编码。此外，Menu和ToolBar 控件默认将FocusManager.IsFocusScope属性设置为 true，但如果希望简化命令路由行为，不在父元素上下文中查找具有焦点的元素，也可将该属性设为false。</p><blockquote><p>在极少数情况下如果希望禁用控件的内置命令可以采用以下三种方式：</p></blockquote><ul><li><p>理想情况下，控件会提供关闭命令支持的属性，例如TextBox控件提供了<code>IsUndoEnabled</code>属性，为阻止<code>Undo</code>特性，可将其设置为false</p></li><li><p>为希望禁用的命令添加新的命令绑定，然后命令绑定可提供新的<code>CanExecute</code>事件处理程序，并总是响应false</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> binding = <span class="keyword">new</span> CommandBinding(ApplicationCommands.Paste);</span><br><span class="line">    binding.CanExecute += PasteCommand_CanExecute;</span><br><span class="line">    txtDocument.CommandBindings.Add(binding);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PasteCommand_CanExecute</span>(<span class="params"><span class="built_in">object</span> sender, CanExecuteRoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    e.CanExecute = <span class="literal">false</span>; <span class="comment">// 总是禁用Paste功能</span></span><br><span class="line">    e.Handled = <span class="literal">true</span>; <span class="comment">// 阻止事件冒泡</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>InputBinding</code>集合删除触发命令的输入。例如，可使用代码禁用触发TextBox控件中的<code>Copy</code>命令的<code>Ctrl+C</code>组合键，如下所示：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 技巧是使用特定的ApplicationCommands.NotACommand值，该命令什么都不做，它专门用于禁用输入绑定</span></span><br><span class="line"><span class="comment">// 注意：这种方式只是禁用了Ctrl+C快捷键，仍然可以通过ContextMenu触发Copy命令，除非将ContextMenu属性设置为null删除删除上下文</span></span><br><span class="line"><span class="keyword">var</span> keyBinding = <span class="keyword">new</span> KeyBinding(</span><br><span class="line">    ApplicationCommands.NotACommand, </span><br><span class="line">    Key.C, </span><br><span class="line">    ModifierKeys.Control);</span><br><span class="line">txtDocument.InputBindings.Add(keyBinding);</span><br></pre></td></tr></table></figure></li></ul><h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><p>&emsp;&emsp;在5个命令类（<code>ApplicationCommands</code>、<code>NavigationCommands</code>、<code>EditingCommands</code>、<code>ComponentCommands</code>以及<code>MediaCommands</code>）中存储的命令，显然不会为应用程序提供所有可能需要的命令。幸运的是很方便地自定义命令，需要做的全部工作就是实例化一个新的<code>RoutedUICommand</code>对象。<br>&emsp;&emsp;<code>RoutedUICommand</code>类提供了几个构造函数。虽然可创建没有任何附加信息的<code>RoutedUICommand</code> 对象，但几乎总是希望提供命令名、命令文本以及所属类型。此外，可能希望为 <code>InputGestures</code> 集合提供快捷键。</p><p>&emsp;&emsp;最佳设计方式是遵循WPF库中的范例，并通过静态属性提供自定义命令。下面的示例定义了名为Requery的命令：</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">自定义命令</button><button type="button" class="tab " data-href="-2">使用自定义命令</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataCommands</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RoutedUICommand _requery;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">DataCommands</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Initialize the command</span></span><br><span class="line">        InputGestureCollection inputs = <span class="keyword">new</span> InputGestureCollection();</span><br><span class="line">        inputs.Add(<span class="keyword">new</span> KeyGesture(Key.R, ModifierKeys.Control, <span class="string">&quot;Ctrl+R&quot;</span>));</span><br><span class="line">        _requery = <span class="keyword">new</span> RoutedUICommand(<span class="string">&quot;Requery&quot;</span>, <span class="string">&quot;Requery&quot;</span>, <span class="keyword">typeof</span>(DataCommands), inputs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RoutedUICommand Requery</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _requery; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.CommandBindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CommandBinding</span> <span class="attr">Command</span>=<span class="string">&quot;local:DataCommands.Requery&quot;</span> <span class="attr">Executed</span>=<span class="string">&quot;RequeryCommand_Executed&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.CommandBindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;local:DataCommands.Requery&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding RelativeSource=&#123; RelativeSource Self&#125;,Path=Command.Text&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note danger flat"><p>当使用自定义命令时,可能需要调用静态的<code>CommandManager.InvalidateRequerySuggested()</code>方法，通知 WPF 重新评估命令的状态。然后 WPF会触发 <code>CanExecute</code> 事件，并更新使用该命令的任意命令源。</p></div><h3 id="在不同位置使用相同的命令"><a href="#在不同位置使用相同的命令" class="headerlink" title="在不同位置使用相同的命令"></a>在不同位置使用相同的命令</h3><p>&emsp;&emsp;在 WPF 命令模型中，一个重要概念是范围(scope)。尽管每个命令仅有一份副本，但使用命令的效果却会根据触发命令的位置而异。例如，如果有两个文本框，它们都支持Cut、Copy 和Paste 命令，操作只会在当前具有焦点的文本框中发生。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将CommandBinding作为资源，指定键名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CommandBinding</span> <span class="attr">x:Key</span>=<span class="string">&quot;binding&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Save&quot;</span> <span class="attr">Executed</span>=<span class="string">&quot;SaveCommand_Executed&quot;</span> <span class="attr">CanExecute</span>=<span class="string">&quot;CanExecuteSave&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ToolBar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Save&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ToolBar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多个文本框可共享命令 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox.CommandBindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">StaticResource</span> <span class="attr">ResourceKey</span>=<span class="string">&quot;binding&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">StaticResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBox.CommandBindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--未绑定Save处于禁用状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用命令参数"><a href="#使用命令参数" class="headerlink" title="使用命令参数"></a>使用命令参数</h3><p>&emsp;&emsp;通过设置<code>CommandParameter</code>属性。可直接为<code>ICOmmandSource</code>控件设置看属性（甚至可使用绑定表达式成其他控件获取值）。例如，下面的代码演示了如何通过成另一个文本框中读取数值，为链接到Zoom命令的按钮设置缩放百分比：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;NavigationCOmmands.Zoom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">CommandParameter</span>=<span class="string">&quot;&#123;Binding ElementName=txtZoom,Path=Text&#125;&quot;</span>&gt;</span></span><br><span class="line">    Zoom To Value</span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但该方法并不总是有效。例如，在具有两个文件的文本编辑器中，每个文本框重用同一个Save 按钮，但每个文本框需要使用不同的文件名。对于此类情况，必须在其他地方存储信息(例如，在 TextBox,Tag属性或在为区分文本框而索引文件名称的单独集合中存储信息)，或者需要通过代码触发命令，如下所示:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationCommands.New.Execute(theFileName,(Button)sender);</span><br></pre></td></tr></table></figure><h3 id="跟踪和翻转命令"><a href="#跟踪和翻转命令" class="headerlink" title="跟踪和翻转命令"></a>跟踪和翻转命令</h3><p>&emsp;&emsp;WPF 命令模型缺少的一个特性是翻转命令。尽管提供了 ApplicationCommands.Undo 命令但该命令通常用于编辑控件(如 TextBox 控件)以维护它们自己的 Undo 历史。如果希望支持应用程序范围内的 Undo 特性，需要在内部跟踪以前的状态，并当触发 Undo 命令时还原该状态。<br>&emsp;&emsp;遗憾的是，扩展 WPF 命令系统并不容易。相对来说没几个入口点可用于连接自定义逻辑，并且对于可用的几个入口点也没有提供说明文档。为创建通用的、可重用的 Undo 特性，需要创建一组全新的“能够撤销的”命令类，以及一个特定类型的命令绑定。本质上，必须使用自己创建的新命令系统替换 WPF 命令系统。<br>&emsp;&emsp;更好的解决方案是设计自己的用于跟踪和翻转命令的系统，但使用CommandManager 类保存命令历史。下图显示了一个这方面的例子。在该例中，窗口包含两个文本框和一个列表框,可以自由地在这两个文本框中输入内容，而列表框则一直跟踪在这两个文本框中发生的所有命令。可通过单击 Reverse Last Commmand 按钮翻转最后一个命令。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240627233914.png" width="70%"/><p>&emsp;&emsp;为构建这个解决方案，需要使用几项新技术。第一个细节是用于跟踪命令历史的类。为构建保存最近命令历史的撤销系统，可能需要用到这样的类(甚至可能喜欢创建派生的<code>ReversibleCommand</code> 类，提供诸如 <code>Unexecute()</code>的方法来翻转以前的任务)。但该系统不能工作,因为所有 WPF 命令都是唯一的。这意味着在应用程序中每个命令只有一个实例。<br>&emsp;&emsp;为理解该问题，假设提供 <code>EditingCommands.Backspace</code> 命令，而且用户在一行中回退了几个空格。可通过向最近命令堆栈中添加 <code>Backspace</code> 命令来记录这一操作，但实际上每次添加的是相同的命令对象。因此，没有简单的方法用于存储命令的其他信息，例如刚刚删除的字符如果希望存储该状态，需要构建自己的数据结构。该例使用名为<code>CommandHistoryltem</code> 的类。<br>&emsp;&emsp;每个<code>CommandHistoryItem</code>对象跟踪以下几部分信息：</p><ul><li>命令名称</li><li>执行命令的元素。在该例中，有两个文本框，所以可以是其中的任意一个</li><li>在目标元素中被改变了的属性。在该例中是TextBox类的Text属性</li><li>可用于保存受影响元素以前的对象（例如，执行命令之前文本框中的文本）</li></ul><div class="note warning flat"><p>可以为元素存储状态。如果存储整个窗口状态的快照，那么会显著增这一设计非常巧妙，加内存的使用量。然而，如果具有大量数据(比如文本框有几十行文本)，<code>Undo</code>操作的负担就很大了。解决方法是限制在历史中存储的项的数量，或使用更加智能(也更复杂)的方法只存储被改变的数据的信息，而不是存储所有数据。</p></div><p>&emsp;&emsp;CommandHistoryItem 类还提供了通用的 Undo()方法。该方法使用反射为修改过的属性应用以前的值，用于恢复TextBox控件中的文本。但对于更复杂的应用程序，需要使用CommandHistoryItem 类的层次结构，每个类都可以使用不同方式翻转不同类型的操作。</p><p>&emsp;&emsp;需要的下一个要素是执行应用程序范围内 Undo操作的命令。<code>ApplicationCommands.Undo</code> 命令是不适合的，原因是为了达到不同的目的，它已经被用于单独的文本框控件(翻转最后的编辑变化)。相反，需要创建一个新命令，如下<code>MonitorCommands</code>所示:</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">CommandHistoryItem定义</button><button type="button" class="tab " data-href="-2">MonitorCommands定义</button><button type="button" class="tab " data-href="-3">MainWindow.xaml</button><button type="button" class="tab " data-href="-4">MainWindow.cs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommandHistoryItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 执行的命令的名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CommandName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 执行命令的元素</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> UIElement ElementActedOn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 在目标元素中被改变了的属性</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PropertyActedOn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于保存受影响元素以前的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> PreviousState &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandHistoryItem</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> commandName,</span></span></span><br><span class="line"><span class="params"><span class="function">        UIElement elementActedOn,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> propertyActedOn,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">object</span> previousState</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CommandName = commandName;</span><br><span class="line">        ElementActedOn = elementActedOn;</span><br><span class="line">        PropertyActedOn = propertyActedOn;</span><br><span class="line">        PreviousState = previousState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandHistoryItem</span>(<span class="params"><span class="built_in">string</span> commandName</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params">commandName, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CanUndo</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> ElementActedOn != <span class="literal">null</span> &amp;&amp; PropertyActedOn != <span class="string">&quot;&quot;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Type elementType = ElementActedOn.GetType();</span><br><span class="line">        PropertyInfo property = elementType.GetProperty(PropertyActedOn);</span><br><span class="line">        property.SetValue(ElementActedOn, PreviousState, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonitorCommands</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RoutedUICommand _applicationUndo;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RoutedUICommand ApplicationUndo</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> MonitorCommands._applicationUndo; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">MonitorCommands</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _applicationUndo = <span class="keyword">new</span> RoutedUICommand(</span><br><span class="line">            <span class="string">&quot;ApplicationUndo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Application Undo&quot;</span>,</span><br><span class="line">            <span class="keyword">typeof</span>(MonitorCommands)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-3"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:WpfApp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;MainWindow&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;450&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.CommandBindings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定ApplicationUndo命令 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CommandBinding</span> <span class="attr">Command</span>=<span class="string">&quot;local:MonitorCommands.ApplicationUndo&quot;</span> <span class="attr">Executed</span>=<span class="string">&quot;ApplicationUndoCommand_Executed&quot;</span>          <span class="attr">CanExecute</span>=<span class="string">&quot;ApplicationUndoCommand_CanExecute&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.CommandBindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ToolBar</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Cut&quot;</span>&gt;</span>Cut<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Copy&quot;</span>&gt;</span>Copy<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Paste&quot;</span>&gt;</span>Paste<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;ApplicationCommands.Undo&quot;</span>&gt;</span>Undo<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;local:MonitorCommands.ApplicationUndo&quot;</span>&gt;</span>Reverse Last Command<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ToolBar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;lstHistory&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;3&quot;</span> <span class="attr">DisplayMemberPath</span>=<span class="string">&quot;CommandName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="-4"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用CommandManager中提供的静态事件的特点，每当执行任何一个命令都会引发它们</span></span><br><span class="line">        <span class="keyword">this</span>.AddHandler(</span><br><span class="line">            CommandManager.PreviewExecutedEvent,</span><br><span class="line">            <span class="keyword">new</span> ExecutedRoutedEventHandler(CommandExecuted)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.Unloaded += window_Unloaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">window_Unloaded</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在卸载时移出</span></span><br><span class="line">        <span class="keyword">this</span>.RemoveHandler(</span><br><span class="line">            CommandManager.PreviewExecutedEvent,</span><br><span class="line">            <span class="keyword">new</span> ExecutedRoutedEventHandler(CommandExecuted)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CommandExecuted</span>(<span class="params"><span class="built_in">object</span> sender, ExecutedRoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ignore menu button source(忽略由菜单按钮触发的事件)</span></span><br><span class="line">        <span class="keyword">if</span> (e.Source <span class="keyword">is</span> ICommandSource)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ignore the ApplicationUndo command (忽略MonitorCommands.ApplicationUndo本身触发的事件)</span></span><br><span class="line">        <span class="keyword">if</span> (e.Command == MonitorCommands.ApplicationUndo)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存文本框触发的事件</span></span><br><span class="line">        TextBox txt = e.Source <span class="keyword">as</span> TextBox;</span><br><span class="line">        <span class="keyword">if</span> (txt != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 记录当前执行的命令及当前状态，保存到ListBox中</span></span><br><span class="line">            RoutedCommand cmd = (RoutedCommand)e.Command;</span><br><span class="line">            CommandHistoryItem historyItem = <span class="keyword">new</span> CommandHistoryItem(</span><br><span class="line">                cmd.Name,</span><br><span class="line">                txt,</span><br><span class="line">                <span class="string">&quot;Text&quot;</span>,</span><br><span class="line">                txt.Text</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            lstHistory.Items.Add(historyItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ApplicationUndoCommand_CanExecute</span>(<span class="params"><span class="built_in">object</span> sender, CanExecuteRoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断能否执行ApplicationUndo命令</span></span><br><span class="line">        <span class="keyword">if</span> (lstHistory == <span class="literal">null</span> || lstHistory.Items.Count == <span class="number">0</span>)</span><br><span class="line">            e.CanExecute = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            e.CanExecute = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ApplicationUndoCommand_Executed</span>(<span class="params"><span class="built_in">object</span> sender, ExecutedRoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 执行ApplicationUndo命令时，取出最近一次的操作，进行Undo</span></span><br><span class="line">        CommandHistoryItem historyItem = (CommandHistoryItem)lstHistory.Items[lstHistory.Items.Count - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (historyItem.CanUndo)</span><br><span class="line">            historyItem.Undo();</span><br><span class="line"></span><br><span class="line">        lstHistory.Items.Remove(historyItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>&emsp;&emsp;到目前为止，除了执行 Undo 操作的反射代码比较有意义外，其他代码没有什么值得注意的地方。更困难的部分是将该命令历史集成进 WPF 命令模型中。理想的解决方案是使用能跟踪任意命令的方式完成该任务，而不管命令是被如何触发和绑定的。相对不理想的解决方案是，强制依赖于一整套全新的自定义命令对象(这一逻辑功能内置到这些自定义命令对象中)，或手动处理每个命令的 Executed 事件。</p><p>&emsp;&emsp;响应特定的命令是非常简单的，但当执行任何命令时如何进行响应呢?技巧是使用CommandManager类,该类提供了几个静态事件。这些事件包括 <code>CanExecute</code>、<code>PreviewCanExecute</code>、<code>Executed</code> 以及 <code>PreviewExecuted</code>。在该例中，<code>Executed</code> 和 <code>PreviewExecuted</code> 事件最有趣，因为每当执行任何一个命令时都会引发它们。</p><p>&emsp;&emsp;尽管 <code>CommandManger</code> 类挂起了 <code>Executed</code> 事件，但仍可使用 <code>UIElement.AddHandler( )</code>方法关联事件处理程序，并为可选的第三个参数传递true值。这样将允许接收事件，即使事件已经被处理过也同样如此，如第4章所述。然而，Bxecuted 事件是在命令执行完之后被触发的，这时已经来不及在命令历史中保存被影响的控件的状态了。相反,需要响应 <code>PreviewExecuted</code> 事件，该事件在命令执行前一刻被触发。</p><p>&emsp;&emsp;当触发 <code>PreviewExecuted</code> 事件时，需要确定准备执行的命令是否是我们所关心的。如果是可创建 CommandHistoryItem对象，并将其添加到Undo 堆栈中。还需要注意两个潜在问题。第一个问题是，当单击工具栏按钮以在文本框上执行命令时，CommandExecuted 事件被引发了两次--一次是针对工具栏按钮，另一次是针对文本框。下面的代码通过忽略发送者是ICommandSource 的命令，避免在 Undo 历史中重复条目。第二个问题是，需要明确忽略不希望添加到 Undo 历史中的命令。例如 ApplicationUndo 命令，通过该命令可翻转上一步操作。</p><p>&emsp;&emsp;该例在 ListBox 控件中存储所有 CommandHistoryItem对象。ListBox 控件的 DisplayMemberPath 属因而会显示每个条目的 <code>CommandHistoryItem.CommandName</code> 属性。上面的代码只为性被设置为CommandName，由文本框引发的命令提供 Undo 特性。然而，处理窗口中的任何文本框通常就足够了。为了支持其他控件和属性，需要对代码进行扩展。</p><p>&emsp;&emsp;最后一个细节是执行应用程序范围内 Undo 操作的代码。使用CanExecute 事件处理程序可确保只有当在 Undo 历史中至少有一项时，才能执行此代码:</p><blockquote><p>总结</p></blockquote><p>&emsp;&emsp;尽管该示例程序演示了相关概念，并提供了一个简单的应用程序，且该应用程序具有几个完全支持 Undo 特性的控件，但要在实际应用程序中使用这一方法，还需要进行许多改进。例如，需要耗费大量时间改进 <code>CommandManager.PreviewExecuted </code>事件的处理程序，以忽略那些明显不需要跟踪的命令(当前，诸如使用键盘选择文本的事件以及单击空格键引发的命令等)。类似地，可能希望为那些不是由命令表示的但应当被翻转的操作添加 CommandHistoryltem 对象。例如，输入一些文本，然后导航到其他控件。最后，可能希望将 Undo 历史限制在最近执行的命令范用之内。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;理解命令&quot;&gt;&lt;a href=&quot;#理解命令&quot; class=&quot;headerlink&quot; title=&quot;理解命令&quot;&gt;&lt;/a&gt;理解命令&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;所谓的命令——并将控件连接到命令，从而不需要重复编写事件处理代码。更重要的是，当连接的命令不可用时，</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 08元素绑定</title>
    <link href="http://bootree.cn/2024/06/17/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/08%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A/"/>
    <id>http://bootree.cn/2024/06/17/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/08%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A/</id>
    <published>2024-06-17T13:54:27.000Z</published>
    <updated>2024-06-20T11:40:41.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将元素绑定到一起"><a href="#将元素绑定到一起" class="headerlink" title="将元素绑定到一起"></a>将元素绑定到一起</h2><p>&emsp;&emsp;数据绑定的最简单情形是，源对象是WPF元素而且源属性是依赖属性。</p><h3 id="绑定表达式"><a href="#绑定表达式" class="headerlink" title="绑定表达式"></a>绑定表达式</h3><p>&emsp;&emsp;数据绑定表达式使用XMAL标记扩展（因此具有花括号）。因为正在创建<code>System.Windows.DataBinding</code>类的一个实例，所以绑定表达式以单词<code>Binding</code>开头。尽管可采用多种方式破诶只Binding对象，但本示例只需要设置两个属性：<code>ElementName</code>属性（指示源元素）和Path属性（指示源元素中的属性）</p><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240617224013.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Slider</span> <span class="attr">x:Name</span>=<span class="string">&quot;silder&quot;</span> <span class="attr">Minimum</span>=<span class="string">&quot;10&quot;</span> <span class="attr">Maximum</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;&#123;Binding ElementName=silder,Path=Value&#125;&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;Simple Text&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>之所以使用名称Path而不是Property，是因为Path可能指向属性的属性（如FontFamily.Source），也可能只想属性使用的索引器（如Content.Children[0]）。可构建具有多级层次的路径，使其指向属性的属性的属性，依此类推。</p></div><h3 id="绑定错误"><a href="#绑定错误" class="headerlink" title="绑定错误"></a>绑定错误</h3><p>&emsp;&emsp;WPF 不会引发异常来通知与数据绑定相关的问题。如果指定的元素或属性不存在，那么不会收到任何指示;相反，只是不能在目标属性中显示数据。<br>&emsp;&emsp;乍一看，对调试而言这像是可怕的梦魇。幸运的是，WPF输出了绑定失败细节的跟踪信息。当调试应用程序时，该信息显示在 VisuaStudio 的 Output 窗口中。</p><h3 id="绑定模式"><a href="#绑定模式" class="headerlink" title="绑定模式"></a>绑定模式</h3><p>&emsp;&emsp;数据绑定的一个特性是目标会被自动更新，而不考虑源的修改方式。</p><center>BindingMode枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>OneWay</td><td>当源属性变化时更新目标属性</td></tr><tr><td>TwoWay</td><td>当源属性变化时更新目标属性，并且当目标属性变化时更新源属性</td></tr><tr><td>OneTime</td><td>最初根据源属性值设置目标属性。然而，其后的所有改变都会被忽略(除非绑定被设置为一个完全不同的对象或者调用 BindingExpression.UpdateTarget()方法，正如稍后介绍的那样)。通常，如果知道源属性不会变化，可使用这种模式降低开销</td></tr><tr><td>OneWayToSource</td><td>与OnWay 类型类似，但方向相反。当目标属性变化时更新源属性(这看起来有点像向后传递)，但目标属性永远不会被更新</td></tr><tr><td>Default</td><td>此类绑定依赖于目标属性。既可以是双向的(对于用户可以设置的属性，如TextBox.Text属性)，也可以是单向的(对于所有其他属性)。除非明确指定了另一种模式，否则所有绑定都使用该方法</td></tr></tbody></table><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240617225006.png"></p><h3 id="使用代码创建绑定"><a href="#使用代码创建绑定" class="headerlink" title="使用代码创建绑定"></a>使用代码创建绑定</h3><p>&emsp;&emsp;在构建窗口时，在XAML标记中使用Binding标记扩展来声明绑定表达式通常最高效。然而，也可使用代码创建绑定</p><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">C#</button><button type="button" class="tab " data-href="note-2">XAML</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Binding binding = <span class="keyword">new</span> Binding();</span><br><span class="line">    binding.Source = silder; <span class="comment">// 源对象</span></span><br><span class="line">    binding.Path = <span class="keyword">new</span> PropertyPath(<span class="string">&quot;Value&quot;</span>); <span class="comment">// 源属性</span></span><br><span class="line">    binding.Mode = BindingMode.OneWay; <span class="comment">// 绑定模式</span></span><br><span class="line">    simpleText.SetBinding(TextBlock.FontSizeProperty, binding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Slider</span> <span class="attr">x:Name</span>=<span class="string">&quot;silder&quot;</span> <span class="attr">Minimum</span>=<span class="string">&quot;10&quot;</span> <span class="attr">Maximum</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">x:Name</span>=<span class="string">&quot;simpleText&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;Simple Text&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="使用代码检索绑定"><a href="#使用代码检索绑定" class="headerlink" title="使用代码检索绑定"></a>使用代码检索绑定</h3><p>&emsp;&emsp;可使用代码检索绑定并检查其属性，而不必考虑绑定最初是用代码还是标记创建的。</p><pre><code>通过GetBinding</code></pre><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Binding binding = BindingOperations.GetBinding(simpleText,TextBlock.FontSizeProperty);</span><br></pre></td></tr></table></figure><pre><code>通过GetBindingExpression</code></pre><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BindingExpression expression = BindingOperations.GetBindingExpression(simpleText,TextBlock.FontSizeProperty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the source element</span></span><br><span class="line">SIlder boundObject = (Slider)expression.ResolvedSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get any data you need from the source element, including its bound property.</span></span><br><span class="line"><span class="built_in">string</span> boundData = boundObject.FontSize;</span><br></pre></td></tr></table></figure><h3 id="多绑定"><a href="#多绑定" class="headerlink" title="多绑定"></a>多绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Slider</span> <span class="attr">x:Name</span>=<span class="string">&quot;silder&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Minimum</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Maximum</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;lbColors&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Color</span>=<span class="string">&quot;Yellow&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListBox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;textBox&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">x:Name</span>=<span class="string">&quot;simpleText&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding ElementName=textBox,Path=Text,Mode=OneWay&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Foreground</span>=<span class="string">&quot;&#123;Binding ElementName=lbColors,Path=SelectedValue&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定更新"><a href="#绑定更新" class="headerlink" title="绑定更新"></a>绑定更新</h3><p>&emsp;&emsp;绑定更新的触发时机由<code>Binding.UpdateSourceTrigger</code>属性控制。</p><center>UpdateSourceTrigger枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>PropertyChanged</td><td>当目标属性发生变化时立即更新源</td></tr><tr><td>LostFocus</td><td>当目标属性发生变化并且目标失去焦点时更新源</td></tr><tr><td>Explicit</td><td>除非调用<code>BindingExpression.UpdateSource()</code>方法，否则无法更新源</td></tr><tr><td>Default</td><td>根据目标属性的元数据确定更新行为(从技术角度看，是根据FrameworkPropertyMetadataDefaultUpdateSourceTriggcr属性决定更新行为)。大多数属性的默认行为是PropertyChanged但 TextBox.Text属性的默认行为是 LostFocus</td></tr></tbody></table><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextBox x:Name=<span class="string">&quot;textBox&quot;</span></span><br><span class="line">         Text=<span class="string">&quot;&#123;Binding ElementName=simpleText,Path=FontSize,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>TextBox.Text属性的默认行为是LostFocus，这仅是因为当用户输入内容时，文本框中的文本会不断地变化，从而会引起多次更新。根据源控件更新自身的方式，PropertyChanged 更新模式会使应用程序的运行更缓慢。此外，可能会导致源对象在编辑完成之前重新更新自身，而这可能引起验证问题。</p></div><h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><p>&emsp;&emsp;在极少数情况下，需要防止数据绑定触发操作和修改源对象，至少在某一时段是这样的。例如，可能想在从文本框复制信息之前暂停，而不是在每次按键后获取。或者，源对象在数据绑定属性变化时执行处理器密集型操作。在此情况下，可能要添加短暂的延迟时间，避免过分频繁地触发操作。<br>&emsp;&emsp;在这些特殊情况下，可使用 Binding对象的 Delay 属性。等待数毫秒，之后再提交更改。下面是文本框示例的修改版本，会在用户停止输入500 毫秒(半秒钟)后更新源对象:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;textBox&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding ElementName=simpleText,Path=FontSize,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Delay=500&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绑定到非元素对象"><a href="#绑定到非元素对象" class="headerlink" title="绑定到非元素对象"></a>绑定到非元素对象</h2><p>&emsp;&emsp;当绑定到非元素对象时，需要放弃<code>Binding ElementName</code>属性，并使用以下属性中的一个：</p><ul><li><strong>Source</strong> ：甘肃新时指向源对象的引用——换句话说，时提供数据的对象</li><li><strong>RelativeSource</strong> ：这是引用，使用RelateveSource对象指向源对象。有了这个附加层，可在当前元素(包含绑定表达式的元素)的基础上构建引用。这似乎无谓地增加了复杂程度，但实际上，RelativeSource属性是一种特殊工具，当编写控件模板以及数据模板时是很方便的。</li><li><strong>DataContext</strong>：如果没有使用Source或RelativeSource属性指定源，WPF 就从当前元素开始在元素树中向上查找。检查每个元素的DataContext属性，并使用第一个非空的DataContext属性。当我要将同一个对象的多个属性绑定到不同的元素时，DataContext属性是非常有用的，因为可在更高层次的容器对象上(而不是直接在目标元素上)设置DataContext 属性。</li></ul><h3 id="Source属性"><a href="#Source属性" class="headerlink" title="Source属性"></a>Source属性</h3><p>&emsp;&emsp;最简单的选择时将SOurce属性指向一些已经准备好了的静态对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Source=&#123;x:Static SystemFonts.IconFontFamily&#125;,Path=Source&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;另一种选择是绑定到先前作为资源创建的对象。例如，下面的标记创建指向Calibri字体的FontFamily 对象:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FontFamily</span> <span class="attr">x:Key</span>=<span class="string">&quot;CustomFont&quot;</span>&gt;</span>Calibri<span class="tag">&lt;/<span class="name">FontFamily</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Source=&#123;StaticResource CustomFont&#125;,Path=Source&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RelativeSource属性"><a href="#RelativeSource属性" class="headerlink" title="RelativeSource属性"></a>RelativeSource属性</h3><p>&emsp;&emsp;通过 RelativeSource 属性可根据相对于目标对象的关系指向源对象。例如，可使用RelativeSource 属性将元素绑定到自身或其父元素(不知道在元素树中从当前元素到绑定的父元素之间有多少代)。</p><p>&emsp;&emsp;为设置 Binding.RelativeSource 属性，需要使用 RelativeSource 对象。这会使语法变得更加复杂，因为除了需要创建 Binding对象外，还需要在其中创建嵌套的 RelativeSource 对象。一种选择是使用属性设置语法而不是使用 Binding 标记扩展。例如，下面的代码为 TextBlock.Text属性创建了一个 Binding 对象，这个 Binding 对象使用査找父窗口并显示窗口标题的 RelativeSource对象:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock.Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Binding</span> <span class="attr">Path</span>=<span class="string">&quot;Title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Binding.RelativeSource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">RelativeSource</span> <span class="attr">Mode</span>=<span class="string">&quot;FindAncestor&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">AncestorType</span>=<span class="string">&quot;&#123;x:Type Window&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Binding.RelativeSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock.Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>编写绑定更常用的方法是使用 Binding和 RelativeSource 标记扩展,将其合并到一个字符串：</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Path=Title, RelativeSource=&#123;RelativeSource Mode=FindAncestor,AncestorType=&#123;x:Type Window&#125;&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><center>RelativeSourceMode枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Self</td><td>表达式<code>绑定到同一个元素</code>的另一个属性上</td></tr><tr><td>FindAncestor</td><td>表达式绑定到父元素。WPF 将查找元素树直至发现期望的父元素。为了指定父元素，还必须设置 AncestorType 属性以指示希望査找的父元素的类型。此外，还可以<code>用AncestorLevel属性略过发现的一定数量的特定元素</code>。例如，当在一棵树中查找时，如果希望绑定到第三个ListBoxltem 类型的元素，应当使用如下设置--AncestorType-{x:Type ListBoxltem};并且 AncestorLevel&#x3D;3，从而略过前两个ListBoxItem元索。默认情况下，AncestorLevel 属性设置为1，并在找到第一个匹配的元素时停止查找</td></tr><tr><td>PreviousData</td><td>表达式绑定到数据绑定列表中的前一个数据项。<code>在列表项中会使用这种模式</code></td></tr><tr><td>TeampleParent</td><td>表达式绑定到应用模板的元素。<code>只有当绑定位于控件模板或数据模板内部时，这种模式才能工作</code></td></tr></tbody></table><h3 id="DataContext属性"><a href="#DataContext属性" class="headerlink" title="DataContext属性"></a>DataContext属性</h3><p>&emsp;&emsp;在某些情况下，会将大量元素绑定到同一个对象。例如，下面的一组TextBlock元素，需要为每一个元素绑定表达式显得很臃肿，因此可以给父元素绑定<code>DataContext</code>属性</p><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">默认情况下</button><button type="button" class="tab " data-href="note-2">采用DataContext属性方式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Source=&#123;x:Static SystemFonts.IconFontFamily&#125;,Path=Source&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Source=&#123;x:Static SystemFonts.IconFontFamily&#125;,Path=LineSpacing&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Source=&#123;x:Static SystemFonts.IconFontFamily&#125;,Path=FamilyTypefaces[0].Style&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Source=&#123;x:Static SystemFonts.IconFontFamily&#125;,Path=FamilyTypefaces[0].Weight&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">DataContext</span>=<span class="string">&quot;&#123;x:Static SystemFonts.IconFontFamily&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Path=Source&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Path=LineSpacing&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Path=FamilyTypefaces[0].Style&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Path=FamilyTypefaces[0].Weight&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note danger flat"><p>如果使用Source属性创建明确标识源的绑定，元素就会使用源而不会使用可能得到的任何数据上下文</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;将元素绑定到一起&quot;&gt;&lt;a href=&quot;#将元素绑定到一起&quot; class=&quot;headerlink&quot; title=&quot;将元素绑定到一起&quot;&gt;&lt;/a&gt;将元素绑定到一起&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;数据绑定的最简单情形是，源对象是WPF元素而且源属性是依赖属性。&lt;/</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>51单片机从入门到入坟 - 01Keil5安装配置</title>
    <link href="http://bootree.cn/2024/06/16/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/01Keil5%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://bootree.cn/2024/06/16/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/01Keil5%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2024-06-16T14:21:48.000Z</published>
    <updated>2024-06-23T15:04:36.573Z</updated>
    
    
    
    
    <category term="MCU" scheme="http://bootree.cn/categories/MCU/"/>
    
    <category term="51MCU" scheme="http://bootree.cn/categories/MCU/51MCU/"/>
    
    
    <category term="51单片机从入门到入坟" scheme="http://bootree.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
    <category term="IDE" scheme="http://bootree.cn/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>MQTT从入门到入坟 - 01概述</title>
    <link href="http://bootree.cn/2024/06/10/MQTT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/01%E6%A6%82%E8%BF%B0/"/>
    <id>http://bootree.cn/2024/06/10/MQTT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/01%E6%A6%82%E8%BF%B0/</id>
    <published>2024-06-10T01:38:42.000Z</published>
    <updated>2024-06-10T06:24:59.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>&emsp;&emsp;MQTT（<code>Message Queuing Telemetry Transport</code>）消息队列遥测传输协议是一种轻量级的发布&#x2F;订阅消息传输协议，特别适用于需要远程监控的物联网（IoT）设备和小型传感器。这种协议的设计目标是实现低带宽和高延迟的网络环境中的可靠通信。<br>&emsp;&emsp;MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的。MQTT被广泛用于物联网领域，包括但不限于以下场景：</p><ul><li><strong>智能家居</strong>：连接各种家用设备，如灯光、温控器和安全系统</li><li><strong>工业自动化</strong>：监控和控制工业设备和传感器</li><li><strong>远程监控</strong>：实时监控远程设备和环境参数，如农业监控和环境监测</li></ul><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610100954.png"></p><div class="note info flat"><p>MQTT协议由于其轻量级和高效性，成为物联网设备通信的理想选择。其发布&#x2F;订阅模式和多种消息传递保证机制，使得它能够在不同的网络环境中可靠地传输数据。</p></div><h2 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h2><p>&emsp;&emsp;由于物联网的环境是非常特别的，所以MQTT遵循以下设计原则：</p><ul><li><strong>精简</strong>，只保留必要功能，避免冗余，确保协议轻量级和高效运行</li><li><strong>发布&#x2F;订阅(Pub&#x2F;Sub)模式</strong>，采用发布&#x2F;订阅（Pub&#x2F;Sub）模式，简化传感器和设备之间的消息传递，提高系统扩展性和灵活性。</li><li><strong>动态主题创建</strong>，允许用户根据需要动态创建主题，降低运维成本，提供灵活的主题管理。</li><li><strong>低传输量</strong>，设计精简的消息格式和数据包头，减少传输数据量，提高传输效率，适应低带宽环境</li><li><strong>网络适应性</strong>，考虑低带宽、高延迟和不稳定网络的因素，确保在各种网络条件下可靠通信。</li><li><strong>连续会话控制</strong>，支持持久化会话，保持客户端断线重连后的数据一致性和订阅状态。</li><li><strong>低计算能力支持</strong>，设计适应低计算能力的客户端，使资源受限的设备能够高效运行。</li><li><strong>服务质量管理</strong>，提供三种服务质量（QoS）级别（QoS 0、QoS 1、QoS 2），根据不同应用场景选择适当的消息传递保障。</li><li><strong>数据灵活性</strong>，不对传输数据的类型和格式做硬性规定，保持数据传输的灵活性和兼容性。</li></ul><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><p>&emsp;&emsp;MQTT协议工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：</p><ol><li>使用发布&#x2F;订阅消息模式，提供一对多的消息发布，解除应用程序耦合。这一点很类似于XMPP，但是MQTT的信息冗余远小于XMPP，,因为XMPP使用XML格式文本来传递数据。</li><li>对负载内容屏蔽的消息传输。</li><li>使用TCP&#x2F;IP提供网络连接。主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的连接方式，优缺点自然也就各有不同了。</li><li>有三种消息发布服务质量：<ul><li> “至多一次”，消息发布完全依赖底层TCP&#x2F;IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。</li><li>“至少一次”，确保消息到达，但消息重复可能会发生。</li><li>“只有一次”，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。</li></ul></li><li>小型传输，开销很小（固定长度的头部是2字节），协议交换最小化，以降低网络流量。这就是为什么在介绍里说它非常适合“在物联网领域，传感器与服务器的通信，信息的收集”，要知道嵌入式设备的运算能力和带宽都相对薄弱，使用这种协议来传递消息再适合不过了。</li><li>使用Last Will和Testament特性通知有关各方客户端异常中断的机制。<ul><li>Last Will：即遗言机制，用于通知同一主题下的其他设备发送遗言的设备已经断开了连接。</li><li>Testament：遗嘱机制，功能类似于Last Will。</li></ul></li></ol><h2 id="MQTT协议原理"><a href="#MQTT协议原理" class="headerlink" title="MQTT协议原理"></a>MQTT协议原理</h2><h3 id="MQTT协议实现方式"><a href="#MQTT协议实现方式" class="headerlink" title="MQTT协议实现方式"></a>MQTT协议实现方式</h3><p>&emsp;&emsp;实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：<code>发布者（Publish）</code>、<code>代理（Broker）（服务器）</code>、<code>订阅者（Subscribe）</code>。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。<br>&emsp;&emsp;MQTT传输的消息分为：<code>主题(Topic)</code>和<code>负载(Payload)</code>两部分：</p><ul><li><strong>Topic</strong>：可以理解为消息的类型，订阅者订阅(<code>Subscribe</code>)后，就会收到该主题的消息内容(<code>payload</code>)</li><li><strong>Payload</strong>：可以理解为消息的内容，是指订阅者具体要使用的内容</li></ul><h3 id="网络传输与应用消息"><a href="#网络传输与应用消息" class="headerlink" title="网络传输与应用消息"></a>网络传输与应用消息</h3><p>&emsp;&emsp;MQTT会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个有序的、无损的、基于字节流的双向传输。当应用数据通过MQTT网络发送时，MQTT会把与之相关的服务质量（QoS）和主题名（Topic）相关连。</p><h3 id="MQTT客户端"><a href="#MQTT客户端" class="headerlink" title="MQTT客户端"></a>MQTT客户端</h3><p>&emsp;&emsp; 一个使用MQTT协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：</p><ul><li>发布其他客户端可能会订阅的消息</li><li>订阅其他客户端发布的消息</li><li>退订或删除应用程序的消息</li><li>断开与服务器连接</li></ul><h3 id="MQTT服务器"><a href="#MQTT服务器" class="headerlink" title="MQTT服务器"></a>MQTT服务器</h3><p>&emsp;&emsp;MQTT服务器以称为“消息代理”（Broker），可以是一个应用程序或一台设备。它是位于消息发布者和订阅者之间，它可以：</p><ul><li>接受来自客户端的网络连接</li><li>接受客户端发布的应用信息</li><li>处理来自客户端的订阅和退订的请求</li><li>向订阅的客户转发应用程序消息</li></ul><h3 id="MQTT协议中的订阅-主题-会话"><a href="#MQTT协议中的订阅-主题-会话" class="headerlink" title="MQTT协议中的订阅&#x2F;主题&#x2F;会话"></a>MQTT协议中的订阅&#x2F;主题&#x2F;会话</h3><h4 id="订阅-Subscripotion"><a href="#订阅-Subscripotion" class="headerlink" title="订阅(Subscripotion)"></a>订阅(Subscripotion)</h4><p>&emsp;&emsp;订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。</p><h4 id="会话-Session"><a href="#会话-Session" class="headerlink" title="会话(Session)"></a>会话(Session)</h4><p>&emsp;&emsp;每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。</p><h4 id="主题名-Topic-Name"><a href="#主题名-Topic-Name" class="headerlink" title="主题名(Topic Name)"></a>主题名(Topic Name)</h4><p>&emsp;&emsp;连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。</p><h4 id="主题筛选器-Topic-Filter"><a href="#主题筛选器-Topic-Filter" class="headerlink" title="主题筛选器(Topic Filter)"></a>主题筛选器(Topic Filter)</h4><p>&emsp;&emsp;一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。</p><h4 id="负载-Payload"><a href="#负载-Payload" class="headerlink" title="负载(Payload)"></a>负载(Payload)</h4><p>&emsp;&emsp;消息订阅者所具体接收的内容</p><h3 id="MQTT协议中的方法"><a href="#MQTT协议中的方法" class="headerlink" title="MQTT协议中的方法"></a>MQTT协议中的方法</h3><p>&emsp;&emsp;MQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：</p><ul><li><code>Connect</code>：等待与服务器建立连接</li><li><code>Disconnect</code>：等待MQTT客户端完成所做的工作，并于服务器断开TCP&#x2F;IP会话</li><li><code>Subscribe</code>：等待完成订阅</li><li><code>UnSubscribe</code>：等待服务器取消客户端的一个或多个topics订阅</li><li><code>Publish</code>：MQTT客户端发送消息请求，发送完成后返回应用程序线程</li></ul><h2 id="MQTT协议数据包结构"><a href="#MQTT协议数据包结构" class="headerlink" title="MQTT协议数据包结构"></a>MQTT协议数据包结构</h2><p>&emsp;&emsp; 在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体（payload）三部分构成。MQTT数据包结构如下：</p><ul><li><strong>固定头（Fixed header）</strong>：存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识</li><li><strong>可变头（Variable header）</strong>：存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容</li><li><strong>消息体（Payload）</strong>：存在于部分MQTT数据包中，表示客户端收到的具体消息</li></ul><h3 id="MQTT固定头"><a href="#MQTT固定头" class="headerlink" title="MQTT固定头"></a>MQTT固定头</h3><p>&emsp;&emsp;固定报头，所有MQTT控制报文都包含，可变报头与有效载荷是部分MQTT控制报文包含。<code>固定报头占据两字节的空间</code>，具体见：</p><center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610110429.png" width="50%"/></center><p>&emsp;&emsp;固定报头的第一个字节分为<code>控制报文的类型(4 bit)</code>，以及控制报文类型的标志位，控制类型共有14中，其中0与15被系统保留出来，其他的类型具体见：</p><table><thead><tr><th>类型</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Reserved</td><td>0</td><td>系统保留</td></tr><tr><td>CONNECT</td><td>1</td><td>客户端请求连接服务端</td></tr><tr><td>CONNACK</td><td>2</td><td>连接报文确认</td></tr><tr><td>PUBLISH</td><td>3</td><td>发布消息</td></tr><tr><td>PUBACK</td><td>4</td><td>消息发布收到确认(QoS 1)</td></tr><tr><td>PUBREC</td><td>5</td><td>发布收到(QoS 2)</td></tr><tr><td>PUBREL</td><td>6</td><td>发布释放(QoS 2)</td></tr><tr><td>PUBCOMP</td><td>7</td><td>消息发布完成(QoS 2)</td></tr><tr><td>SUBSCRIBE</td><td>8</td><td>客户端订阅请求</td></tr><tr><td>SUBACK</td><td>9</td><td>订阅请求报文确认</td></tr><tr><td>UNSUBSCRIBE</td><td>10</td><td>客户端取消订阅请求</td></tr><tr><td>UNSUBACK</td><td>11</td><td>取消订阅报文确认</td></tr><tr><td>PINGERQ</td><td>12</td><td>心跳请求</td></tr><tr><td>PINGERSP</td><td>13</td><td>心跳响应</td></tr><tr><td>DISCONNECT</td><td>14</td><td>客户端断开连接</td></tr><tr><td>Reserved</td><td>15</td><td>系统保留</td></tr></tbody></table><p>&emsp;&emsp;固定报头的<code>bit0~bit3</code>为标志位，依照报文类型有不同的含义，事实上，除了<code>PUBLISH</code>类型报文以外，其他报文的标志位均为系统保留，<code>PUBLISH</code>报文的第一个字节<code>bit3</code>是控制报文的重复分发标志（DUP），<code>bit1~bit2</code>是服务质量等级，<code>bit0</code>是PUBLISH报文的保留标志，用于标识<code>PUBLISH</code>是否保留，当客户端发送一个<code>PUBLISH</code>消息到服务器，如果保留标识位置1，那么服务器应该保留这条消息，当一个新的订阅者订阅这个主题的时候，最后保留的主题消息应被发送到新订阅的用户。<br>&emsp;&emsp;固定报头的第二个字节开始是剩余长度字段，是用于记录剩余报文长度的，表示当前的消息剩余的字节数，包括可变报头和有效载荷区域（如果存在），但剩余长度不包括用于编码剩余长度字段本身的字节数<br>&emsp;&emsp;剩余长度字段使用一个变长度编码方案，对小于128的值它使用单字节编码，而对于更大的数值则按下面的方式处理：</p><ul><li>每个字节的低7位用于编码数据长度</li><li>最高位(<code>bit7</code>)用于标识剩余长度字段是否有更多的字节，且按照大端模式进行编码，因此每个字节可以编码128个数值和一个延续位，剩余长度字段最大可拥有4个字节<ul><li>当剩余长度使用1个字节存储时，其取值范围为<code>0(0x00)~127(0x7F)</code></li><li>当使用2个字节时，其取值范围为<code>128(0x80,0x01)~16383(0xff,0x7f)</code></li><li>当使用3个字节时，其取值范围为<code>16384(0x80,0x80,0x01)~2097151(0xFF,0xFF,0x7F)</code></li><li>当使用4个字节时，其取值范围为<code>2097152(0x80,0x80,0x80,0x01)~268435455(0xFF,0xFF,0xFF,0x7F)</code></li></ul></li></ul><div class="note danger flat"><p>总的来说，MQTT报文理论上可以发送最大256M的报文，当然，这种情况是非常少的</p></div><p>&emsp;&emsp;固定头存在于所有MQTT数据包中，其结构如下：</p><h4 id="MQTT数据包类型"><a href="#MQTT数据包类型" class="headerlink" title="MQTT数据包类型"></a>MQTT数据包类型</h4><p>位置：Byte1中<code>bit7 ~ bit4</code></p><center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610114343.png" width="50%"/></center>相当于一个4位的五福好值，类型、取值及描述如下：<h4 id="标识位"><a href="#标识位" class="headerlink" title="标识位"></a>标识位</h4><p>位置：Byte1中的<code>bit3 ~ bit0</code></p><center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610114707.png" width="50%"/></center><p>&emsp;&emsp;在不适用标识位的消息类型中，标识位被作为保留位。如果收到无效的标志位时，接收端必须关闭网络连接：</p><ol><li><strong>DUP</strong>：发布消息的副本。用来在保证消息的可靠传输，如果设置为1，则在下面的变长中增加<code>MessageId</code>，并且需要回复确认，以保证消息传输完成，但不能用于检测消息重复发送。</li><li><strong>QoS</strong>：发布消息的服务质量，即：保证消息传递的次数 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ø00：最多一次，即：&lt;=1</span><br><span class="line">Ø01：至少一次，即：&gt;=1</span><br><span class="line">Ø10：一次，即：=1</span><br><span class="line">Ø11：预留</span><br></pre></td></tr></table></figure></li><li><strong>RETAIN</strong>：发布保留标识，表示服务器要保留这次推送的消息，如果有新的订阅者出现，就把这消息推送给它，如果没有那么推送至当前订阅者后释放。</li></ol><h4 id="剩余长度"><a href="#剩余长度" class="headerlink" title="剩余长度"></a>剩余长度</h4><p>位置：Byte2</p><center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610115748.png" width="50%"/></center><p>&emsp;&emsp;固定头的第二字节用来保存变长头部和消息体的总大小的，但不是直接保存的，这一字节时可以扩展，其保存机制，前7位用于保存长度，，后一部用做标识。当最后一位位1时，表示长度不足，需要使用二个字节继续保存</p><h3 id="MQTT可变头"><a href="#MQTT可变头" class="headerlink" title="MQTT可变头"></a>MQTT可变头</h3><p>&emsp;&emsp;MQTT数据包中包含一个可变头，它驻位于固定头和负载之间。可变头的内容因数据包类型不同而不同，较常的应用是作为包的标识。</p><center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610142423.png" width="50%"/></center>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;MQTT（&lt;code&gt;Message Queuing Telemetry Transport&lt;/code&gt;）消息队列</summary>
      
    
    
    
    <category term="MQTT" scheme="http://bootree.cn/categories/MQTT/"/>
    
    
    <category term="MQTT从入门到入坟" scheme="http://bootree.cn/tags/MQTT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>清除Widnows更新缓存文件</title>
    <link href="http://bootree.cn/2024/06/01/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/%E6%B8%85%E9%99%A4Widnows%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6/"/>
    <id>http://bootree.cn/2024/06/01/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/%E6%B8%85%E9%99%A4Widnows%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6/</id>
    <published>2024-06-01T03:53:48.000Z</published>
    <updated>2024-06-20T12:43:14.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过-命令提示符-删除Windows更新缓存文件"><a href="#通过-命令提示符-删除Windows更新缓存文件" class="headerlink" title="通过[命令提示符]删除Windows更新缓存文件"></a>通过[命令提示符]删除Windows更新缓存文件</h2><ol><li><p>使用<code>Windows + R</code>快捷键打开[运行]对话框，输入<code>cmd</code>，然后按<code>Ctrl + Shift + Enter</code>以管理员权限打开[命令提示符]</p></li><li><p>执行以下命令停止[Windows Update]服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop wuauserv</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令进入到<code>SoftwareDistribution</code>目录</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> %Windir%\SoftwareDistribution</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令，强制删除<code>Download</code>文件夹及其子文件夹中的所有文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del /f /s /q Download</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令，强制删除<code>DataStore</code>文件夹及其子文件夹中的所有文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del /f /s /q DataStore</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令重新启动[Windows Update]服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start wuauserv</span><br></pre></td></tr></table></figure></li></ol><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240601120301.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通过-命令提示符-删除Windows更新缓存文件&quot;&gt;&lt;a href=&quot;#通过-命令提示符-删除Windows更新缓存文件&quot; class=&quot;headerlink&quot; title=&quot;通过[命令提示符]删除Windows更新缓存文件&quot;&gt;&lt;/a&gt;通过[命令提示符]删除Win</summary>
      
    
    
    
    <category term="Tool" scheme="http://bootree.cn/categories/Tool/"/>
    
    <category term="WindowsUpdate" scheme="http://bootree.cn/categories/Tool/WindowsUpdate/"/>
    
    
    <category term="WindowsUpdate" scheme="http://bootree.cn/tags/WindowsUpdate/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 07Application类</title>
    <link href="http://bootree.cn/2024/05/31/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/07Application%E7%B1%BB/"/>
    <id>http://bootree.cn/2024/05/31/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/07Application%E7%B1%BB/</id>
    <published>2024-05-31T12:43:22.000Z</published>
    <updated>2024-06-10T01:36:51.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用程序的生命周期"><a href="#应用程序的生命周期" class="headerlink" title="应用程序的生命周期"></a>应用程序的生命周期</h2><p>&emsp;&emsp;在 WPF 中，应用程序会经历简单的生命周期。在应用程序启动后，将立即创建应用程序对象。在应用程序运行时触发各种应用程序事件，您可以选择监视其中的某些事件。最后，当释放应用程序对象时，应用程序将结束。</p><h3 id="创建Application对象"><a href="#创建Application对象" class="headerlink" title="创建Application对象"></a>创建Application对象</h3><p>&emsp;&emsp;手动创建Application对象启动Wpf应用</p><ol><li><p>设置项目属性的<code>EnableDefaultApplicationDefinition</code>属性为false使WPF应用不自动生成Main函数</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- +++ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EnableDefaultApplicationDefinition</span>&gt;</span>false<span class="tag">&lt;/<span class="name">EnableDefaultApplicationDefinition</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- +++ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建自己的文件</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">STAThread</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        App app = <span class="keyword">new</span> App();</span><br><span class="line">        MainWindow mainWindow = <span class="keyword">new</span> MainWindow();</span><br><span class="line">        app.Run(mainWindow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="应用程序的关闭方式"><a href="#应用程序的关闭方式" class="headerlink" title="应用程序的关闭方式"></a>应用程序的关闭方式</h3><p>&emsp;&emsp;通常，只要还有窗口尚未关闭，Application类就保持应用程序处于有效状态。如果这不是期望的行为，可调整<code>Application.ShutdownMode</code>属性和。如果手动实例化Application对象，就需要在调用Run()方法之前设置ShutdownMode属性。如果使用App.xaml文件，那么可在XAML文件中简单设置ShutdownMode属性</p><center>ShutdownMode枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>OnLastWindowClose</td><td>这是默认行为——只要至少还有一个窗口存在，应用程序就保持运行状态</td></tr><tr><td>OnMainWindowClose</td><td>这是传统方式——只要主窗口还处于打开状态，应用程序就保持运行状态</td></tr><tr><td>OnExplicitShutdown</td><td>除非调用<code>Application.Shutdown()</code>，否则应用程序就不会结束</td></tr></tbody></table><h3 id="应用程序事件"><a href="#应用程序事件" class="headerlink" title="应用程序事件"></a>应用程序事件</h3><center>应用程序事件</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Startup</td><td>该事件在调用<code>Application.Run()</code>之后，并且在主窗口显示之前发生。可使用该事件检查所有命令行参数，命令行参数时通过<code>StartupEventArg.Args</code>属性作为数组提供的</td></tr><tr><td>Exit</td><td>该事件在应用关闭时，并在<code>Run()</code>即将返回之前发生。此时不能取消关闭</td></tr><tr><td>SessionEnding</td><td>该事件在Windows对话结束时发生——例如，当用户注销或关闭计算机时（通过检查<code>SesstionEndingCancelEventArgs.ReasonSessionEnding</code>属性可以确定原因）。也可以通过将<code>SessionEndingEventArgs.Cancel</code>属性设置为true来取消关闭应用程序。否则，当事件处理程序结束时，WPF将调用<code>Application.Shutdown()</code>方法</td></tr><tr><td>Activated</td><td>当激活应用程序中的窗口时发生该事件。当从另一个Windows程序切换到该应用时会发生该事件。当第一次显示窗口时也会发生该事件</td></tr><tr><td>Deactivated</td><td>当取消激活应用程序中的窗口时发生该事件。当切换到另一个Windows程序时耶夫一发生该事件</td></tr><tr><td>DispatcherUnhandledException</td><td>在应用程序（主应用程序线程）中的任何位置，只要发生未处理的异常，就会发生该事件（应用程序会驳货这些异常）。通过响应该事件，可记录重要错误，甚至可选择不处理这些异常，并通过将<code>DispatcherUnhandledExceptionEventArgs.Handled</code>属性设置为true继续运行应用程序。只有当可以确保应用程序仍然处于合法状态时可以继续运行时，才这样处理</td></tr></tbody></table><p>&emsp;&emsp;下面时一个自定义的应用程序类，他重写了<code>OnSessionEnding()</code>方法，并且给如果设置了相应的标志，该方法会阻止关闭系统和应用程序自身</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _unsavedData = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> UnsavedData</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _unsavedData; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _unsavedData = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStartup</span>(<span class="params">StartupEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnStartup(e);</span><br><span class="line"></span><br><span class="line">        UnsavedData = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnSessionEnding</span>(<span class="params">SessionEndingCancelEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnSessionEnding(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (UnsavedData)</span><br><span class="line">        &#123;</span><br><span class="line">            e.Cancel = <span class="literal">true</span>;</span><br><span class="line">            MessageBox.Show(<span class="string">$&quot;The application attempted to be closed as a result of <span class="subst">&#123;e.ReasonSessionEnding.ToString()&#125;</span>. This is not allowed, as you have unsaved data.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Application类的任务"><a href="#Application类的任务" class="headerlink" title="Application类的任务"></a>Application类的任务</h2><h3 id="显示初始界面"><a href="#显示初始界面" class="headerlink" title="显示初始界面"></a>显示初始界面</h3><p>&emsp;&emsp;使用WPF提供的简单初始界面特性：</p><ol><li>为项目添加图像文件（通常时.bmp、.png或.jpg文件）</li><li>在Solution Explorer 中选择图像文件</li><li>将Build Action修改为<code>SplashScreen</code></li></ol><p>&emsp;&emsp;下次运行应用程序时，图像会立即在屏幕中央显示出来。一旦准备好运行时环境，而且<code>Application_Startup</code>方法执行完毕，应用程序的第一个窗口就将显示出来，这是初始界面图形会很快消失。以上添加初始界面的朝族哟，WPF编译器为自动生成的App.g.cs文件添加与下面类似的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SplashScreen splashScreen = <span class="keyword">new</span> SplashScreen(<span class="string">&quot;splashScreenImage.png&quot;</span>);</span><br><span class="line">splashScreen.Show(<span class="literal">true</span>); <span class="comment">// 设置为false后，初始界面不会自动关闭，需要手动调用splashScreen.Close()进行关闭</span></span><br><span class="line"></span><br><span class="line">MyApplication.App app = <span class="keyword">new</span> MyApplication.App();</span><br><span class="line">app.InitializeComponent();</span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure><h3 id="处理命令行参数"><a href="#处理命令行参数" class="headerlink" title="处理命令行参数"></a>处理命令行参数</h3><p>&emsp;&emsp;为处理命令行参数，需要相应<code>Aplication.Startup</code>事件。命令行参数时通过<code>StartupEventArgs.Args</code>属性作为字符串数组提供的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStartup</span>(<span class="params">StartupEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnStartup(e);</span><br><span class="line"></span><br><span class="line">    UnsavedData = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> win = <span class="keyword">new</span> FileViewer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.Args.Length &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> file = e.Args[<span class="number">0</span>]; <span class="comment">// 获取命令行参数</span></span><br><span class="line">        <span class="keyword">if</span> (System.IO.File.Exists(file))</span><br><span class="line">        &#123;</span><br><span class="line">            win.LoadFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问当前Application对象"><a href="#访问当前Application对象" class="headerlink" title="访问当前Application对象"></a>访问当前Application对象</h3><p>&emsp;&emsp;通过静态的<code>Application.Current</code>属性，可在应用程序的任何位置获取当前应用程序实例，从而在窗口之间进行基本交付，因为任何窗口都有可以访问当前Application对象，并通过Application对象获取主窗口的应用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Window mainWindow = Application.Current.MainWindow;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;The main window is &quot;</span> + mainWindow.Title);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;子啊窗口中还可以检查<code>Application.Windows</code>集合的内容，该集合提供了所有当前打开窗口的引用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(Window window <span class="keyword">in</span> Application.Current.Windows)</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(window.Title + <span class="string">&quot; is open.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在窗口之间进行交互"><a href="#在窗口之间进行交互" class="headerlink" title="在窗口之间进行交互"></a>在窗口之间进行交互</h3><p>&emsp;&emsp;正如在前面已经看到的，自定义应用程序类是放置响应不同应用程序事件的代码的好地方。应用程序类还可以很好地达到另一个目的:保存重要窗口的引用，使一个窗口可访问另一个窗口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可存储整个应用程序的文档，达到每个窗口共享的效果</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Document&gt; documents = <span class="keyword">new</span> List&lt;Document&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Document&gt; Documents</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;<span class="keyword">return</span> documents;&#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;documents = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单实例应用程序"><a href="#单实例应用程序" class="headerlink" title="单实例应用程序"></a>单实例应用程序</h3><p>&emsp;&emsp;通常，只要愿意就可以加载 WPF 应用程序的任意多个副本。某些情况下，这种设计是非常合理的。但在另外一些情况下，这可能会成为问题，当构建基于文档的应用程序时更是如此。</p><div class="note info flat"><p>对于单实例应用程序，WPF本身并未提供自带的解决方法，但可使用几种变通方法。基本技术时当出发<code>Application.Startup</code>事件时，检查另一个应用程序实例时候已在运行。最简单的方法时使用<code>全局的mutex对象</code>（mutex对象时操作系统提供的用于进程间通信的同步对象）。这种方法很简单，但功能有限。最重要的是，应用程序的新实例无法与已经存在的应用程序实例进行通信。</p></div><div class="note danger flat"><p>第一种方法较为简单直接，适合大多数场景。第二种方法更为复杂，但可以处理一些特定的需求，例如在已有实例中显示新的内容。</p></div><h4 id="使用Mutex"><a href="#使用Mutex" class="headerlink" title="使用Mutex"></a>使用Mutex</h4><p>&emsp;&emsp;使用Mutex可以确保只有一个实例在运行。如果尝试启动第二个实例，新的实例将检测已有的实例在运行并退出</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mutex? _mutex = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStartup</span>(<span class="params">StartupEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> appName = <span class="string">&quot;SingleInstanceApp&quot;</span>;</span><br><span class="line">        <span class="built_in">bool</span> createdNew;</span><br><span class="line"></span><br><span class="line">        _mutex = <span class="keyword">new</span> Mutex(<span class="literal">true</span>, appName, <span class="keyword">out</span> createdNew);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!createdNew)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 应用程序已在运行！退出新实例</span></span><br><span class="line">            MessageBox.Show(<span class="string">&quot;应用程序已在运行!&quot;</span>);</span><br><span class="line">            Application.Current.Shutdown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.OnStartup(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Windows-API"><a href="#使用Windows-API" class="headerlink" title="使用Windows API"></a>使用Windows API</h4><p>&emsp;&emsp;通过P&#x2F;Invoke使用Windows API来实现单实例</p><ol><li><p>创建一个<code>NativeMethods</code>类</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">NativeMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> HWND_BROADCAST = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> WM_SHOWFIRSTINSTANCE = RegisterWindowMessage(<span class="string">&quot;WM_SHOWFIRSTINSTANCE|&quot;</span> + App.AppGuid);</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;user32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">RegisterWindowMessage</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;user32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">PostMessage</span>(<span class="params">IntPtr hwnd, <span class="built_in">int</span> msg, IntPtr wparam, IntPtr lparam</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;user32&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">FindWindow</span>(<span class="params"><span class="built_in">string</span> classname, <span class="built_in">string</span> windowname</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新<code>App.xaml.cs</code></p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mutex _mutex = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> AppGuid = <span class="string">&quot;your-app-guid-here&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStartup</span>(<span class="params">StartupEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> createdNew;</span><br><span class="line">        _mutex = <span class="keyword">new</span> Mutex(<span class="literal">true</span>, <span class="string">&quot;Global\\&quot;</span> + AppGuid, <span class="keyword">out</span> createdNew);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!createdNew)</span><br><span class="line">        &#123;</span><br><span class="line">            NativeMethods.PostMessage((IntPtr)NativeMethods.HWND_BROADCAST, NativeMethods.WM_SHOWFIRSTINSTANCE, IntPtr.Zero, IntPtr.Zero);</span><br><span class="line">            Application.Current.Shutdown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.OnStartup(e);</span><br><span class="line">        ShowMainWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowMainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MainWindow mainWindow = <span class="keyword">new</span> MainWindow();</span><br><span class="line">        mainWindow.Show();</span><br><span class="line"></span><br><span class="line">        IntPtr handle = (<span class="keyword">new</span> WindowInteropHelper(mainWindow)).Handle;</span><br><span class="line">        HwndSource source = HwndSource.FromHwnd(handle);</span><br><span class="line">        source.AddHook(<span class="keyword">new</span> HwndSourceHook(WndProc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IntPtr <span class="title">WndProc</span>(<span class="params">IntPtr hwnd, <span class="built_in">int</span> msg, IntPtr wParam, IntPtr lParam, <span class="keyword">ref</span> <span class="built_in">bool</span> handled</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg == NativeMethods.WM_SHOWFIRSTINSTANCE)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowMainWindow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> IntPtr.Zero;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="程序集资源"><a href="#程序集资源" class="headerlink" title="程序集资源"></a>程序集资源</h2><div class="note info flat"><p>程序集资源又称为二进制资源，因为它们作为不透明的二进制数据被嵌入到已编译的程序集中</p></div><h3 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h3><p>&emsp;&emsp;可同构项目添加文件，并在Properties窗口中将其Build Action属性设置为Resource来添加自己的资源。为成功地使用程序集资源，无比注意以下两点：</p><ul><li>不能将Build Action属性错误地设置为 Embedded Resource。尽管所有程序集资源都被定义为嵌入的资源，当Embedded Resource生成操作会在另一个更难访问的位置放置二进制数据。在WPF应用程序中，假定总是使用Resource生成类型</li><li>不要在Propect Properties窗口中使用Resource选项卡。WPF不支持这种类型的资源URI</li></ul><div class="note info flat"><p>WPF将程序集资源和其他BAML资源合并到单独的流中。单独的资源流是哟个以下格式命名：<code>AssemblyName.g.resources</code></p></div><h3 id="检索资源"><a href="#检索资源" class="headerlink" title="检索资源"></a>检索资源</h3><p>&emsp;&emsp;显然，添加资源非常容易，但到底如何使用它们了？可以采用多种方法来使用资源</p><ul><li><p>通过静态方法<code>Application.GetResourceStream()</code></p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamResourceInfo sri = Application.GetResourceStream(<span class="keyword">new</span> Uri(<span class="string">&quot;images/winter.jpg&quot;</span>,UriKind.Relative));</span><br></pre></td></tr></table></figure></li><li><p>自行访问<code>AssemblyName.g.resource</code>资源流，并查询所需的对象</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Assembly assembly = Assembly.GetAssembly(<span class="keyword">this</span>.GetType());</span><br><span class="line"><span class="built_in">string</span> resourceName =assembly.GetName().Name + <span class="string">&quot;.g&quot;</span>;</span><br><span class="line">ResourceManager rm = <span class="keyword">new</span> ResourceManager(resourceName,assembly);</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>(ResourceSet <span class="keyword">set</span> = rm.GetResourceSet(CaltureInfo.CurrentCulture,<span class="literal">true</span>,<span class="literal">true</span>))</span><br><span class="line">&#123;</span><br><span class="line">    UnmanageMemoryStream s = (UnmanageMemoryStream)<span class="keyword">set</span>.GetObject(<span class="string">&quot;images/winter.jpg&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="pack-URI"><a href="#pack-URI" class="headerlink" title="pack URI"></a>pack URI</h3><p>&emsp;&emsp;WPF使用pack URI语法寻址编译过的资源，其完整语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pack://application:,,,/AssemblyName;component/ResourceName</span><br></pre></td></tr></table></figure><p>例如：</p><ul><li>当前程序集下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下写法等价 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">Source</span>=<span class="string">&quot;images/winter.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">Source</span>=<span class="string">&quot;pack://application:,,,/images/winter.jpg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其他程序集下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 资源图片位于WpfResources程序集的images目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">Source</span>=<span class="string">&quot;pack://application:,,,/WpfResources;component/images/winter.jpg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内容文件"><a href="#内容文件" class="headerlink" title="内容文件"></a>内容文件</h3><p>&emsp;&emsp;当嵌入文件作为资源时，会将文件放到编译过的程序集中，并且可以确保文件总是可用的。对于部署而言这是理想选择，并且可避免可能存在的问题。然而在有些情况下，使用这种方法并不方便：</p><ul><li>希望改变资源文件，又不想重新编译应用程序</li><li>资源文件非常大</li><li>资源文件是可选的，并且可以不随程序集一起部署</li><li>资源是声音文件</li></ul><div class="note warning flat"><p>WPF声音不支持程序集资源。因此，无法从资源流中析取音频文件并播放它们——至少，如果没有首先保存音频文件，就不能播放它们。这一局限是由于这些类使用的技术基础（Win32API和媒体播放器）造成的</p></div><p>&emsp;&emsp;显然，可使用应用程序部署文件，并为应用程序添加代码，进而从硬盘驱动器中读取这些文件来解决该问题。然而，WPF还有更方便的选择，使这一过程更加容易管理。可将这些未编译的文件专门标记为内容文件。<br>&emsp;&emsp;不能将内容文件嵌入到程序集中。然而，WPF为程序集添加了AssemblyAssociated-ContentFile 特性，公告每个内容文件的存在。该特性还记录了每个内容文件相对于可执行文件的位置(指示内容文件是否和可执行文件位于同一个文件夹中，或者位于某个子文件夹中)。最方便的是，当为能够理解资源的元素(如 Image 类)使用内容文件时，可使用相同的 URI 系统。<br>&emsp;&emsp;为测试该技术，为项目添加声音文件，在SolutionExplorer 中选择该文件，并在Properties窗口中<code>将 Build Action 属性改为 Content</code>。确保<code>将 Copy to Output Directory 属性设置为 CopyAlways</code>，以保证当生成项目时将声音文件复制到输出目录中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MediaELement</span> <span class="attr">Name</span>=<span class="string">&quot;Sound&quot;</span> <span class="attr">Source</span>=<span class="string">&quot;Sounds/start.wav&quot;</span> <span class="attr">LoadedBehavior</span>=<span class="string">&quot;Manual&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>&emsp;&emsp;实现本地化的方法主要有以下三种：</p><ul><li>通过编译项目以设置<code>x:Uid</code>并使用LocBaml工具实现</li><li>通过 <code>DynamicResource</code>实现</li><li>通过<code>Resx</code>文件实现</li></ul><h3 id="LocBaml工具"><a href="#LocBaml工具" class="headerlink" title="LocBaml工具"></a>LocBaml工具</h3><p>&emsp;&emsp;<a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/wpf-globalization-and-localization-overview?view=netframeworkdesktop-4.8&redirectedfrom=MSDN">官方介绍</a>的方法，考虑到实现步骤略为复杂，所以直接忽略</p><h3 id="DynamicResourc方式"><a href="#DynamicResourc方式" class="headerlink" title="DynamicResourc方式"></a>DynamicResourc方式</h3><p>&emsp;&emsp;主要是在程序中添加<code>Resource Dictionary</code>类型的文件，并在其中放入本地化资源字符串；在XAML代码中，直接使用<code>&#123;DynamicReource XXX&#125;</code>来实现；这种方法比较方便，不过也有两个缺点：</p><ul><li>在XAML中，应用DynamicResource的属性必须为依赖属性，否则会出错</li><li>在C#代码中引用稍微有点麻烦，需要从Resource Dictionary中获取并转化为字符串</li></ul><div class="note info flat"><p><a href="https://blog.csdn.net/qq_43562262/article/details/132273423">参考博客</a></p></div><h3 id="Resx文件"><a href="#Resx文件" class="headerlink" title="Resx文件"></a>Resx文件</h3><div class="note info flat"><p>Visual Studio搜索并安装扩展插件(ResXManager)[<a href="https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager%5D">https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager]</a></p></div><ol><li>在项目内<code>Properties</code>文件夹内添加新建项，资源文件<code>Resource.resx</code><br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610092803.png"></li><li>手动编译项目，然后<code>Resource.resx</code>右键菜单→在<code>ResX Manager</code>中打开<br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610092901.png"></li><li>打开后界面如下<br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610092919.png"></li><li>添加新语言<br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240610092932.png"></li><li>运行时切换语言<ol><li>新建类<code>ResourceService</code> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResourceService</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ResourceService _current = <span class="keyword">new</span> ResourceService();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResourceService Current =&gt; _current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">readonly</span> Properties.Resource resource = <span class="keyword">new</span> Properties.Resource();</span><br><span class="line">    <span class="keyword">public</span> Properties.Resource Resources =&gt; resource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RaisePropertyChanged</span>(<span class="params">[CallerMemberName] <span class="built_in">string</span> propertyName = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> handler = <span class="keyword">this</span>.PropertyChanged;</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="literal">null</span>)</span><br><span class="line">            handler(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(propertyName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangedCulture</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Properties.Resource.Culture = CultureInfo.GetCultureInfo(name);</span><br><span class="line">        <span class="keyword">this</span>.RaisePropertyChanged(<span class="string">&quot;Resources&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>XAML使用 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;&#123;Binding Resources.Hello, Source=&#123;x:Static local:ResourceService.Current&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>切换语言 <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Changed</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ResourceService.Current.ChangedCulture(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;应用程序的生命周期&quot;&gt;&lt;a href=&quot;#应用程序的生命周期&quot; class=&quot;headerlink&quot; title=&quot;应用程序的生命周期&quot;&gt;&lt;/a&gt;应用程序的生命周期&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在 WPF 中，应用程序会经历简单的生命周期。在应用程序启动</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 06控件</title>
    <link href="http://bootree.cn/2024/05/29/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/06%E6%8E%A7%E4%BB%B6/"/>
    <id>http://bootree.cn/2024/05/29/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/06%E6%8E%A7%E4%BB%B6/</id>
    <published>2024-05-29T12:15:59.000Z</published>
    <updated>2024-05-31T12:41:57.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控件类"><a href="#控件类" class="headerlink" title="控件类"></a>控件类</h2><p>&emsp;&emsp;所有控件都继承自<code>System.Windows.Control</code>类，该类添加了一小部分基本的基础结构：</p><ul><li>设置控件内容对其方式的能力</li><li>设置Tab键顺序的能力</li><li>支持绘制背景、前景和边框</li><li>支持格式化文本内容的尺寸和字体</li></ul><h3 id="Brush"><a href="#Brush" class="headerlink" title="Brush"></a>Brush</h3><p>&emsp;&emsp;WPF设置前景色和背景色不是采用简单的颜色值，而是采用更强大的Brush对象，WPF提供了三种画刷：</p><ul><li><strong>SolidColorBrush(实心画刷)</strong>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">Color</span>=<span class="string">&quot;LightGreen&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>LinearGradientBrush(线性渐变画刷)</strong>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 起点(0,0) 终点(1,1) 表示渐变方向为左上角 → 右下角 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Offset 表示偏移 ，取值0~1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0 0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1 1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;LightGreen&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;LightPink&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;LightBlue&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>RadialGradientBrush(径向渐变画刷)</strong>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- GradientOrigin 表示径向渐变的圆心位置取值0~1 (0.5,0.5)表示正中心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadialGradientBrush</span> <span class="attr">GradientOrigin</span>=<span class="string">&quot;0.5 0.5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;LightGreen&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;LightPink&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;LightBlue&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RadialGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>ImageBrush(图像画刷)</strong>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageBrush</span> <span class="attr">ImageSource</span>=<span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>VisualBrush(可视化画刷)</strong>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">x:Name</span>=<span class="string">&quot;myRectangle&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;Red&quot;</span> <span class="attr">Stroke</span>=<span class="string">&quot;Black&quot;</span> <span class="attr">StrokeThickness</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">Width</span>=<span class="string">&quot;150&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用其他元素作为填充或背景--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">VisualBrush</span> <span class="attr">Visual</span>=<span class="string">&quot;&#123;Binding ElementName=myRectangle&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Ellipse.Fill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Ellipse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>DrawingBrush(绘图画刷)</strong>  <div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">GeometryDrawing</button><button type="button" class="tab " data-href="note-2">ImageDrawing</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">GeometryDrawing</span> <span class="attr">Brush</span>=<span class="string">&quot;Blue&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">GeometryDrawing.Geometry</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">RectangleGeometry</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0,50,50&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">GeometryDrawing.Geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">GeometryDrawing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ImageDrawing</span> <span class="attr">ImageSource</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">Rect</span>=<span class="string">&quot;0,0,100,100&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DrawingBrush.Drawing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DrawingBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Rectangle.Fill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>&emsp;&emsp;Control类定义了一小部分与字体相关的属性，这些属性确定文本在控件中的显示方式</p><center>Control类中与字体有关的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>FontFamily</td><td>希望使用的字体的名称</td></tr><tr><td>FontSize</td><td>字体的设备无关单位尺寸(每单位表示1&#x2F;96英寸)</td></tr><tr><td>FontStyle</td><td>由FontStyle对象表示的文本角度，包括Normal、Italic或Oblique</td></tr><tr><td>FontWeight</td><td>由FontWeight对象表示的文本粗细</td></tr><tr><td>FontStretch</td><td>字体的拉伸或压缩程度</td></tr><tr><td>TextDecorations</td><td>文本装饰和排版</td></tr></tbody></table><h4 id="引入自定义字体"><a href="#引入自定义字体" class="headerlink" title="引入自定义字体"></a>引入自定义字体</h4><ol><li><p>下载并导入<code>.tff</code>字体文件，并修改文件属性<br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240529211532.png"></p></li><li><p>在App.xaml中声明全局字体，对于字体的名称可通过双击<code>.tff</code>字体文件进行安装查看<br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240529211202.png"></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自定义字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FontFamily</span> <span class="attr">x:Key</span>=<span class="string">&quot;DSDigital&quot;</span>&gt;</span>/Fonts/#DS-Digital<span class="tag">&lt;/<span class="name">FontFamily</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局设置字体类型【可选】 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">&quot;&#123;x:Type Control&#125;&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontFamily&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">Value</span>=<span class="string">&quot;&#123;StaticResource DSDigital&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用自定义字体</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontFamily</span>=<span class="string">&quot;&#123;StaticResource DSDigital&#125;&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">Text</span>=<span class="string">&quot;1314&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">FontSize</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="内容控件"><a href="#内容控件" class="headerlink" title="内容控件"></a>内容控件</h2><div class="note info flat"><p>所有内容控件都继承自抽象类ContentControl</p></div><p>&emsp;&emsp;内容控件(content control)是更特殊的控件类型，它们可包含并显示一块内容。从技术角度看，内容控件是可以包含单个嵌套元素的控件。与布局容器不同的是，内容控件只能包含一个子元素，而布局容器只要愿意可以包含任意多个嵌套元素。下图显示了ContentControl类的层次结构</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240529213324.png" width="50%"/><p>&emsp;&emsp;还有继承自<code>HeaderedContentControl</code>类的内容控件子集。这些控件同时具有内容区域和标题区域两部分，标题区域用于显示一些标题。这些控件包括GroupBox、TabItem以及Expander控件</p><h3 id="Content属性"><a href="#Content属性" class="headerlink" title="Content属性"></a>Content属性</h3><p>&emsp;&emsp;与 Panel 类提供 Children 集合来保存嵌套的元素不同，Control类添加了 Content 属性，该属性只接受单一对象。Content属性支持任何类型的对象,但可将该属性支持的对象分为两大类针对每一类进行不同的处理:</p><ul><li><strong>未继承自UIElement类的对象</strong>：内容控件调用这些控件的ToString()方法获取文本，然后显示该文本</li><li><strong>继承自UIElement类的对象</strong>：这些对象（包括所有可视化元素，它们时WPF的组成部分）使用UIElement.OnRender()方法在内容控件的内部进行展示</li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>&emsp;&emsp;在所有内容控件中，最简单的是Label控件。与其他任意内容控件类似，Label控件接受希望放入其中的单一内容。但不同的是 Label控件支持记忆符(mnemonics)---本质上，记忆符是能够为链接的控件设置焦点的快捷键。<br>&emsp;&emsp;为支持此功能，Label控件添加了Target 属性。为了设置 Target 属性，需要使用指向另个控件的绑定表达式。下面是必须遵循的语法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Target</span>=<span class="string">&quot;&#123;Binding ElementName=txtA&#125;&quot;</span>&gt;</span>Choose _A<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Name</span>=<span class="string">&quot;txtA&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Label</span> <span class="attr">Target</span>=<span class="string">&quot;&#123;Binding ElementName=txtB&#125;&quot;</span>&gt;</span>Choose _B<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Name</span>=<span class="string">&quot;txtB&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;标签文本中的下划线指示快捷键(如果确实需要在标签中显示下划线，必须添加两个下划线)。所有记忆符都使用 Alt 键和已经确定的快捷键工作。例如在该例中，如果用户按下了 A1t+A 组合键，第一个标签会将焦点传递给链接的控件，即txtA。同样，如果按下了 Alt+B 组合键，会将焦点传递给txtB文本框。</p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>&emsp;&emsp;WPF 提供了三种类型的按钮控件:熟悉的Button控件、CheckBox控件和RadioButton控件。所有这些控件都是继承自 ButtonBase 类的内容控件。</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p>&emsp;&emsp;Button类表示一直使用的 Windows下压按钮。它添加了两个可写属性:IsCancel和IsDefault。</p><ul><li>如果将 IsCancel 属性设置为tue，按钮就成为窗口的取消按钮。在当前窗口的任何位置如果按下 Esc 键，就会触发该按钮。</li><li>如果将 IsDefault 属性设置为 true，按钮就成为默认按钮(也就是接受按钮)。其行为取决于焦点在窗口中的当前位置。如果焦点位于某个非按钮控件上(如TextBox控件RadioButton 控件和 CheckBox 控件等)，默认按钮具有蓝色阴影，几乎像是具有焦点。如果按下 Enter 键，就会触发默认按钮。但如果焦点位于另一个按钮控件上，当前有焦点的按钮就具有蓝色阴影，而且按下 Enter键会触发当前按钮而不是默认按钮。</li></ul><h4 id="ToggleButton"><a href="#ToggleButton" class="headerlink" title="ToggleButton"></a>ToggleButton</h4><p>&emsp;&emsp;ToggleButton类，该类表示具有两个状态(按下状态和未按下状态)的按钮。当单击ToggleButtonToggleButton 按钮时，它会保持按下状态，直到再次单击该按钮以释放它为止。这有时称为“粘贴单击”(sticky click)行为。</p><h4 id="RepeatButton"><a href="#RepeatButton" class="headerlink" title="RepeatButton"></a>RepeatButton</h4><p>&emsp;&emsp;RepeatButton类，只要按钮保持按下状态，该类就不断地触发Click 事件。对于普通按钮，用户每次单击只触发一个 Click 事件。</p><h4 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h4><p>&emsp;&emsp;CheckBox 控件和 RadioButton 控件是不同类型的按钮。它们继承自ToggleButton 类，这意味着用户可切换它们的开关状态，即它们的“开关”行为。对于CheckBox 控件，切换到控件的“开”状态，意味着在其中放置复选标记。</p><h4 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h4><p>&emsp;&emsp;RadioButton 类也继承自 ToggleButton 类，并使用相同的 IsChecked 属性和相同的 Checked、Unchecked 以及 Indeterminate 事件。此外，RadioButton 类还增加了GroupName 属性，该属性用于控制如何对单选按钮进行分组。</p><h3 id="工具提示"><a href="#工具提示" class="headerlink" title="工具提示"></a>工具提示</h3><p>&emsp;&emsp;WPF 为工具提示(当在一些感兴趣的内容上悬停鼠标时，就会弹出的那些臭名昭著的黄色方框)提供了一个灵活模型。因为在 WPF 中工具提示是内容控件，所以可在工具提示中放置任何可视化元素。还可改变各种时间设置来控制工具提示的显示和隐藏速度。</p><h4 id="设置ToolTip对象的属性"><a href="#设置ToolTip对象的属性" class="headerlink" title="设置ToolTip对象的属性"></a>设置ToolTip对象的属性</h4><center>ToolTip对象的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>HasDropShadow</td><td>决定工具提示时候具有扩散的黑色阴影，使其和背后的窗口区别开来</td></tr><tr><td>Placement</td><td>使用PlacementMode枚举值决定如何放置工具提示。默认值是Mouse，表示工具提示方框的左上角与当前鼠标的位置相关(根据HorizontalOffset 和VerticalOffset 属性的值，工具提示的实际位置可能会偏离这个起始点)。其他枚举值使用绝对屏幕坐标来设置工具提示的位置，或相对于其他元素(通过使用PlacementTarget属性指定该元素)设置工具提示的位置</td></tr><tr><td>HorizontalOffset、VerticalOffset</td><td>将工具提示跳到所希望的准确位置。可使用正值或负值</td></tr><tr><td>PlacementTarget</td><td>允许相对于另一个元素定位工具提示。为使用该属性，Placement属性必须设置为 Left、Right、Top、Bottom或 Center(这些值指定了工具提示和指定元素的哪个边缘对齐)</td></tr><tr><td>PlacementRectange</td><td>用于偏移工具提示的位置。该属性的工作方式与HorizontalOffset 和VerticalOffset属性相同。如果Placement属性被设置为Mouse，该属性无效</td></tr><tr><td>CustomPopupPlacementCallback</td><td>允许使用代码动态地定位工具提示。如果Placcmcnt属性被设置为Custom，此属性确定由ToolTip 调用来获取 ToolTip 对象放置位置的方法。回调方法接收三部分信息--popupSize(ToolTip的大小)、targetSize(PlaccmentTarget的大小如果使用的话)和 offset(根据 HorizontalOffset和 VerticalOffset 属性创建的一个点)。该方法返回一个 CustomPopupPlacement对象，该对象告诉WPF 将工具提示放在哪个位置</td></tr><tr><td>StaysOpen</td><td>该属性实际上不起作用。它的目的是让您创建一直保持打开状态的工具提示直到用户在其他地方单击鼠标才关闭该提示。然而，ToolTipService.ShowDuration属性重写了StaysOpen属性。因此，在经历了设置的时间之后(通常约5秒)或当用户移开鼠标时，工具提示总是会消失。如果希望创建始终保持打开状态的类似工具提示的窗口，最简单的方法是使用Popup 控件</td></tr><tr><td>IsEnabled、IsOpen</td><td>允许使用代码控制工具提示。通过IsEnabled属性可暂时禁用工具提示，而通过IsOpen属性可使用代码显示或隐藏工具提示(或者只是检查是否打开了工具提示)</td></tr></tbody></table><h4 id="设置ToolTipService"><a href="#设置ToolTipService" class="headerlink" title="设置ToolTipService"></a>设置ToolTipService</h4><p>&emsp;&emsp;有几个工具提示属性不能通过 ToolTip 类的属性进行配置。在这种情况下，需要使用另个类，即 TooITipService 类。使用 ToolTipService 类可以配置显示工具提示的相关延迟时间。ToolTipService 类的所有属性都是附加属性，所以可在控件标签中直接设置它们，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">ToolTip</span>=<span class="string">&quot;this is a button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ToolTipService.InitialShowDelay</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ToolTipService.Placement</span>=<span class="string">&quot;Bottom&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>为几个控件复制相同的工具提示设置几乎没有任何意义。如果准备对整个应用程序中的工具提示的处理方式进行调整，可通过使用样式自动应用设置，但 ToolTipService 属性值是不能继承的，这意味着如果在窗口和容器级别上设置了属性值，它们不能到达嵌套的元素。</p></div><center>ToolTipService类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>InitialShowDelay</td><td>设置鼠标悬停在元素上时，工具提示显示之前的延迟时间（单位为毫秒）</td></tr><tr><td>ShowDuration</td><td>设置如果用户不移动鼠标，在工具提示消失之前显示的时间（单位为毫秒）</td></tr><tr><td>BetweenShowDelay</td><td>设置时间间隔(单位为毫秒)，在该期间用户可以在工具提示之间移动而不用经历InitialShowDelay 属性设置的延迟时间。例如，如果BetweenShowDelay属性设置为5000毫秒，用户就具有5秒的时间移到另一个具有工具提示的控件。如果用户在此期间移到另一个控件，新的工具提示就会立即显示。如果用户超出了这一期间，BetweenShowDelay属性将失去作用，并且会使用InitialShowDelay属性。在这种情况下，直到经历了InitialShowDelay属性设置的时间后，才会显示第二个工具提示</td></tr><tr><td>ToolTip</td><td>为工具提示设置内容。设置ToolTipService.ToolTip 属性相当于设置元素的FrameworkElement.ToolTip 属性</td></tr><tr><td>HasDropShadow</td><td>确定工具提示是否具有扩散的黑色阴影，从而使其与背后的窗口区别开来</td></tr><tr><td>ShowOnDisabled</td><td>确定当相关联的元素被禁用后是否显示工具提示。如果该属性为tue，将为禁用的元素(元素的IsEnabled 属性被设置为false)显示工具提示。默认值为false,即只有启用了相关联的元素后才会显示工具提示</td></tr><tr><td>Placement、PlacementTarget、PlacementRectangle以及VerticalOffset</td><td>这些属性用来控制工具提示的位置。这些属性和ToolTipIorizontalOffset 类的对应属性的工作方式相同</td></tr></tbody></table><h4 id="Popup"><a href="#Popup" class="headerlink" title="Popup"></a>Popup</h4><p>&emsp;&emsp;Popup 控件在许多方面与 ToolTip 控件相同,尽管它们之间没有相互继承的关系。与 TooITip类似，Popup也只能包含单一内容，该单一内容可以包含任何WPF元素(该内容存储在Popup.Child 属性中,而不像 ToolTip 内容那样存储在 ToolTip.Content属性中)。另外，与 ToolTip控件一样，Popup控件也可延伸出窗口的边界。最后，可使用相同的布局属性放置Popup控件，并且可使用相同的 IsOpen 属性显示或隐藏 Popup 控件。</p><p>&emsp;&emsp;Popup控件和ToolTop控件之间的区域更重要。这些区别包括：</p><ul><li>Popup控件永远不会自动显示。为显示Popup，必须设置IsOpen属性</li><li>默认情况下，Popup.StaysOpen属性被设置为true，并且Popup控件会一直显示，直到明确地将 IsOpen属性设置为false 为止。<code>如果将Popup.StaysOpen属性设置为false，那么当用户在其他地方单击鼠标时，Popup控件将消失</code>。</li><li>Popup控件提供了PopupAnimation属性，当把IsOpen 属性设置为 true 时，通过该属性可控制 Popup 控件进入视野的方式。可以选择 None(默认值)、Fade(弹出窗口的透明度逐渐增加)、Scro11(如果空间允许，弹出窗口将从窗口的左上角滑入)以及Slide(如果空间允许，弹出窗口将从上向下滑进其位置)。为使用这些动画中的任意一个，还必须将AllowsTransparency属性设置为true。</li><li>Popup 控件可接收焦点。因此，可在其内部放置与用户交互的控件，如按钮。该功能是使用 Popup 控件(而不使用 ToolTip 控件)的主要原因之一。</li><li>Popup 控件在 System.Windows.Controls.Primitive 名称空间中定义，因为它的最常见用法是用作更复杂控件的构件。在外观修饰方面可发现Popup控件和其他控件的区别很大。特别是，如果希望看到内容，就必须设置Background属性，因为Popup控件不会从包含它的窗口继承背景设置，而且您需要自行添加边框(对于这个目的，Border 元素的效果堪称完美)。</li></ul><h2 id="特殊容器"><a href="#特殊容器" class="headerlink" title="特殊容器"></a>特殊容器</h2><p>&emsp;&emsp;ScrollViewer控件，该控件直接继承ContentControl 类，提供了虚拟界面，允许用户围绕更大的元素滚动。与所有内容控件一样ScrollViewer 只能包含单个元素，虽然如此，您仍可在内部放置布局容器来保存自己需要的<br>意类型的元素。</p><h3 id="ScrollViewer"><a href="#ScrollViewer" class="headerlink" title="ScrollViewer"></a>ScrollViewer</h3><p>&emsp;&emsp;如果希望让大量内容适应有限的空间，滚动是重要特性之一。在WPF中为了获得滚动支持，需要在 ScrollViewer控件中封装希望滚动的内容。可通过设置HorizontalScrollBarVisibility和VerticalScrollBarVisibility控制滚动条的显示状态：</p><ul><li>Visible(默认)：总是显示</li><li>Auto：自动根据内容判断时候需要显示滚动条</li><li>Disable：不显示滚动条，无法滚动</li><li>Hidden：不显示滚动条，可以滚动</li></ul><h4 id="通过代码进行滚动"><a href="#通过代码进行滚动" class="headerlink" title="通过代码进行滚动"></a>通过代码进行滚动</h4><ul><li>LineUp()和LineDown()：向上和向下移动的效果相当于单击一次垂直滚动条两端的箭头按钮</li><li>PageUp()和PageDown()：向上和向下滚动一整屏，相当于在滚动滑块的上面或下面单击滚动条</li><li>用于水平滚动的类似方法，包括LineLeft()、LineRight()、PageLeft()和PageRight()</li><li>最后，还可使用 ScrollToXxrx()这一类方法，从而滚动到任何特定位置。对于垂直滚动，包括 ScrollToEnd()和 ScrollToHome()，这两个方法可以滚动到内容的顶部和底部。还有 ScrollToVerticalOffset(),该方法可滚动到特定位置。对于水平滚动也有类似的方法包括ScrollToLefEnd0、ScroliToRightEnd( )和 ScrollToHorizontalOffset( )。</li></ul><h4 id="自定义滚动"><a href="#自定义滚动" class="headerlink" title="自定义滚动"></a>自定义滚动</h4><p>&emsp;&emsp;ScrollViewer 控件内置的滚动功能是很有用的。该功能允许缓慢滚动任何内容，从复杂的矢量图形乃至元素网格。不过，ScrollViewer 控件最奇特的特征是允许其包含的内容参与滚动过程。下面是工作原理:</p><ol><li>在ScrollViewer控件中放置能够滚动的元素,可以是实现了IScrollInfo 接口的任意元素。</li><li>通过将 ScrollViewer,CanContentScroll属性设置为 true,告诉 ScrollViewer 控件其内容知道如何进行滚动。</li><li>当和ScrollViewer控件进行交互时(通过使用滚动条、鼠标轮和滚动方法等)，ScrollViewer 控件通过 IScrollnfo 接口来调用元素的恰当方法。元素接着执行它自己的自定义滚动功能。</li></ol><div class="note info flat"><p>IScrollInfo 接口定义了一套方法,这套方法响应不同的滚动动作。例如,它包含了 ScrollViewer控件提供的许多滚动方法，如LineUp()、LimeDowm()、PageUp()以及PageDown()。它还定义了一些处理鼠标滚轮的方法。</p></div><p>&emsp;&emsp;如果在ScrollViewer控件中放置StackPanel面板，而且不设置CanCOntentScroll属性，将得到普通的滚动行为。一次可向上或向下滚动几个像素。但如果将CanContentScroll属性设置为true，那么每次单击时会滚动到下一个元素的开头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollViewer</span> <span class="attr">CanContentScroll</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollViewer</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h3><p>&emsp;&emsp;GroupBox是这三个继承自HeaderedContentControl类的控件中最简单的一个。它显示为具有圆角和标题的方框。</p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240531202029.png"/><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GroupBox</span> <span class="attr">Header</span>=<span class="string">&quot;A GroupBox Text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Padding</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">Height</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">RadioButton</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Margin</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Content</span>=<span class="string">&quot;Save&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GroupBox</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="TabItem"><a href="#TabItem" class="headerlink" title="TabItem"></a>TabItem</h3><p>&emsp;&emsp;TabItem 表示 TabControl控件中的一页。TabItem 类添加的唯一有意义的属性是 IsSelected,该属性指示选项卡(tab)当前是否显示在 TabControl 控件中。</p><h3 id="Expander"><a href="#Expander" class="headerlink" title="Expander"></a>Expander</h3><p>&emsp;&emsp;使用 Expander 控件是十分简单的--只需在该控件内部包装希望使其能够折叠的内容。通常，每个 Expander 控件开始时都是折叠的，但可在标记中(或代码中)通过设置IsExpanded 属性</p><h2 id="文本控件"><a href="#文本控件" class="headerlink" title="文本控件"></a>文本控件</h2><p>&emsp;&emsp;WPF 提供了三个用于输入文本的控件:TextBox、RichTextBox和PasswordBox。PasswordBox控件直接继承自 Control类。TextBox和 RichTextBox 控件间接继承自 TextBoxBase 类。</p><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><p>&emsp;&emsp;TextBox控件通常存储单行文本，可将<code>TextWrapping</code>属性设置为<code>Wrap</code>或<code>WrapWithOverflow</code></p><h3 id="选择文本"><a href="#选择文本" class="headerlink" title="选择文本"></a>选择文本</h3><p>&emsp;&emsp;正如您已经了解到的，在任何文本框中都可以通过单击并拖动鼠标，或按住 Shif 键并使用方向键在文本中移动来选择文本。TextBox类还提供了使用SelectionStart、SelectionLength 以及SelectedText属性，通过编程决定选择哪些文本或改变当前所选文本的能力。</p><h3 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h3><p>&emsp;&emsp;TextBox提供了一个更特殊的功能——集成的拼写检查，该功能会在文本中无法识别的单词下面添加红色波浪线。用户可右击不能识别的单词，并从可能正确的单词列表中进行选择。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">SpellCheck.IsEnabled</span>=<span class="string">&quot;True&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PasswordBox"><a href="#PasswordBox" class="headerlink" title="PasswordBox"></a>PasswordBox</h3><p>&emsp;&emsp;与TextBox类相比，PasswordBox的用户界面更加精简。与TextBox 类非常相似，它提供了 MaxLength 属性;Clear()、Paste()以及 SelectAll()方法;并且提供了当文本发生变化时触发的事件(PasswordChanged 事件)。TextBox类和PasswordBox 类最重要的区别在于内部的工作方式。尽管可使用Password属性作为普通字符串读取和设置文本，但在内部 PasswordBox 类只使用System.Security.SecureString 对象。</p><h2 id="列表控件"><a href="#列表控件" class="headerlink" title="列表控件"></a>列表控件</h2><p>&emsp;&emsp;所有的列表控件全都继承值ItemsControl类，在WPF中常见的列表控件主要包括：</p><ul><li>ListBox</li><li>ComboBox</li><li>ListView</li><li>TreeView</li><li>ToolBar</li></ul><h2 id="基于范围的控件"><a href="#基于范围的控件" class="headerlink" title="基于范围的控件"></a>基于范围的控件</h2><p>&emsp;&emsp;WPF提供了三个使用范围概念的控件。这些控件使用在特定最小值和最大值之间的数值。这些控件--ScrollBar、ProgressBar以及 Slider--都继承自RangeBase类(该类又继承自 Control类)。尽管它们使用相同的抽象概念(范围)，但工作方式却有很大的区别。</p><center>RangeBase类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Value</td><td>控件的当前值</td></tr><tr><td>Maximum</td><td>上限</td></tr><tr><td>Minimum</td><td>下限</td></tr><tr><td>SmallChange</td><td>Value属性为“小变化”调整的数量</td></tr><tr><td>LargeChange</td><td>Value属性为“大变化”调整的数量</td></tr></tbody></table><h2 id="日期控件"><a href="#日期控件" class="headerlink" title="日期控件"></a>日期控件</h2><p>&emsp;&emsp;WPF包含两个日期控件,Calendar和DatePicker。这两个控件都被设计为允许用户选择日期</p><center>Calendar和DatePicker类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>DisplayDateStart、DisplayDateEnd</td><td>设置在日日试图中显示的日期范围</td></tr><tr><td>BlackoutDates</td><td>保存在日历中将被禁用或不能选择的日期集合</td></tr><tr><td>SelectedDate</td><td>作为DateTime对象提供选择的日期</td></tr><tr><td>SelectedDates</td><td>作为DateTime对象的集合提供选择的日期</td></tr><tr><td>DisplayDate</td><td>使用Datetime对象确定在日日试图中最初显示的日期</td></tr><tr><td>FirstDayOfWeek</td><td>确定在日日中美方的开始位置（最左边的位置）显示一星期中的哪一天</td></tr><tr><td>IsTodayHighlighted</td><td>确定日历视图时候通过突出显示指出当前日期</td></tr><tr><td>DisplayMode(只适用于Calendar)</td><td>确定日日最初的月份显示模式</td></tr><tr><td>SelectionMode(只适用于Calendar)</td><td>确定允许的日期选择类型，默认时SingleDate</td></tr><tr><td>IsDaropDownOpen</td><td>确定时候打开DatePicker控件中的下拉日历视图</td></tr><tr><td>SelectedDateFormat(只适用于DatePicker)</td><td>确定在DatePicker控件的文本部分显示选择的日期的方式</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;控件类&quot;&gt;&lt;a href=&quot;#控件类&quot; class=&quot;headerlink&quot; title=&quot;控件类&quot;&gt;&lt;/a&gt;控件类&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;所有控件都继承自&lt;code&gt;System.Windows.Control&lt;/code&gt;类，该类添加了一小部分</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 05路由事件</title>
    <link href="http://bootree.cn/2024/05/28/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/05%E8%B7%AF%E7%94%B1%E4%BA%8B%E4%BB%B6/"/>
    <id>http://bootree.cn/2024/05/28/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/05%E8%B7%AF%E7%94%B1%E4%BA%8B%E4%BB%B6/</id>
    <published>2024-05-28T12:00:28.000Z</published>
    <updated>2024-05-28T14:50:04.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由事件"><a href="#路由事件" class="headerlink" title="路由事件"></a>路由事件</h2><p>&emsp;&emsp;路由事件时具有更强传播能力的事件——它们可在元素树中向上冒泡和向下隧道传播，并且沿着传播路径被事件处理程序处理。路由事件允许事件在某个元素上被处理（如标签），即使该事件源自另一个元素（如标签内部的一幅图像）也是如此。与依赖项属性一样，可通过传统的方式使用路由事件——通过关联具有正确签名的事件处理程序——但为了使用路由事件的所有功能，需要理解其工作原理。</p><h3 id="理解路由事件"><a href="#理解路由事件" class="headerlink" title="理解路由事件"></a>理解路由事件</h3><p>&emsp;&emsp;每个.NET开发人员都熟悉“事件”的思想--当有意义的事情发生时,由对象(如WPF元素)发送的用于通知代码的消息。WPF通过事件路由(event routing)的概念增强了.NET事件模型。事件路由允许源自某个元素的事件由另一个元素引发。例如,使用事件路由,来自工具栏按钮的单击事件可在被代码处理之前上传到工具栏,然后上传到包含工具栏的窗口。</p><h3 id="定义-注册和封装路由事件"><a href="#定义-注册和封装路由事件" class="headerlink" title="定义&#x2F;注册和封装路由事件"></a>定义&#x2F;注册和封装路由事件</h3><p>&emsp;&emsp;WPF事件模型和WPF属性模型非常类似。与依赖项属性一样,路由事件由只读的静态字段表示,在静态构造函数中注册,并通过标准的.NET事件定义进行封装。</p><pre><code>例如,WPF 的Button类提供了大家熟悉的Click事件,该事件继承自抽象的ButtonBase基类。下面的代码说明了该事件是如何被定义和注册的:</code></pre><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ButtonBase</span> : <span class="title">ContentControl</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义路由事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> RoutedEvent ClickEvent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册路由事件</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">ButtonBase</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ButtonBase.ClickEvent = EventManager.RegisterRoutedEvent(</span><br><span class="line">            <span class="string">&quot;Click&quot;</span>, <span class="comment">// 事件名称</span></span><br><span class="line">            RoutingStrategy.Bubble, <span class="comment">// 路由类型</span></span><br><span class="line">            <span class="keyword">typeof</span>(RoutedEventHandler), <span class="comment">// 事件处理程序语法的委托</span></span><br><span class="line">            <span class="keyword">typeof</span>(ButtonBase) <span class="comment">// 拥有事件的类</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装路由事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> RoutedEventHandler Click</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">add</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.AddHandler(ButtonBase.ClickEvent,<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">remove</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">base</span>.RemoveHandler(ButtonBase.ClickEvent,<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>依赖项属性是使用DependencyProperty. Register()方法注册的,而路由事件是使用EventManager.RegisterRoutedEvent()方法注册的。</p></div><h3 id="共享路由事件"><a href="#共享路由事件" class="headerlink" title="共享路由事件"></a>共享路由事件</h3><p>&emsp;&emsp;与依赖项属性一样，可在类之间共享路由事件的定义。例如，UIElement(该类是所有普通WPF 元素的起点)和ContentElement(该类是所有内容元素的起点，内容元素是可以被放入流文档中的单独内容片段)这两个基类都使用了MouseUp事件。MouseUp事件是由SvstemWindows.Input,.Mouse类定义的。UElement 类和 ContentElement类只通过Routed- Event.AddOwner()方法重用MouseUp事件:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIElement.MouseUpEvent = Mouse.MouseUpEvent.AddOwner(<span class="keyword">typeof</span>(UIElement));</span><br></pre></td></tr></table></figure><h3 id="引发路由事件"><a href="#引发路由事件" class="headerlink" title="引发路由事件"></a>引发路由事件</h3><p>&emsp;&emsp;路由事件不是通过传统的.NET事件封装器引发的，而是使用RaiseEvent()方法引发事件，所有元素都从UIElement类继承了该方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RoutedEventArgs e = <span class="keyword">new</span> RoutedEventArgs(ButtonBase.ClickEvent,<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">base</span>.RaiseEvent(e); <span class="comment">// RaiseEvent()方法负责为每个已经通过 AddHandler()方法注册的调用程序引发事件。</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;所有WPF事件都为事件签名使用熟悉的.NET约定。每个事件处理程序的第一个参数（sender参数）都提供引发事件的对象的引用。第二个参数时EventArgs对象，该独显与其他所有可能很重要的附加细节绑定在一起。例如，MouseUp事件提供了一个MouseEventArgs对象，用于指示但事件发生时按下了哪些鼠标键：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">img_MouseUp</span>(<span class="params"><span class="built_in">object</span> sender,MouseButtonEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>在WPF 中,如果事件不需要传递任何额外细节,可使用RoutedEventArgs类,该类包含了有关如何传递事件的一些细节。如果事件确实需要传递额外的信息,那么需要使用更特殊的继承自RoutedEventArgs的对象(如上面示例中的MouseButtonEventArgs)。因为每个WPF事件参数类都继承自RoutedEventArgs类,所以每个WPF事件处理程序都可访问与事件路由相关的信息。</p></div><h3 id="处理路由事件"><a href="#处理路由事件" class="headerlink" title="处理路由事件"></a>处理路由事件</h3><h4 id="XAML标记"><a href="#XAML标记" class="headerlink" title="XAML标记"></a>XAML标记</h4><p>&emsp;&emsp;最常用的方法是为XAML标记天机事件特性。通常约定“元素名_事件名”的形式明明事件处理程序方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">&quot;img&quot;</span> <span class="attr">Source</span>=<span class="string">&quot;happyface.jpg&quot;</span> <span class="attr">Stretch</span>=<span class="string">&quot;None&quot;</span> <span class="attr">MouseUp</span>=<span class="string">&quot;img_MouseUp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码连接"><a href="#代码连接" class="headerlink" title="代码连接"></a>代码连接</h4><p>&emsp;&emsp;如果需要动态创建控件,并在窗口生命周期的某一时刻关联事件处理程序,代码方法是非常有用的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img.MouseUp += <span class="keyword">new</span> MouseButtonEventHandler(img_Mouseup); <span class="comment">// 完整写法</span></span><br><span class="line">img.MouseUp += img_MouseUp; <span class="comment">// 简写</span></span><br></pre></td></tr></table></figure><h4 id="事件封装器"><a href="#事件封装器" class="headerlink" title="事件封装器"></a>事件封装器</h4><p>&emsp;&emsp;当使用这种方法时，始终需要创建合适的委托类型，而不是能隐式地创建委托对象。这是因为UIElement.AddHandler()方法支持所有WPF事件，并且他不知道您要使用的委托类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.AddHandler(UIElement.MouseUpEvent,<span class="keyword">new</span> MouseButtonEventHandler(img_MouseUp));</span><br></pre></td></tr></table></figure><h4 id="断开事件处理程序"><a href="#断开事件处理程序" class="headerlink" title="断开事件处理程序"></a>断开事件处理程序</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img.MouseUp -= img_MouseUp;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">img.RemoveHandler(Imgae.MouseUpEvent,<span class="keyword">new</span> MouseButtonEventHandler(img_MouseUp));</span><br></pre></td></tr></table></figure><h2 id="事件路由"><a href="#事件路由" class="headerlink" title="事件路由"></a>事件路由</h2><p>&emsp;&emsp;WPF中的许多空间都是内容控件，而内容控件可包含任何类型以及大量的嵌套内容，因此恰当的事件标记处理可以避免处理程序变得杂乱无章。</p><pre><code>路由手机将实际上以下列三种方式出现：</code></pre><ul><li><strong>直接路由事件（direct event）</strong>：与普通.NET事件类似，它们源于一个元素，不传递给其他元素，例如，MouseEnter事件（当鼠标指针移到元素上时发生）</li><li><strong>冒泡路由事件（bubbling event）</strong>：在包含层次中向上传递的，<code>通常鼠标事件都是冒泡路由事件</code>，例如，MouseDown事件，该事件首先由被单击的元素引发，接下来被该元素的父元素引发，然后被父元素的父元素引发，以此类推，直到WPF到达元素树顶部为止</li><li><strong>隧道路由事件（tunneling event）</strong>：在包含层次中向下传递，<code>通常以Preview开头的事件</code>，隧道路由事件在事件到达恰当的控件之前为预览事件（甚至终止事件）提供了机会，例如，通过PreviewKeyDown事件可截获时候按下了某个键。首先在窗口级别上，然后时更具体的容器，直到到达但按下键时具有焦点的元素。</li></ul><h3 id="RoutedEventArgs类"><a href="#RoutedEventArgs类" class="headerlink" title="RoutedEventArgs类"></a>RoutedEventArgs类</h3><p>&emsp;&emsp;在处理冒泡路由事件时，sender参数提供了对整个链条上最后那个链接的引用</p><center>RoutedEventArgs类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Source</td><td>指示引发了事件的对象</td></tr><tr><td>OriginalSource</td><td>指示最初时什么对象引发了事件</td></tr><tr><td>RoutedEvent</td><td>通过事件处理程序为出发的事件提供RoutedEvent对象</td></tr><tr><td>Handled</td><td>该属性允许终止事件的冒泡或隧道过程。如果控件将Handled属性设为true，那么事件就不会继续传递，也不会为其他任何元素引发该事件</td></tr></tbody></table><h3 id="处理挂起的事件"><a href="#处理挂起的事件" class="headerlink" title="处理挂起的事件"></a>处理挂起的事件</h3><p>&emsp;&emsp;AddHandler()方法提供了一个重载版本,该版本可以接收一个Boolean值作为它的第三个参数。如果将该参数设置为true,那么即使设置了Handled标志,也将接收到事件:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdClear.AddHandler(UIElement.MouseUpEvent,<span class="keyword">new</span> MouseButtonEventHandler(cmdClear_MouseUp),<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>这通常不是正确的设计决策。为防止可能造成的困惑，按钮被设计为会挂起MouseUp事件</p></div><h3 id="附加事件"><a href="#附加事件" class="headerlink" title="附加事件"></a>附加事件</h3><p>&emsp;&emsp;假设在StackPanel面板中封装了一堆按钮，并希望在一个事件处理程序中处理所有这些按钮的单击事件。。粗略的方法是将每个按钮的Click事件关联到同一个事件处理程序。但Click事件支持事件冒泡,从而提供了一种更好的选择。可通过处理更高层次元素的Click事件(如包含按钮的StackPanel面板)来处理所有按钮的Click事件。</p><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">XML</button><button type="button" class="tab " data-href="note-2">C#</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Button.Click</span> = <span class="string">&quot;DoSomething&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">&quot;cmd1&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">&quot;cmd2&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">&quot;cmd3&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">&quot;cmd4&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">&quot;cmd5&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(sender == cmd1)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sender == cmd2)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="隧道路由事件"><a href="#隧道路由事件" class="headerlink" title="隧道路由事件"></a>隧道路由事件</h3><p>&emsp;&emsp;隧道路由事件的工作方式和冒泡路由事件相同，但方向相反。隧道路由事件易于识别，它们都以单词 Preview开头。而且，WPF通常成对地定义冒泡路由事件和隧道路由事件。这意味着如果发现冒泡的MouseUp事件，就还可以找到PreviewMouseUp 隧道事件。隧道路由事件总在冒泡路由事件之前被触发</p><center>隧道路由事件和冒泡路由事件</center><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240528212303.png" width="50%"><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>如果准备将隧道路由事件标记为处理过，务必要谨慎从事。根据编写控件的方式，这有可能阻止控件处理自己的事件(相关的冒泡路由事件)，从而阻止执行某些任务或阻止更新控件自身的状态。</p></div><h2 id="WPF事件"><a href="#WPF事件" class="headerlink" title="WPF事件"></a>WPF事件</h2><p>&emsp;&emsp;尽管每个元素都提供了许多事件，但最重要的事件童话参观包括以下5类：</p><ul><li><strong>生命周期事件</strong>：在元素被初始化、加载或卸载时发生这些事件</li><li><strong>鼠标事件</strong>：这些事件时鼠标动作的结果</li><li><strong>键盘事件</strong>：这些事件时键盘动作（如按下键盘上的键）的结果</li><li><strong>手写笔事件</strong>：这些事件时使用类似钢笔的手写笔的结果，在平板电脑上用手写笔代替鼠标</li><li><strong>多点触控事件</strong>：这些事件时一根或多根手指在多点触控屏幕上触摸的结果。仅在Widdows7中支持这些事件</li></ul><h3 id="生命周期事件"><a href="#生命周期事件" class="headerlink" title="生命周期事件"></a>生命周期事件</h3><p>&emsp;&emsp;但首次创建以及释放所有元素时都会引发事件，可使用这些事件初始化窗口。</p><center>所有元素的生命周期事件</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Initialized</td><td>但元素被实例化，并已根据XAML标记设置了元素的属性之后发生。这是元素已经初始化，但窗口的其他部分可能尚未初始化。此外，尚未应用样式和数据绑定。这是，IsInitialized属性为true。Initialized事件时普通的.NET事件——并未路由事件</td></tr><tr><td>Loaded</td><td>当整个窗口已经初始化并应用了样式和数据绑定时，该事件发生。这是在元素被呈现之前的最后一站。这是，IsLoaded属性为true</td></tr><tr><td>Unloaded</td><td>当元素被释放时，该事件发生，原因时包含元素的窗口被关闭或特定的元素被从窗口中删除</td></tr></tbody></table><p>&emsp;&emsp;为了弄清Initialized 事件和Loaded 事件之间的关系，分析一下呈现过程是有帮助的。FrameworkElement 类实现了 ISupportInitialize 接口，该接口提供了两个用于控制初始化过程的方法。</p><ol><li>第一个方法是 BeginInit()，在实例化元素后会立即调用该方法。调用 BeginInit( )方法后,XAML 解析器设置所有元素的属性(并添加内容)。</li><li>第二个方法是Endnit()，完成初始化后，将调用该方法，此时引发Initialized 事件。</li></ol><center>Window类的生命周期事件</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>SourceInitialized</td><td>当取得窗口的HwndSource属性时（当在窗口可见之前）发生。HwndSource时窗口句柄，如果调用Win32 API中的遗留函数，就可能需要使用该句柄</td></tr><tr><td>ContentRendered</td><td>当窗口首次呈现后立即发生。对于执行任何可能会影响窗口可视外观的更改操作，这不是一个好位置，否则将会强制进行第二次呈现（改用Loaded事件）。然而，ContentRendered事件表明窗口已经完成可见，并且已经准备好接收输入</td></tr><tr><td>Activated</td><td>当用户切换到该窗口时发生(例如，从应用程序的其他窗口或从其他应用程序切换到该窗口)。当窗口第一次加载时也会引发 Activated 事件。从概念上讲，窗口的 Activated 事件相当于控件的 GotFocus 事件</td></tr><tr><td>Deactivated</td><td>当用户从该窗口切换到其他窗口时发生(例如，切换到应用程序的其他窗口或切换到其他应用程序)。当用户关闭窗口时也会发生该事件，该事件在Cosing事件之后，但在Closcd事件之前发生。从概念上讲，窗口的Deactivated 事件相当于控件的LostFocus事件</td></tr><tr><td>Closing</td><td>当关闭窗口时发生，不管是用户关闭窗口还是通过代码调用Window.Close()或Application.Shutdown()方法关闭窗口。Closing 事件提供了取消操作并保持打开状态的机会，具体通过将CancelEventArgs.Cancel 属性设置为true 实现该目标。但是，如果是因为用户关闭或注销计算机而导致应用程序被关闭，就不能接收到Closing事件。为应对这种情况，需要处理Application.SessionEnding 事件</td></tr><tr><td>Closed</td><td>当窗口已经关闭后发生。但是，此时仍可以访问元素对象，当然是在Unoaded.事件尚未发生之前。在此，可以执行一些清理工作，向永久存储位置(如配置文件或 Windows 注册表)写入设置信息等</td></tr></tbody></table><div class="note danger simple"><p>也可以使用窗口构造函数进行初始化(在紧跟 ImitializeComponent()调用之后,添加自己的代码)。<code>但使用Loaded 事件总是更好的选择</code>。这是因为如果在 Window 类的构造函数中发生异常，就会在 XAML解析器解析页面时抛出该异常。因此，该异常将与 InnerException 属性中的原始异常一起被封装到一个没有用处的XamlParseException 对象中。</p></div><h3 id="输入事件"><a href="#输入事件" class="headerlink" title="输入事件"></a>输入事件</h3><p>&emsp;&emsp;输入事件是当用户使用某些种类的外设硬件进行交互时发生的事件，例如鼠标、键盘、手写笔或多点触控屏。输入事件可通过继承自InputEventArgs 的自定义事件参数类传递额外的信息。下图显示了继承层次。</p><center>输入事件的EventArgs类</center><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240528214735.png"></p><p>&emsp;&emsp;InputEventArgs 类只增加了两个属性:Timestamp和 Device。Timestamp 属性提供了一个整数，指示事件何时发生的毫秒数(它所代表的实际时间并不重要，但可比较不同的时间戳值以确定哪个事件先发生。时间戳值大的事件是在更近发生的)。Device 属性返回一个对象，该对象提供与触发事件的设备相关的更多信息，设备可以是鼠标、键盘或手写笔。这三种可能的设备由不同的类表示，所有这些类都继承自抽象类System.Windows.Input.InputDevice。</p><h3 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h3><p>&emsp;&emsp;当用户按下键盘上的一个键时，就会发生一系列事件。下面根据它们发生的顺序列出了这些事件。</p><center>所有元素的键盘事件（按顺序）</center><table><thead><tr><th>名称</th><th>路由类型</th><th>说明</th></tr></thead><tbody><tr><td>PreviewKeyDown</td><td>隧道</td><td>当按下一个键时发生</td></tr><tr><td>KeyDown</td><td>冒泡</td><td>当按下一个键时发生</td></tr><tr><td>PreviewTextInput</td><td>隧道</td><td>当按键完成并且元素正在接收文本输入时发生。对于那些不会产生文本“输入”的按键(如 Ctr1键、Shif 键、Backspace 键、方向键和功能键等)，不会引发该事件</td></tr><tr><td>TextInput</td><td>冒泡</td><td>当按键完成并且元素正在接收文本输入时发生。对于那些不会产生文本的按键，不会引发该事件</td></tr><tr><td>PreviewKeyUp</td><td>隧道</td><td>当释放一个按键时发生</td></tr><tr><td>KeyUp</td><td>冒泡</td><td>当释放一个按键时发生</td></tr></tbody></table><p>&emsp;&emsp;键盘处理永远不会像上面看到的这么简单。一些控件可能会挂起这些事件中的某些事件，从而可执行自己更特殊的键盘处理。最明显的例子是 TextBox 控件，它挂起了TextInput 事件。对于一些按键，TextBox 控件还挂起了KeyDown 事件，如方向键。对于此类情形，通常仍可使用隧道路由事件(PreviewTextInput和PreviewKeyDown 事件)。<br>&emsp;&emsp;TextBox 控件还添加了名为 TextChanged 的新事件。在按键导致文本框中的文本发生改变之后会立即引发该事件。这时，在文本框中已经可以看到新的文本，所以阻止不需要的按键已为时太晚。</p><h4 id="获取键盘状态"><a href="#获取键盘状态" class="headerlink" title="获取键盘状态"></a>获取键盘状态</h4><center>KeyboardDevice属性提供的方法</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>IsKeyDown()</td><td>当事件发生时，通知时候按下了该键</td></tr><tr><td>IsKeyUp()</td><td>当事件发生时，通知时候释放了该键</td></tr><tr><td>IsKeyToggled()</td><td>当事件发生时，通知该键是否处于“打开”状态。该方法只对那些能够打开、关闭的键有意义，如 Caps Lock 键、Scroll Lock 键以及 Num Lock 键</td></tr><tr><td>GetKeyStates()</td><td>返回一个或多个 KeyStates 枚举值，指明该键当前是否被释放了、按下了或处于切换状态。该方法本质上和为同一个键同时调用IsKeyDown()方法和IsKeyToggled()方法相同</td></tr></tbody></table><div class="note info flat"><p>使用KeyConverter类将Key值转换为更有用的字符串。例如，使用KeyConverter.ConverterToString( )方法，Key.D9 和 Dey.NumPad9 都返回字符串“9”。如果只使用 Key.ToString()方法，将得到不那么有用的枚举名称(D9 或 NumPad9)</p></div><h3 id="鼠标输入"><a href="#鼠标输入" class="headerlink" title="鼠标输入"></a>鼠标输入</h3><p>&emsp;&emsp;鼠标事件执行几个关联的任务。当鼠标移到某个元素上时，可通过最基本的鼠标事件进行响应。这些事件是 MouseEnter(当鼠标指针移到元素上时引发该事件)和 MoseLeave(当鼠标指针离开元素时引发该事件)。这两个事件都是直接事件，这意味着它们不使用冒泡和隧道过程，而是源自一个元素并且只被该元素引发。考虑到控件嵌入到 WPF窗口的方式，这是合理的。</p><div class="note info flat"><p>UIElement 类还包含两个有用的属性，这两个属性能帮助进行鼠标命中测试。可使用IsMouseOver 属性确定当前鼠标是否位于某个元素及其子元素上面,还可以使用 IsMouseDirectlyOver属性检查鼠标是否位于某个元素上面，但未位于其子元素上面。通常不会在代码中读取和使用这些值，反而会使用它们构建样式触发器，从而当鼠标移到元素上时，自动修改元素。</p></div><h4 id="鼠标单击"><a href="#鼠标单击" class="headerlink" title="鼠标单击"></a>鼠标单击</h4><p>&emsp;&emsp;鼠标单击事件的引发方式和按键事件的引发方式有类似之处。区别是对于鼠标左键和鼠标右键引发不同的事件</p><center>所有元素的鼠标当单击事件（按顺序排列）</center><table><thead><tr><th>名称</th><th>路由类型</th><th>说明</th></tr></thead><tbody><tr><td>PreviewMouseLeftButtonDown、PreviewMouseRightButtonDown</td><td>隧道</td><td>当按下鼠标键时发生</td></tr><tr><td>MouseLeftButtonDown、MouseRightButtonDown</td><td>冒泡</td><td>当按下鼠标键时发生</td></tr><tr><td>PreviewMouseLeftButtonUp、PreivewMouseRightButtonUp</td><td>隧道</td><td>当释放鼠标键时发生</td></tr><tr><td>MouseLeftButtonUp、MouseRightButtonUp</td><td>冒泡</td><td>当释放鼠标键时发生</td></tr></tbody></table><div class="note info flat"><p>某些元素添加了更高级的鼠标事件。例如，Control类添加了PreviewMouseDoubleClick事件和 MouseDoubleClick 事件，这两个事件代替了MouseLeftButtonUp 事件。与此类似，对于Button类，通过鼠标或键盘可触发 Click事件。</p></div><h3 id="捕获鼠标"><a href="#捕获鼠标" class="headerlink" title="捕获鼠标"></a>捕获鼠标</h3><p>&emsp;&emsp;通常，元素每次接收到鼠标键“按下”事件后，不久后就会接收到对应的鼠标键“释放”事件。但情况不见得总是如此。例如，如果单击一个元素，保持按下鼠标键，然后移动鼠标指针离开该元素，这时该元素就不会接收到鼠标键释放事件。<br>&emsp;&emsp;某些情况下，可能希望通知鼠标键释放事件，即使鼠标键释放事件是在鼠标已经离开了原来的元素之后发生的。为此，需要调用Mouse.Capture()方法并传递恰当的元素以捕获鼠标。此后就会接收到鼠标键按下事件和释放事件，直到再次调用Mouse.Capture()方法并传递空引用为止。当鼠标被一个元素捕获后，其他元素就不会接收到鼠标事件。这意味着用户不能单击窗口中其他位置的按钮，不能单击文本框的内部。鼠标捕获有时用于可以被拖放并可以改变尺寸的元素。</p><div class="note info flat"><p>当调用 Mouse.Capture()方法时，可传递可选的 CaptureMode 值作为第二个参数。通常，当调用 Mouse.Capture()方法时，使用 CaptureMode.Element值，这表示元素总是接收鼠标事件。然而如果使用 CaptureMode.SubTree,鼠标事件就可以经过已单击的元素(假定这个元素是执行捕获的元素的子元素)。如果在子元素中已经使用了事件冒泡或隧道特性来监视鼠标事件,这是非常合理的。</p></div><p>&emsp;&emsp;有些情况下，可能由于其他原因(不是您的错)丢失鼠标捕获。例如，如果需要显示系统对话框，Windows 可能会释放鼠标捕获。如果当鼠标键释放事件发生后没有释放鼠标，并且用户单击了另一个应用程序中的窗口，也可能丢失鼠标捕获。无论哪种情况，都可以通过处理元素的 <code>LostMouseCapture</code> 事件来响应鼠标捕获的丢失。<br>&emsp;&emsp;当鼠标被一个元素捕获时，就不能与其他元素进行交互(例如，不能单击窗口中的其他元鼠标捕获通常用于短时间的操作，如拖放。素)。</p><div class="note warning simple"><p>不是使用 Mouse.Capture( )方法，而是改用 UIElement类提供的两个方法:CaptureMouse()和 ReleaseMouseCapture()。只在合适的元素上调用这些方法。这种方法的唯一限制是不允许使<br>用 CaptureMode.SubTree 选项。</p></div><h3 id="鼠标拖放"><a href="#鼠标拖放" class="headerlink" title="鼠标拖放"></a>鼠标拖放</h3><p>&emsp;&emsp;本质上，拖放操作通过以下三个步骤进行：</p><ol><li>用户点击元素（或选择元素中的一块特定区域），并保持鼠标键为按下状态。这是，某些信息被搁置起来，并且拖放操作开始</li><li>用户键鼠标移到其他元素上。如果该元素可接受正在拖动的内容的类型，鼠标指针会变成拖放图标，否则鼠标指针会变成内部有一条线的圆形</li><li>当用户释放鼠标键时，元素接受信息并决定如何处理接收到的信息。在没有释放鼠标键时，可按下Esc键取消该操作</li></ol><h2 id="多点触控输入"><a href="#多点触控输入" class="headerlink" title="多点触控输入"></a>多点触控输入</h2><p>&emsp;&emsp;多点触控(multi-touch)是通过触摸屏幕与应用程序进行交互的一种方式。多点触控输入和更传统的基于笔(pen-based)的输入的区别是多点触控识别手势(gesture)---用户可移动多根手指以执行常见操作的特殊方式。</p><div class="note info flat"><p>要获得 Windows7 能够识别的标准多点触控手势列表,请参阅  <a class="btn-beautify green small" href="http://tinyurl.com/yawwhw2"   title="多点触控"><i class="far fa-hand-point-right"></i><span>多点触控</span></a></p></div><h3 id="多点触控的输入层级"><a href="#多点触控的输入层级" class="headerlink" title="多点触控的输入层级"></a>多点触控的输入层级</h3><p>&emsp;&emsp;WPF提供了三个独立的层次：</p><ul><li><strong>原始触控（raw touch）</strong>：这是最低级的支持，可访问用户执行的每个触控。缺点是由您的应用程序负责将单独的触控消息组合到一起，并对它们进行解释。如果不准备识别标准触摸手势，反而希望创建以独特方式响应多点触控输入的应用程序，使用原始触控是合理的。一个例子是绘图程序，例如 Windows7画图程序，该程序允许用户同时使用多根手指在触摸屏上绘图。</li><li><strong>操作（manipulation）</strong>：操作(manipulation):这是一个简便的抽象层，该层将原始的多点触控输入转换成更有意义的手势，与WPF控件将一系列MouseDown和MouseUp 事件解释为更高级的MouseDoubleClick事件很相似。WPF 支持的通用手势包括移动(pan)、缩放(zoom)、旋转(rotate)以及轻按(tap)。</li><li><strong>内置的元素支持（built-in element support）</strong>：内置的元素支持(built-in element support):有些元素已对多点触控事件提供了内置支持，从而不需要再编写代码。例如，可滚动的控件支持触控移动，如 ListBox、ListView、DataGrid、TextBox 以及 ScrollViewer.</li></ul><h3 id="原始触控"><a href="#原始触控" class="headerlink" title="原始触控"></a>原始触控</h3><p>&emsp;&emsp;与基本的鼠标和键盘事件一样，触控事件被内置到低级的UIElement以及ContentElement类。</p><center>所有元素的原始触控事件</center><table><thead><tr><th>名称</th><th>路由类型</th><th>说明</th></tr></thead><tbody><tr><td>PreiviewTouchDown</td><td>隧道</td><td>当用户触摸元素时发生</td></tr><tr><td>TouchDown</td><td>冒泡</td><td>当用户触摸元素时发生</td></tr><tr><td>PreviewTouchMove</td><td>隧道</td><td>当用户移动放到触摸屏上的手指时发生</td></tr><tr><td>TouchMove</td><td>冒泡</td><td>当用户移动放到触摸屏上的手指时发生</td></tr><tr><td>PreiviewTouchUp</td><td>隧道</td><td>当用户一开手指，结束触摸时发生</td></tr><tr><td>TouchUp</td><td>冒泡</td><td>当用户一开手指，结束触摸时发生</td></tr><tr><td>TouchEnter</td><td>无</td><td>当触点从元素外进入元素内时发生</td></tr><tr><td>TouchLeave</td><td>无</td><td>当触点离开元素时发生</td></tr></tbody></table><p>&emsp;&emsp;所有这些事件都提供了一个 TouchEventArgs对象，该对象提供了两个重要成员。</p><ol><li>第一个是GetTouchPoint()方法，该方法返回触控事件发生位置的屏幕坐标(还有一些不怎么常用的数据例如触点的大小)。</li><li>第二个是 TouchDevice 属性，该属性返回一个 TouchDevice 对象。这里的技巧是将每个触点都视为单独设备。因此，如果用户在不同的位置按下了两根手指(同时按下或者先按下一根再按下另一根)，WPF将它们作为两个触控设备，并为每个触控设备指定唯一的ID。当用户移动这些手指，并且触控事件发生时，代码可以通过 TouchDevice.Id 属性区分两个触点</li></ol><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>&emsp;&emsp;WPF为手势提供了更高级别的支持，称为触控操作(manipulation)。通过将元素的 IsManipulationEnabled 属性设为 True，将元素配置为接受触控操作。然后可响应4个操作事件:ManipulationStarting、ManipulationStartedManipulationDelta 以及ManipulationCompleted.</p><h3 id="惯性"><a href="#惯性" class="headerlink" title="惯性"></a>惯性</h3><p>&emsp;&emsp;WPF 还有一层构建在基本操作支持之上的特性，称为惯性(intertia)。本质上，通过惯性可以更逼真、更流畅地操作元素。<br>&emsp;&emsp;只需处理 ManipulationInertiaStarting 事件。当用户结束手势并抬起手指释放元素时，触发 ManipulationInertiaStarting 事件。这时，可使用 ManipulationInertiaStartingEventsArgs 对象确定当前速度--当操作结束时元素的移动速度--并设置希望的减速度。下面的示例为移动、缩放以及旋转手势添加了惯性:</p><p>&emsp;&emsp;为使元素从障碍物自然地被弹回，需要在 ManipulationDelta 事件中检查是否将元素拖到了错误的位置。如果穿过了一条边界，那么由您负责通过调用ManipulationDeltaEventArgsReportBoundaryFeedback()方法进行报告。</p><div class="note info flat"><p>当参阅 <a href="http://multitouch.codeplex.com/">multitouch</a> 上的 WPF Multi-Touch项目。该项目提供了两种方便的方式，通过这两种方式可以为容器添加操作支持，而不需要自己编写代码--使用会自动应用的</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;路由事件&quot;&gt;&lt;a href=&quot;#路由事件&quot; class=&quot;headerlink&quot; title=&quot;路由事件&quot;&gt;&lt;/a&gt;路由事件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;路由事件时具有更强传播能力的事件——它们可在元素树中向上冒泡和向下隧道传播，并且沿着传播路径被事件处</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>git通过ssh连接github</title>
    <link href="http://bootree.cn/2024/05/27/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/git%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5github/"/>
    <id>http://bootree.cn/2024/05/27/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/git%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5github/</id>
    <published>2024-05-27T12:01:37.000Z</published>
    <updated>2024-06-20T12:43:28.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>&emsp;&emsp;Git是一个分布式版本控制系统，用于跟踪文件的变化并协调多个人在同一个项目上的工作。它最初由Linus Torvalds创建，用于管理Linux内核开发，现已成为许多软件开发团队和项目的标准工具之一。</p><center>git版本管理流程</center><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240527200903.png"></p><h2 id="SSH简介"><a href="#SSH简介" class="headerlink" title="SSH简介"></a>SSH简介</h2><p>&emsp;&emsp;SSH（Secure Shell）是一种网络协议，用于在不安全的网络上安全地进行远程登录和执行命令。它提供了加密的通信机制，可以确保在客户端和服务器之间传输的数据是安全的，不会被窃听或篡改。</p><pre><code>SSH的主要特点包括：</code></pre><ul><li>加密通信：SSH使用加密算法对通信数据进行加密，防止数据被第三方窃听或篡改。</li><li>认证机制：SSH支持多种认证方式，包括基于密码的认证、基于公钥的认证以及基于身份证书的认证，以确保用户身份的安全性。</li><li>安全性：SSH设计时考虑了各种安全问题，包括密码猜测、中间人攻击等，并提供了相应的安全机制和措施来保护系统免受这些攻击。</li><li>远程访问：SSH允许用户通过网络远程登录到其他计算机，并在远程计算机上执行命令或访问文件。</li><li>文件传输：除了远程登录，SSH还支持安全地传输文件，通过SCP（Secure Copy Protocol）或SFTP（SSH File Transfer Protocol）等方式。</li></ul><div class="note info flat"><p>SSH已经成为了许多操作系统和网络设备的标准远程登录协议，广泛用于系统管理、远程开发、数据传输等场景。</p></div><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure><h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你的Github绑定的邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取SSH-Key"><a href="#获取SSH-Key" class="headerlink" title="获取SSH Key"></a>获取SSH Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开目录 %userprofile%/.ssh</span></span><br><span class="line"><span class="built_in">cd</span> %userprofile%/.ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 id_rsa.pub 文件内容</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="Github配置SSH"><a href="#Github配置SSH" class="headerlink" title="Github配置SSH"></a>Github配置SSH</h3><ol><li>进入<a href="github.com">Github</a> &gt; 点击头像 &gt; 点击Settings</li><li>点击<code>SSH and GPG keys</code> &gt; 点击<code>New SSH Key</code><br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240527202143.png"></li><li>输入公钥 &gt; 点击<code>Add SSH Key</code><br> <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240527202249.png"></li></ol><h3 id="检测是否配置成功"><a href="#检测是否配置成功" class="headerlink" title="检测是否配置成功"></a>检测是否配置成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><center>显示如下，表示配置成功</center><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240527202613.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Git是一个分布式版本控制系统，用于跟踪文件的变化并协调多个人在同一个项目上的工作。它最初由</summary>
      
    
    
    
    <category term="Tool" scheme="http://bootree.cn/categories/Tool/"/>
    
    <category term="Git" scheme="http://bootree.cn/categories/Tool/Git/"/>
    
    
    <category term="Git" scheme="http://bootree.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 04依赖属性</title>
    <link href="http://bootree.cn/2024/05/25/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/04%E4%BE%9D%E8%B5%96%E5%B1%9E%E6%80%A7/"/>
    <id>http://bootree.cn/2024/05/25/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/04%E4%BE%9D%E8%B5%96%E5%B1%9E%E6%80%A7/</id>
    <published>2024-05-25T09:01:55.000Z</published>
    <updated>2024-05-27T15:06:57.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖项属性"><a href="#依赖项属性" class="headerlink" title="依赖项属性"></a>依赖项属性</h2><p>&emsp;&emsp;依赖项属性是标准.NET属性的全新实现--具有大量新增价值。在 WPF的核心特性(如动画、数据绑定以及样式)中需要嵌入依赖项属性。WPF 元素提供的大多数属性都是依赖项属性。依赖项属性的用法和普通属性是相同的。</p><div class="note warning flat"><p>只能为依赖对象（继承自<code>DependencyObject</code>的类）添加依赖属性。幸运的是，WPF基础结构的关键部分中的大部分都简介继承自<code>DependencyObject</code>类，最明显的例子就是元素</p></div><h3 id="定义依赖项属性"><a href="#定义依赖项属性" class="headerlink" title="定义依赖项属性"></a>定义依赖项属性</h3><p>&emsp;&emsp;第一步是定义表示属性的对象，它是<code>DependencyProperty</code>类的实例。属性信息应该始终保持可用，甚至可能需要在多个类之间共享这些信息。因此，必须将<code>DependencyProperty</code>对象定义为与其相关联的类的静态字段。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FrameworkElement</span> : <span class="title">UIElement</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty MarginProperty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>根据约定，定义依赖属性项属性的字段的每次是在普通属性的末尾处加上单词“<code>Property</code>”。根据这种命名方式，可从实际属性的名称中区分出依赖项属性的定义。字段的定义使用了readonly关键字，这意味着只能在<code>FrameworkElement</code>类的静态构造函数中对其进行设置</p></div><h3 id="注册依赖项属性"><a href="#注册依赖项属性" class="headerlink" title="注册依赖项属性"></a>注册依赖项属性</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">FrameworkElement</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    FrameworkPropertyMetadata metadata = <span class="keyword">new</span> FrameworkPropertyMetadata(</span><br><span class="line">        defaultValue: <span class="keyword">new</span> Thickness(),</span><br><span class="line">        flags: FrameworkPropertyMetadataOptions.AffectsMeasure);</span><br><span class="line"></span><br><span class="line">    MarginProperty = DependencyProperty.Register(</span><br><span class="line">        name: <span class="string">&quot;Margin&quot;</span>,</span><br><span class="line">        propertyType: <span class="keyword">typeof</span>(Thickness),</span><br><span class="line">        ownerType: <span class="keyword">typeof</span>(FrameworkElement),</span><br><span class="line">        typeMetadata: metadata,</span><br><span class="line">        validateValueCallback: <span class="keyword">new</span> ValidateValueCallback(FrameworkElement.IsMarginValid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注册依赖项属性需要经历两个步骤。首先创建<code>FrameworkPropertyMetadata</code>对象，该对象指示希望通过依赖项属性使用什么服务（如支持数据绑定&#x2F;动画以及日志）。接下来通过调用<code>DependencyProperty.Register()</code>静态方法注册属性。在这一步骤中，需要提供以下几个要素：</p><ul><li>name: 属性名 </li><li>propertyType: 属性使用的数据类型</li><li>ownerType: 拥有该属性的类型</li><li>typeMetadata: 一个具有附加属性设置的<code>FrameworkPropertyMetadata</code>对象，该要素是可选的</li><li>validateValueCallback: 一个用于验证属性的回调函数，该要素是可选的</li></ul><center>FrameworkPropertyMetadata类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>AffectsArrange、AffectsMeasure、AffectsParentArrange和AffectsParentMeasure</td><td>如果为true，依赖项属性会影响在布局操作的测量过程和排列过程中如何放置相邻的元素或父元素。</td></tr><tr><td>AffectsRender</td><td>如果为true，依赖项属性会对属性的绘制方式造成一定的影响，要求重新绘制元素</td></tr><tr><td>BindsTwoWayByDefault</td><td>如果为true，默认情况下，依赖项属性将使用双向数据绑定而不是单向数据绑定，不过，但创建数据绑定时，可以明确指定所需的绑定行为</td></tr><tr><td>Inherits</td><td>如果为true，就通过元素树传播该依赖项属性值，并且可以被嵌套的元素继承</td></tr><tr><td>IsAnimationProhibited</td><td>如果为true，就不能将依赖项属性用于动画</td></tr><tr><td>IsNotDataBindable</td><td>如果为true，就不能使用绑定表达式设置依赖项属性</td></tr><tr><td>Journal</td><td>如果为true，在基于页面的应用程序中，依赖项属性将被保存到日志（浏览过的页面的历史纪录）中</td></tr><tr><td>SubPropertiesDoNotAffectRender</td><td>如果为true，并且对象的某个指数型（属性的属性）发生了变化，WPF将不会重新渲染该对象</td></tr><tr><td><code>DefaultUpdateSourceTrigger</code></td><td>但该属性用于绑定表达式时，该属性用于为Binding.UpdateSourceTrigger属性设置默认值。UpdateSourceTrigger属性决定了 数据绑定值在何时应用自身的变化。但创建绑定时，可以手动设置UpdateSourceTrigger属性</td></tr><tr><td><code>DefaultValue</code></td><td>该属性用于为依赖项属性设置默认值</td></tr><tr><td>CoerceValueCallback</td><td>该属性提供了一个回调函数，用于在验证依赖项属性之前尝试“纠正”属性值</td></tr><tr><td><code>PropertyChangedCallback</code></td><td>该属性提供了一个回调函数，当依赖项属性的值发生变化时调用该回调函数</td></tr></tbody></table><h3 id="添加属性包装器"><a href="#添加属性包装器" class="headerlink" title="添加属性包装器"></a>添加属性包装器</h3><p>&emsp;&emsp;创建依赖项属性的最后一个步骤是使用传统的.NET属性封装 WPF 依赖项属性。但典型的属性过程是检索或设置某个私有字段的值,而 WPF 属性的属性过程是使用在 DependencyObiec基类中定义的 GetValue()和 SetValue()方法，删除值使用ClearValue()方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Thickness Margin</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span> &#123;SetValue(MarginProperty,<span class="keyword">value</span>);&#125;</span><br><span class="line">    <span class="keyword">get</span> &#123;<span class="keyword">return</span> (Thickness)GetValue(MarginProperty);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>属性封装器不是验证数据或引发事件的正确位置。不过WPF的确提供了用于进行这些工作的地方——技巧是使用依赖项属性回调函数<code>DependencyProperty.ValidateValueCallback</code>回调函数进行验证操作；<code>FrameworkPropertyMetadata.PropertyChangedCallback</code>回调函数进行监听操作</p></div><h3 id="WPF使用依赖项属性的方式"><a href="#WPF使用依赖项属性的方式" class="headerlink" title="WPF使用依赖项属性的方式"></a>WPF使用依赖项属性的方式</h3><p>&emsp;&emsp;从依赖项属性检索值时，WPF需要考虑多个方面。依赖项属性因该行为得名--本质上，依赖项属性依赖于多个属性提供者,每个提供者都有各自的优先级。当从属性检索值时，WPF属性系统会通过一系列步骤获取最终值。首先通过考虑以下因素(按优先级从低到高的顺序排列)来决定基本值(base value):</p><ol><li>默认值（由FeameworkPropertyMetadata对象设置的值）</li><li>继承而来（假设设置FrameworkPropertyMetadata.Inherits标志，并为包含层次中的某个元素提供了值）</li><li>来自主题样式的值</li><li>来自项目样式的值</li><li>本地值（使用代码或XAML直接为对象设置的值）</li></ol><h3 id="共享的依赖项属性"><a href="#共享的依赖项属性" class="headerlink" title="共享的依赖项属性"></a>共享的依赖项属性</h3><p>&emsp;&emsp;尽管一些具有不同的继承层次，但它们会共享同一依赖属性，例如TextBlock.FontFamily属性和Control.FontFamily属性指向同一个静态的依赖项属性，该属性实际上是在 TextElemen类中定义的 TextElement.FontFamilyProperty 依赖项属性。TextElement 类的静态构造函数注册该属性,而TextBlock类和 Control类的静态构造函数只是通过调用DependencyProperty.AddOwner()方法重用该属性:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextBlock.FontFamilyProperty = </span><br><span class="line">    TextElement.FontFamilyProperty.AddOwner(<span class="keyword">typeof</span>(TextBlock));</span><br></pre></td></tr></table></figure><h3 id="附加的依赖项属性"><a href="#附加的依赖项属性" class="headerlink" title="附加的依赖项属性"></a>附加的依赖项属性</h3><p>&emsp;&emsp;附加属性时一种依赖项属性，由WPF属性系统管理。不同之处在于附加属性被引用到的类并非定义附加属性的那个类。例如，Grid类定义了Row和Column附加属性，这两个属性被用于设置Gird面板包含的元素，以指明这些元素应被放到哪个单元格中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FrameworkPropertyMetadata metadata = <span class="keyword">new</span> FrameworkPropertyMetadata(</span><br><span class="line">    <span class="number">0</span>, <span class="keyword">new</span> PropertyChangedCallback(Grid.OnCellAttachedPropertyChanged));</span><br><span class="line"></span><br><span class="line">Grid.RowProperty = DependencyProperty.RegisterAttached(<span class="string">&quot;Row&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>),</span><br><span class="line">    <span class="keyword">typeof</span>(Grid),metadata,<span class="keyword">new</span> ValidateValueCall(Grid.IsIntValueNotNegative));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当创建附加属性时，不必定义.NET 属性封装器。这是因为附加属性可以被用于任何依赖对象。例如，Grid.Row 属性可能被用于 Grid 对象(如果在 Grid 控件中嵌套了另一个 Grid 控件),也可能被用于其他元素。实际上，Grid.Row属性甚至可以被用于并不位于 Grid 控件中的元素甚至在元素树中根本就不存在 Grid 对象。</p><p>&emsp;&emsp;不是使用.NET属性封装器，反而附加属性需要调用两个静态方法来设置和获取属性值，这两个方法使用为人熟知的 SetValue()和 GetValue()方法(继承自 DependencyObiect 类)。这两个静态方法应当命名为SetPropertyName()和GetPropertyName()</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetRow</span>(<span class="params">UIElement element</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(element == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>)element.GetValue(Grid.RowProperty);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetRow</span>(<span class="params">UIElement element, <span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(element == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(...);</span><br><span class="line">    &#125;</span><br><span class="line">    element.SetValue(Grid.RowProperty,<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性验证"><a href="#属性验证" class="headerlink" title="属性验证"></a>属性验证</h2><p>&emsp;&emsp;在定义任何类型的属性时，都需要面对错误设置属性的可能性。对于传统的.NET属性，可尝试在属性设置器中捕获这类问题。但对于依赖项属性而言，这种方法不合适，因为可能通过WPF属性系统使用SetValue()方法直接设置属性。</p><p>&emsp;&emsp;作为代替，WPF 提供了两种方法来阻止非法值:</p><ul><li>ValidateVaalueCallback: 该回调函数可接受或拒绝新值。通常，该回调函数用于驳货违反了属性约束的明显错误。可作为DependencyProperty.Register()方法的一个参数提供该回调函数</li><li>CoerceValueCallback: 该回调函数可将新值修改为更能被接受的值。该回调函数通常用于处理为相同对象设置的依赖项属性值相互冲突的问题。这些值本身可能时合法的，但当同时应用时它们时不相容的。为了使用这个回调函数，但创建FrameworkPropetyMetadata对象时（然后对该对象将被传递到DependencyProperty.Register()方法），作为构造函数的一个参数提供回调函数</li></ul><p>&emsp;&emsp;下面是当应用程序试图设置依赖项属性时，所有这些内容的作用过程:</p><ol><li>首先，CoerceValueCallback方法有机会修改提供的值(通常，使提供的值和其他属性相容)，或者返回 DependencyProperty.UnsetValue，这会完全拒绝修改。</li><li>接下来激活 ValidateValueCallback方法。该方法返回 true 以接受一个值作为合法值，或者返回 false 拒绝值。与 CoerceValueCallback 方法不同，ValidateValueCallback 方法不能访问设置属性的实际对象，这意味着您不能检查其他属性值。</li><li>最后，如果前两个阶段都获得成功，就会触发 PropertyChangedCallback 方法。此时如果希望为其他类提供通知，可以引发更改事件。</li></ol><h3 id="验证回调"><a href="#验证回调" class="headerlink" title="验证回调"></a>验证回调</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MarginProperty = DependencyProperty.Register(</span><br><span class="line">        name: <span class="string">&quot;Margin&quot;</span>,</span><br><span class="line">        propertyType: <span class="keyword">typeof</span>(Thickness),</span><br><span class="line">        ownerType: <span class="keyword">typeof</span>(FrameworkElement),</span><br><span class="line">        typeMetadata: metadata,</span><br><span class="line">        validateValueCallback: <span class="keyword">new</span> ValidateValueCallback(FrameworkElement.IsMarginValid));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可使用这个回调函数加强验证，验证通常应被添加到属性过程的设置部分。提供的回调函数必须指向一个接受对象参数并返回 Boolean 值的方法。返回 true 以接受对象是合法的，返回false 拒绝对象。</p><h3 id="强制回调"><a href="#强制回调" class="headerlink" title="强制回调"></a>强制回调</h3><p>&emsp;&emsp;通过 FrameworkPropertyMetadata对象使用 CoerceValueCallback 回调函数。下面是示例:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">RangeBase</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    FrameworkPropertyMetadata metadata = <span class="keyword">new</span> FrameworkPropertyMetadata();</span><br><span class="line">    metadata.CoerceValueCallback = <span class="keyword">new</span> CoerceValueCallback(CoerceMaximum);</span><br><span class="line"></span><br><span class="line">    DependencyProperty.Register(<span class="string">&quot;Maximum&quot;</span>,<span class="keyword">typeof</span>(<span class="built_in">double</span>),</span><br><span class="line">        <span class="keyword">typeof</span>(RangeBase),metadata);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">CoerceMaximum</span>(<span class="params">DependencyObject d, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">RangeBase <span class="title">base1</span> (<span class="params">RangeBase</span>)d</span>;</span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">double</span>)<span class="keyword">value</span> &lt; base1.Minimum) <span class="comment">// 最大值不能小于最小值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> base1.Minimum; <span class="comment">// 强制回调可以自定义一个更合理的值返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;依赖项属性&quot;&gt;&lt;a href=&quot;#依赖项属性&quot; class=&quot;headerlink&quot; title=&quot;依赖项属性&quot;&gt;&lt;/a&gt;依赖项属性&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;依赖项属性是标准.NET属性的全新实现--具有大量新增价值。在 WPF的核心特性(如动画、数</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 03布局</title>
    <link href="http://bootree.cn/2024/05/24/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/03%E5%B8%83%E5%B1%80/"/>
    <id>http://bootree.cn/2024/05/24/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/03%E5%B8%83%E5%B1%80/</id>
    <published>2024-05-24T13:41:34.000Z</published>
    <updated>2024-05-27T12:01:17.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WPF布局"><a href="#WPF布局" class="headerlink" title="WPF布局"></a>WPF布局</h2><div class="note warning flat"><p>在WPF中非常抵制基于坐标的布局，而是注重创造更灵活的布局，使布局能够适应内容的变化、不同的语言以及各种窗口尺寸。</p></div><h3 id="布局原则"><a href="#布局原则" class="headerlink" title="布局原则"></a>布局原则</h3><ul><li><strong>不应显式设定元素（如控件）的尺寸</strong>。元素应当可以改变尺寸以适合它们的内容。可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围</li><li><strong>不应使用屏幕坐标指定元素的位置</strong>。元素应当由它们的容器根据它们的尺寸&#x2F;顺序以及（可选的）其他特定于具体布局容器的信息进行排列。如果需要在元素之间添加空白空间。可使用Margin</li><li><strong>布局容器的子元素“共享”可用的空间</strong>。如果空间允许，布局容器会根据每个元素的内容尽可能为元素设置更合理的尺寸。它们还会向一个或多个元素分配多余的空间</li><li><strong>可嵌套的布局容器</strong>。布局容器之间可以进行嵌套组合</li></ul><h3 id="布局过程"><a href="#布局过程" class="headerlink" title="布局过程"></a>布局过程</h3><p>&emsp;&emsp;WPF 布局包括两个阶段:测量(<code>measure</code>)阶段和排列(<code>arrange</code>)阶段。在测量阶段，容器遍历所有子元素，并询问子元素它们所期望的尺寸。在排列阶段，容器在合适的位置放置子元素。</p><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><p>&emsp;&emsp;所有WPF布局容器都是派生自<code>System.Windows.Controls.Panel</code>抽象类的面板。</p><center>Panel类的层次结构</center><img width="50%" src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240524203933.png"/><div class="note info flat"><p>Panel类还包含几个内部属性，如果希望创建自己的容器，就可以使用它们。最特别的是，可重写继承自FrameworkElement类的 MeasureOverride()和ArangeOverride()方法，以修改当组织子元素时面板处理测量阶段和排列阶段的方式。</p></div><center>核心布局面板</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>StackPanel</td><td>在水平或垂直的堆栈中放置元素。这个布局容器通常用于更大&#x2F;更复杂窗口中的一些小区域</td></tr><tr><td>WrapPanl</td><td>在一些列可换行的行中放置元素</td></tr><tr><td>DockPanel</td><td>根据容器的整个边界调整元素</td></tr><tr><td>Grid</td><td>根据不可见的表格在行和列中排列元素，这是最灵活、最常见的容器之一</td></tr><tr><td>UniformGrid</td><td>在不可见但是强制所有单元格具有相同尺寸的表中放置元素，整个布局容器不常用</td></tr><tr><td>Canvas</td><td>使用固定坐标绝对定位元素</td></tr></tbody></table><h4 id="StackPanel"><a href="#StackPanel" class="headerlink" title="StackPanel"></a>StackPanel</h4><center>布局属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>HorizontalAlignment</td><td>当水平方向上有额外的空间时，该属性决定了子元素在布局容器中如何定位。可选用 Center、Left、Right或 Stretch 等属性值</td></tr><tr><td>VerticalAlignment</td><td>当垂直方向上有额外的空间时，该属性决定了子元素在布局容器控件中如何定位。可选用 Center、Top、Bottom或Stretch 等属性值</td></tr><tr><td>Margin</td><td>该属性用于在元索的周围添加一定的空间</td></tr><tr><td>MinWidth和MinHeight</td><td>最小尺寸</td></tr><tr><td>MaxWidth和MaxHeight</td><td>最大尺寸</td></tr><tr><td>Width和Height</td><td>显示地设置元素的尺寸</td></tr></tbody></table><h4 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h4><p>&emsp;&emsp;Border控件不是布局面板，而是非常便于使用的元素，经常与布局面板一起使用。</p><center>Border类的属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Background</td><td>使用Brush对象设置边框中所有内容后面的背景</td></tr><tr><td>BorderBrush和BorderThickness</td><td>使用Brush对象设置位于Border对象边缘的边框的颜色，并设置边框的宽度</td></tr><tr><td>CornerRadius</td><td>该属性可使边框具有精致的圆角。CornerRadius的值越大，圆角效果就越明显</td></tr><tr><td>Padding</td><td>该属性在边框和内部的内容之间添加空间（与此相对，Margin属性在边框之外添加空间）</td></tr></tbody></table><h4 id="WrapPanel"><a href="#WrapPanel" class="headerlink" title="WrapPanel"></a>WrapPanel</h4><p>&emsp;&emsp;WrapPanel 面板在可能的空间中，以一次一行或一列的方式布置控件。默认情况下WrapPanel.Orientation 属性设置为 Horizontal;控件从左向右进行排列，再在下一行中排列。但可将 WrapPanel.Orientation 属性设置为 Vertical，从而在多个列中放置元素。</p><div class="note info flat"><p>与StackPanel面板类似，WrapPanel面板实际上主要用来控制用户界面中一小部分的布局细节，并非用于控制整个窗口布局</p></div><h4 id="DockPanel"><a href="#DockPanel" class="headerlink" title="DockPanel"></a>DockPanel</h4><p>&emsp;&emsp;DockPanel面板沿着一条外边缘来拉伸所包含的控件，通过锚点停靠的方式设置子元素的位置</p><center>DockPanel常见属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>DockPanel.Dock</td><td>子元素的附加属性，设置子元素在DockPanel的停靠位置</td></tr><tr><td>LastChildFill</td><td>设置DockPanel中最后一个元素是否填充DockPanel剩余控件（默认为true）</td></tr></tbody></table><h4 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h4><p>&emsp;&emsp;Grid面板将元素分隔到不可见的行列网格中。尽管可在一个单元格中放置多个元素（这时这些元素会相互重叠），但在每个单元格中只放置一个元素通常更合理</p><center>Grid常见属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>RowDefinitions和ColumnDefinitions</td><td>定义Grid中的行列集合，行列需要在此集合内声明</td></tr><tr><td>RowDefinition和ColumnDefinition</td><td>用于定义一行或一列</td></tr><tr><td>Grid.Row和Grid.Column</td><td>子元素的附加属性，设置子元素在Grid中的行列位置（索引从0开始）</td></tr><tr><td>Grid.RowSpan和Grid.ColumnSpan</td><td>子元素的附加属性，可设置子元素跨行或跨列</td></tr><tr><td>ShowGridLines</td><td>用于显示Grid网格中的行列线（默认false）</td></tr><tr><td>GridSplitter</td><td>Grid分割线，可用于分割窗口</td></tr><tr><td>Grid.IsSharedSizeScope</td><td>用于共享尺寸组</td></tr></tbody></table><h5 id="调整行和列"><a href="#调整行和列" class="headerlink" title="调整行和列"></a>调整行和列</h5><p>Grid面板支持以下三种设置尺寸的方式：</p><ul><li><p><strong>绝对设置尺寸方式</strong>。使用设备无关单位准确地设置尺寸</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置行高为100 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>自动设置尺寸方式</strong>。每行或每列的尺寸刚好满足需要</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置行高自适应高度，由内容撑开 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>按比例设置尺寸方式</strong>。按比例将控件分割到一组行和列中</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按比例划分Grid剩下空间，第二行是第一行的2倍高度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;2*&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h5><p>&emsp;&emsp;每个 Windows用户都见过分割条--能将窗口的一部分与另一部分分离的可拖动分割器例如，当使用 Windows 资源管理器时，会看到一系列文件夹(在左边)和一系列文件(在右边)。可拖动它们之间的分割条来确定每部分占据窗口的比例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--左侧菜单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--分割线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GridSplitter</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;3&quot;</span> <span class="attr">ShowsPreview</span>=<span class="string">&quot;True&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Stretch&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Stretch&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--右侧内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="共享尺寸组"><a href="#共享尺寸组" class="headerlink" title="共享尺寸组"></a>共享尺寸组</h5><p>&emsp;&emsp;共享尺寸组的目标是保持用户界面独立部分的一致性。例如，可能希望改变一列的尺寸以适应其内容，并改变另一列的尺寸使其与前面一列改变后的尺寸相匹配。然而，共享尺寸组的真正优点是使独立的 Grid 控件具有相同的比例。</p><ul><li><p>默认情况，尽管每一列都设置了Auto，但是在同一列中都是以最长的一列作为当前列的宽度，不会影响其他列</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;One&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Two&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Three (Which is Longer)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Four&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img style="border:1px solid black;" src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240525163705.png"/></li><li><p>共享尺寸组，开启<code>Grid.IsSharedSizeScope=&quot;True&quot;</code>共享尺寸组，为需要共享尺寸的列设置相同的组<code>SharedSizeGroup=&quot;Group1&quot;</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Grid.IsSharedSizeScope</span>=<span class="string">&quot;True&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">SharedSizeGroup</span>=<span class="string">&quot;Group1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">SharedSizeGroup</span>=<span class="string">&quot;Group1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;One&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Two&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Three (Which is Longer)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;Four&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img style="border:1px solid black;" src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240525163823.png"/></li></ul><h4 id="UniformGrid"><a href="#UniformGrid" class="headerlink" title="UniformGrid"></a>UniformGrid</h4><p>&emsp;&emsp;有一种网格不遵循前面讨论的所有原则--UniformGrid 面板。与 Grid 面板不同，UniformGrid 面板不需要(甚至不支持)预先定义的列和行。相反，通过简单地设置 Rows 和Columns属性来设置其尺寸。每个单元格始终具有相同的大小，因为可用的空间被均分。最后元素根据定义的顺序被放置到适当的单元格中。UniformGrid面板中没有 Row 和 Column 附加属性，也没有空白单元格。</p><center>UniformGrid常用属性</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Rows</td><td>设置面板的行数</td></tr><tr><td>Columns</td><td>设置面板的列数</td></tr></tbody></table><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>&emsp;&emsp;Canvas面板允许使用精确的坐标放置元素，如果设计数据驱动的富窗体和标准对话框，这并非好的选择；但如果需要构建其他一些不同的内容（例如，为图形工具创建绘图表面），Canvas面板可能是个有用的工具。Canvas面板还是最轻量级的布局容器。这是因为Canvas面板没有包含任何复杂的布局逻辑，用以改变其子元素的首选尺寸。Canvas面板只是在值定的位置放置其子元素，并且子元素具有所希望的精确尺寸。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Canvas.Left</td><td>子元素附加属性，用于设置子元素相对于Canvas左侧的坐标</td></tr><tr><td>Canvas.Right</td><td>子元素附加属性，用于设置子元素相对于Canvas右侧的坐标</td></tr><tr><td>Canvas.Top</td><td>子元素附加属性，用于设置子元素相对于Canvas上边的坐标</td></tr><tr><td>Canvas.Bottom</td><td>子元素附加属性，用于设置子元素相对于Canvas下边的坐标</td></tr><tr><td>Canvas.ZIndex</td><td>子元素附加属性，用于设置子元素层叠关系，值越大越靠上</td></tr></tbody></table><h4 id="InkCanvas"><a href="#InkCanvas" class="headerlink" title="InkCanvas"></a>InkCanvas</h4><p>&emsp;&emsp;InkCanvas 元素的主要目的是用于接收手写笔输入。手写笔是一种在平板 PC中使用的类似于钢笔的输入设备，然而，InkCanvas 元素同时也可使用鼠标进行工作，就像使用手写笔一样。因此，用户可使用鼠标在 InkCanvas 元素上绘制线条，或者选择以及操作 InkCanvas 中的元素。</p><p>&emsp;&emsp;InkCanyas 元素实际上包含两个子内容集合。一个是为人熟知的 Children 集合，它保存任意元素，就像 Canvas 面板一样。每个子元素可根据 Top、Left、Bottom 和 Right 属性进行定位。另一个是 Strokes 集合，它保存 System.Windows.Ink.Stroke 对象，该对象表示用户在 InkCanvas元素上绘制的图形输入。用户绘制的每条直线或曲线都变成独立的 Stroke对象。得益于这两个集合,可使用 InkCanvas 让用户使用存储在 Strokes集合中的笔画(stroke)为保存在 Children 集合中的内容添加注释。</p><p>&emsp;&emsp;根据为InkCanvas.EditingMode属性设置的值，可以采用截然不同的方式使用InkCanvas元素</p><center>InkCanvasEditingMode枚举值</center><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Ink</td><td>InkCanvas元素允许用户绘制批注，这是默认模式。但用户用鼠标或手写笔绘图时，会绘制笔画</td></tr><tr><td>GestureOnly</td><td>InkCanvas元素不允许用户绘制笔画标注，党费关注预先定义的特定姿势（例如在某个方向拖动手写笔或涂画内容）</td></tr><tr><td>InkAndGesture</td><td>InkCanvas元素允许用户绘制笔画批注，也可以识别预先定义的姿势</td></tr><tr><td>EraseByStroke</td><td>当单击笔画时，InkCanvas元素会擦除笔画</td></tr><tr><td>EraseByPoint</td><td>但单击笔画时，InkCanvas元素会擦除笔画中被单击的部分（笔画上的一个点）</td></tr><tr><td>Select</td><td>InkCanvas面板允许用户选择保存在Children集合中的元素。要选择一个元素，用户必须单击该元素或拖动“索套”选择该元素。一旦选择一个元素，就可以移动该元素、改变其尺寸或将其删除</td></tr><tr><td>None</td><td>InkCanvas元素忽略鼠标和手写笔输入</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WPF布局&quot;&gt;&lt;a href=&quot;#WPF布局&quot; class=&quot;headerlink&quot; title=&quot;WPF布局&quot;&gt;&lt;/a&gt;WPF布局&lt;/h2&gt;&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;在WPF中非常抵制基于坐标的布局，而是注重创造更灵活的</summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 02XAML</title>
    <link href="http://bootree.cn/2024/05/23/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/02XAML/"/>
    <id>http://bootree.cn/2024/05/23/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/02XAML/</id>
    <published>2024-05-23T12:12:51.000Z</published>
    <updated>2024-05-27T11:57:36.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XAML"><a href="#XAML" class="headerlink" title="XAML"></a>XAML</h2><div class="note warning flat"><p>XAML对于WPF不是必需的，理解这一点很重要。Visual Studio当然可以使用Windows窗体方法，通过语句代码来构造WPF窗口。但如果这样的话，窗口将被限制在Visual Studio开发环境之内，只能由编程人员使用。</p></div><h3 id="XAML名称空间"><a href="#XAML名称空间" class="headerlink" title="XAML名称空间"></a>XAML名称空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">xmlns:&quot;x=http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;xmlns特性是XML中的一个特殊特性，他专门用来声明名称空间。这段标记声明了两个名称空间，在创建的所有WPF XAML<br>文档中都会使用这两个名称控件</p><ul><li><code>http://schemas.microsoft.com/winfx/2006/xaml/presentation</code>是WPF核心名称空间。它包含了所有WPF类，包括用来构建用户界面的控件。在该例中，该名称空间的声明没有使用名称空间前缀，所以它成为整个文档的默认名称空间。换句话说，除非另行指明，每个元素自动位于这个名称空间</li><li><code>http://schemas.microsoft.com/winfx/2006/xam1</code> 是XAML 名称空间。它包含各种 XAML实用特性，这些特性可影响文档的解释方式。该名称空间被映射为前缀x。这意味着可通过在元素名称之前放置名称空间前缀x来使用该名称空间(例如&lt;x:ElementName&gt;)。</li></ul><h3 id="简单属性"><a href="#简单属性" class="headerlink" title="简单属性"></a>简单属性</h3><p>&emsp;&emsp;可直接进行简单的赋值操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Stretch&quot;</span> <span class="attr">FontFamily</span>=<span class="string">&quot;Verdana&quot;</span> <span class="attr">FontSize</span>=<span class="string">&quot;24&quot;</span> <span class="attr">Foreground</span>=<span class="string">&quot;Green&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h3><h4 id="简单转换器"><a href="#简单转换器" class="headerlink" title="简单转换器"></a>简单转换器</h4><ol><li><p>定义转换器</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Visibility类型到bool类型的转换器</span></span><br><span class="line">[<span class="meta">ValueConversion(typeof(Visibility), typeof(bool))</span>] </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VisibilityToBoolConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义静态属性(可选)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> VisibilityToBoolConverter Instance = <span class="keyword">new</span> VisibilityToBoolConverter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Convert</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, Type targetType, <span class="built_in">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> <span class="keyword">is</span> Visibility visibility)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> visibility == Visibility.Visible ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, Type targetType, <span class="built_in">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> <span class="keyword">is</span> <span class="built_in">bool</span> visibility &amp;&amp; visibility)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Visibility.Visible;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Visibility.Collapsed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用转换器</p><ul><li>静态资源引用 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:converters</span>=<span class="string">&quot;clr-namespace:MyApplication.Converters&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.Resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">converters:VisibilityToBoolConverter</span> <span class="attr">x:Key</span>=<span class="string">&quot;VisibilityToBoolConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.Resource</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckBox</span> <span class="attr">IsChecked</span>=<span class="string">&quot;&#123;Binding MyFlag,Converter=&#123;StaticResource VisibilityToBoolConverter&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>静态属性绑定 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:converters</span>=<span class="string">&quot;clr-namespace:MyApplication.Converters&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无需声明声明资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">CheckBox</span> <span class="attr">IsChecked</span>=<span class="string">&quot;&#123;Binding MyFlag,Converter=&#123;x:Static converters:VisibilityToBoolConverter.Instance&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="多值转换器"><a href="#多值转换器" class="headerlink" title="多值转换器"></a>多值转换器</h4><ol><li><p>定义转换器</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FullNameConverter</span> : <span class="title">IMultiValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FullNameConverter Instance = <span class="keyword">new</span> FullNameConverter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Convert</span>(<span class="params"><span class="built_in">object</span>[] values, Type targetType, <span class="built_in">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Join(<span class="string">&quot;&quot;</span>, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span>[] <span class="title">ConvertBack</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, Type[] targetTypes, <span class="built_in">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用转换器</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;WpfApp.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:converters</span>=<span class="string">&quot;clr-namespace:WpfApp.Converters&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;firstName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;secondName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock.Text</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- MultiBinding只能绑定常量，因此对于变量可以先赋值给一些控件上，然后通过Element+Path绑定 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">MultiBinding</span> <span class="attr">Converter</span>=<span class="string">&quot;&#123;x:Static converters:FullNameConverter.Instance&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Binding</span> <span class="attr">ElementName</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">Path</span>=<span class="string">&quot;Text&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Binding</span> <span class="attr">ElementName</span>=<span class="string">&quot;secondName&quot;</span> <span class="attr">Path</span>=<span class="string">&quot;Text&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">MultiBinding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">TextBlock.Text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="复杂属性"><a href="#复杂属性" class="headerlink" title="复杂属性"></a>复杂属性</h3><p>&emsp;&emsp;虽然类型转换器便于使用，但他们不能解决所有的实际问题。例如，有些属性是完备的对象，这些对象具有自己的一组属性。幸运的是，XAML提供了另一种选择：属性元素语法（property-element syntax）。使用属性元素语法，可添加名称形式为Parent.PropertyName的子元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearGradientBrush</span> <span class="attr">StartPoint</span>=<span class="string">&quot;0 0&quot;</span> <span class="attr">EndPoint</span>=<span class="string">&quot;1 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Red&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Yellow&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GradientStop</span> <span class="attr">Color</span>=<span class="string">&quot;Blue&quot;</span> <span class="attr">Offset</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearGradientBrush</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid.Background</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标记扩展"><a href="#标记扩展" class="headerlink" title="标记扩展"></a>标记扩展</h3><p>&emsp;&emsp;标记扩展可用于嵌套标签或XML特性中（用于XML特性的情况更常见）。标记扩展使用{标记扩展类 参数}语法。</p><pre><code>定义枚举扩展，以Extension结尾在使用时可省略后缀</code></pre><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumExtension</span> : <span class="title">MarkupExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Type _type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumExtension</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span> || !type.IsEnum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;Enum type is required.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        _type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ProvideValue</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;KeyValuePair&lt;<span class="built_in">string</span>, Enum&gt;&gt;();</span><br><span class="line">        <span class="keyword">var</span> values = _type.GetEnumValues().Cast&lt;Enum&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">value</span> <span class="keyword">in</span> values)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> field = _type.GetField(<span class="keyword">value</span>.ToString());</span><br><span class="line">            <span class="keyword">var</span> attributes = field?.GetCustomAttributes(<span class="keyword">typeof</span>(DescriptionAttribute), inherit: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> desc = attributes?.Length &gt; <span class="number">0</span> ? ((DescriptionAttribute)attributes[<span class="number">0</span>]).Description : <span class="keyword">value</span>.ToString();</span><br><span class="line">            result.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, Enum&gt;(desc, <span class="keyword">value</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>使用自定义枚举扩展，返回枚举类型的所有Description</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:extensions</span>=<span class="string">&quot;clr-namespace:WpfApp.Extensions&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:constants</span>=<span class="string">&quot;clr-namespace:WpfApp.Constants&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">Width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;35&quot;</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;extensions:Enum constants:WeekType&#125;&quot;</span> <span class="attr">DisplayMemberPath</span>=<span class="string">&quot;Key&quot;</span> <span class="attr">SelectedValuePath</span>=<span class="string">&quot;Value&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="附加属性"><a href="#附加属性" class="headerlink" title="附加属性"></a>附加属性</h3><p>&emsp;&emsp;附加属性是可用于多个控件但在另一个类中定义的属性。在WPF中，附加属性常用于控件布局。附加属性始终使用包含两个部分的命名形式：定义类型、属性名。这种包含两个部分的命名语法使XAML解析器能够区分开普通属性和附加属性</p><pre><code>通过附加属性绑定Password（由于安全考虑Password属性不是依赖属性，因此不能直接绑定）</code></pre><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PasswordBoxHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Attach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">GetAttach</span>(<span class="params">DependencyObject obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">bool</span>)obj.GetValue(AttachProperty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetAttach</span>(<span class="params">DependencyObject obj, <span class="built_in">bool</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.SetValue(AttachProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 指示是否启用密码绑定功能</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty AttachProperty =</span><br><span class="line">        DependencyProperty.RegisterAttached(<span class="string">&quot;Attach&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">bool</span>), <span class="keyword">typeof</span>(PasswordBoxHelper), <span class="keyword">new</span> PropertyMetadata(<span class="literal">false</span>, OnAttachChanged));</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Password</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetPassword</span>(<span class="params">DependencyObject obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">string</span>)obj.GetValue(PasswordProperty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetPassword</span>(<span class="params">DependencyObject obj, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.SetValue(PasswordProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 密码</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty PasswordProperty =</span><br><span class="line">        DependencyProperty.RegisterAttached(<span class="string">&quot;Password&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="keyword">typeof</span>(PasswordBoxHelper), <span class="keyword">new</span> PropertyMetadata(<span class="built_in">string</span>.Empty, OnPasswordChanged));</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> IsUpdating</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">GetIsUpdating</span>(<span class="params">DependencyObject obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">bool</span>)obj.GetValue(IsUpdatingProperty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetIsUpdating</span>(<span class="params">DependencyObject obj, <span class="built_in">bool</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.SetValue(IsUpdatingProperty, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是由静态依赖属性“IsUpdating”，用于跟踪PasswordBox密码更新状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty IsUpdatingProperty =</span><br><span class="line">        DependencyProperty.RegisterAttached(<span class="string">&quot;IsUpdating&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">bool</span>), <span class="keyword">typeof</span>(PasswordBoxHelper), <span class="keyword">new</span> PropertyMetadata(<span class="literal">false</span>));</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnAttachChanged</span>(<span class="params">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (d <span class="keyword">is</span> PasswordBox passwordBox)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">bool</span>)e.OldValue)</span><br><span class="line">            &#123;</span><br><span class="line">                passwordBox.PasswordChanged -= PasswordBox_PasswordChanged;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">bool</span>)e.NewValue)</span><br><span class="line">            &#123;</span><br><span class="line">                passwordBox.PasswordChanged += PasswordBox_PasswordChanged;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnPasswordChanged</span>(<span class="params">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (d <span class="keyword">is</span> PasswordBox passwordBox)</span><br><span class="line">        &#123;</span><br><span class="line">            passwordBox.PasswordChanged -= PasswordBox_PasswordChanged;</span><br><span class="line">            <span class="comment">// 防止在更新过程中引发无限循环</span></span><br><span class="line">            <span class="keyword">if</span> (!GetIsUpdating(passwordBox))</span><br><span class="line">            &#123;</span><br><span class="line">                passwordBox.Password = (<span class="built_in">string</span>)e.NewValue;</span><br><span class="line">            &#125;</span><br><span class="line">            passwordBox.PasswordChanged += PasswordBox_PasswordChanged;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PasswordBox_PasswordChanged</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sender <span class="keyword">is</span> PasswordBox passwordBox)</span><br><span class="line">        &#123;</span><br><span class="line">            SetIsUpdating(passwordBox, <span class="literal">true</span>);</span><br><span class="line">            SetPassword(passwordBox, passwordBox.Password);</span><br><span class="line">            SetIsUpdating(passwordBox, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>登录表单绑定Password</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:extensions</span>=<span class="string">&quot;clr-namespace:WpfApp.Extensions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Window.DataContext</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">local:MainWindowViewModel</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Window.DataContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;用户名：&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding UserName&#125;&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WrapPanel</span> <span class="attr">Margin</span>=<span class="string">&quot;0 10 0 0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;密码：&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">PasswordBox</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">extensions:PasswordBoxHelper.Attach</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">extensions:PasswordBoxHelper.Password</span>=<span class="string">&quot;&#123;Binding Password,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">Width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WrapPanel</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;0 10 0 0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">&quot;&#123;Binding LoginCommand&#125;&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">WrapPanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="特殊字符与空白"><a href="#特殊字符与空白" class="headerlink" title="特殊字符与空白"></a>特殊字符与空白</h3><p>&emsp;&emsp;XAML受到XML规则限制部分字符无法直接显示</p><table><thead><tr><th>特殊字符</th><th>字符实体</th></tr></thead><tbody><tr><td><center>小于号(&lt;)</center></td><td><center><code>&amp;lt;</code></center></td></tr><tr><td><center>大于号(&gt;)</center></td><td><center><code>&amp;gt;</code></center></td></tr><tr><td><center>&amp;符号(&amp;)</center></td><td><center><code>&amp;amp;</code></center></td></tr><tr><td><center>引号(&quot;)</center></td><td><center><code>&amp;quot;</code></center></td></tr></tbody></table><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 时间格式化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding CreateTime,StringFormat=&#123;&#125;&#123;0:yyyy/MM/dd HH:mm:ss&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 小数格式化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Money,StringFormat=&#123;&#125;&#123;0:F2&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 货币格式(前面加上$) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Money,StringFormat=&#123;&#125;&#123;0:C2&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数字格式，使用千位分隔符，保留2位小数。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;Binding Money,StringFormat=&#123;&#125;&#123;0:N2&#125;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;XAML&quot;&gt;&lt;a href=&quot;#XAML&quot; class=&quot;headerlink&quot; title=&quot;XAML&quot;&gt;&lt;/a&gt;XAML&lt;/h2&gt;&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;XAML对于WPF不是必需的，理解这一点很重要。Visual </summary>
      
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>WPF从入门到入坟 - 01概述</title>
    <link href="http://bootree.cn/2024/05/22/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/01%E6%A6%82%E8%BF%B0/"/>
    <id>http://bootree.cn/2024/05/22/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/01%E6%A6%82%E8%BF%B0/</id>
    <published>2024-05-22T12:14:28.000Z</published>
    <updated>2024-05-25T09:04:46.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WPF概述"><a href="#WPF概述" class="headerlink" title="WPF概述"></a>WPF概述</h2><p>&emsp;&emsp;WPF(<code>Windows Presentation Foundation</code>)是用于 Windows 的现代图形显示系统。与之前出现的其他技术相比，WPF发生了根本性变化，引入了“内置硬件加速”和“分辨率无关”等创新功能;本章将介绍这两项功能。    </p><h3 id="WPF应用特点"><a href="#WPF应用特点" class="headerlink" title="WPF应用特点"></a>WPF应用特点</h3><ul><li><strong>硬件加速</strong> 。通过DirectX执行所有WPF绘图操作，以便充分利用现代显卡的最新功能</li><li><strong>分辨率无关</strong>。WPF能够根据系统DPI设置，很长灵活地方大和缩小显示的内容，以使其适合所用的显示器和显示选择</li><li><strong>控件无固定外观</strong>。可自由定制外观</li><li><strong>声明式用户界面</strong>。通过XAML不必编写代码即可创建窗口</li><li><strong>基于对象的绘图</strong>。即使准备在更低级的可视化层(而非高级元素层)上工作，也不需要使用绘图和像素进行工作，而是创建图形对象并让 WPF 尽可能最优化地显示出来。</li></ul><h3 id="WPF体系结构"><a href="#WPF体系结构" class="headerlink" title="WPF体系结构"></a>WPF体系结构</h3><p>&emsp;&emsp;WPF 使用多层体系结构。在顶层，应用程序与完全由托管C#代码编写的一组高层服务进行交瓦。至于将.NET 对象转换为Direct3D纹理和三角形的实际工作，是在后台由一个名为milcore.dll 的低级非托管组件完成的。milcore.dll 是使用非托管代码实现的，因为它需要和Direct3D紧密集成，并且它对性能极其敏感。</p><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><center>WPF 应用程序中各层的工作情况</center><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240522220928.png" alt="WPF体系结构"></p><ul><li><code>PresentationFramework.dll</code> 包含 WPF 顶层的类型，包括那些表示窗口、面板以及其他类型控件的类型。它还实现了高层编程抽象，如样式。开发人员直接使用的大部分类都来自这个程序集。</li><li><code>PresentationCore.dll</code> 包含了基础类型，如 UIElement 类和 Visual类，所有形状类和控件类都继承自这两个类。如果不需要窗口和控件抽象层的全部特征，可使用这一层，而且仍能利用 WPF 的渲染引擎。</li><li><code>WindowsBase.dll</code> 包含了更多基本要素，这些要素具有在WPF之外重用的潜能，如DispatcherObiect 类和 DependencyObiect类,这两个类引入了依赖项属性。</li><li><code>milcore.dll</code> 是 WPF 渲染系统的核心，也是媒体集成层(MediaIntegration Layer，MIL)的基础。其合成引擎将可视化元素转换为Direct3D所期望的三角形和纹理。尽管将milcore.dll 视为 WPF 的一部分，但它也是 Windows Vista和 Windows7的核心系统组件之一。实际上，桌面窗口管理器(Desktop Window Manager，DWM)使用 milcore.dll渲染桌面。</li><li><code>WindowsCodecs.dll</code> 是一套提供图像支持的低级 API(例如处理、显示以及缩放位图和JPEG 图像)。</li><li><code>Direct3D</code> 是一套低级 API，WPF 应用程序中的所有图形都由它进行渲染。</li><li><code>User32</code> 用于决定哪些程序实际占有桌面的哪一部分。所以它仍被包含在 WPF 中，但不再负责渲染通用控件。</li></ul><h4 id="类层次关系"><a href="#类层次关系" class="headerlink" title="类层次关系"></a>类层次关系</h4><center>类层次关系</center><p><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240522225239.png" alt="类层次关系"></p><h5 id="DispatcherObject"><a href="#DispatcherObject" class="headerlink" title="DispatcherObject"></a>DispatcherObject</h5><p>&emsp;&emsp;WPF 应用程序使用为人熟知的单线程亲和(Single-Thread Afnity，STA)模型，这意味着整个用户界面由单个线程拥有。从另一个线程与用户界面元素进行交互是不安全的。为方便使用此模型，每个 WPF 应用程序由协调消息(键盘输入、鼠标移动乃至框架处理，如布局)的调度程序管理。通过继承自 DispatcherObiect类,用户界面中的每个元素都可以检査代码是否在正确的线程上运行，并能通过访问调度程序为用户界面线程封送代码。</p><h5 id="DependencyObject"><a href="#DependencyObject" class="headerlink" title="DependencyObject"></a>DependencyObject</h5><p>&emsp;&emsp;在 WPF 中，主要通过属性与屏幕上的元素进行交互。在早期设计阶段，WPF的设计者决定创建一个更加强大的属性模型，该模型支持许多特性，例如更改通知、默认值继承以及减少属性存储空间。最终结果就是依赖项属性(dependencyproperty)特性。通过继承自 DependencyObject类，WPF类可获得对依赖项属性的支持。</p><h5 id="Visual"><a href="#Visual" class="headerlink" title="Visual"></a>Visual</h5><p>&emsp;&emsp;在 WPF 窗口中显示的每个元素本质上都是 Visual对象。可将 Visual 类视为绘图对象，其中封装了绘图指令、如何执行绘图的附加细节(如剪裁、透明度以及变换设置)以及基本功能(如命中测试)。Visual类还在托管的WPF 库和渲染桌面的 milcore.dll 程序集之间提供了链接。任何继承自 Vsual 的类都能在窗口上显示出来。如果更愿意使用轻量级的 API创建用户界面，而不想使用 WPF 的高级框架特征，可直接使用 Visual 对象进行编程。</p><h5 id="UIElement"><a href="#UIElement" class="headerlink" title="UIElement"></a>UIElement</h5><p>&emsp;&emsp;UIElement 类增加了对 WPF 本质特征的支持，如布局、输入、焦点和事件(WPF 团队使用首字母缩写词 LIFE 来表示)。WPF实现了增强的称为路由事件(RoutedEvent)的事件路由系统，UIElement类中还添加了对命令的支持。</p><h5 id="FrameworkElement"><a href="#FrameworkElement" class="headerlink" title="FrameworkElement"></a>FrameworkElement</h5><p>&emsp;&emsp;FrameworkElement类是 WPF 核心继承树中的最后一站。该类实现了一些全部由 UIElement类定义的成员。例如，UIElement类为WPF布局系统设置了基础，但FrameworkElement类提供了支持它的重要属性(如 HorizontalAlignment 和 Margin 属性)。UIElement 类还添加了对数据绑定、动画以及样式等核心特性的支持。</p><h5 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h5><p>&emsp;&emsp;基本的形状类(如 Rectangle 类、Polygon 类、Ellipse 类、Line 类以及 Path 类)都继承自该类可将这些形状类与更传统的 Windows小组件(如按钮和文本框)结合使用。</p><h5 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h5><p>&emsp;&emsp;控件(control)是可与用户进行交互的元素。控件显然包括TextBox 类、Button 类和 ListBox类等。Control类为设置字体以及前景色与背景色提供了附加属性。但最令人感兴趣的细节是模板支持，通过模板支持，可使用自定义风格的绘图替换控件的标准外观。</p><h5 id="ContentControl"><a href="#ContentControl" class="headerlink" title="ContentControl"></a>ContentControl</h5><p>&emsp;&emsp;ContentControl类是所有具有单一内容的控件的基类，包括简单的标签乃至窗口的所有内容。该模型给人印象最深刻的部分是:控件中的单一内容可以是普通字符串乃至具有其他形状和控件组合的布局面板</p><h5 id="ItemControl"><a href="#ItemControl" class="headerlink" title="ItemControl"></a>ItemControl</h5><p>&emsp;&emsp;ItemsControl 类是所有显示选项集合的控件的基类，如ListBox和 TreeView 控件。列表控件十分灵活--例如，使用 ItemsControl类的内置特征，可将简单的 ListBox 控件变换成单选按钮列表、复选框控件列表、平铺的图像或是您所选择的完全不同的元素的组合。实际上，WPF中的菜单、工具栏以及状态栏都是特定的列表，并且实现它们的类都继承自ItemsContorl 类。</p><h5 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h5><p>&emsp;&emsp;Panel 类是所有布局容器的基类,布局容器是可包含一个或多个子元素、并按特定规则对子元素进行排列的元素。这些容器是WPF布局系统的基础，要以最富有吸引力、最灵活的方式安排内容，使用这些容器是关键所在。</p>]]></content>
    
    
    <summary type="html">WPF概述</summary>
    
    
    
    <category term="C#" scheme="http://bootree.cn/categories/C/"/>
    
    <category term="WPF" scheme="http://bootree.cn/categories/C/WPF/"/>
    
    
    <category term="WPF从入门到入坟" scheme="http://bootree.cn/tags/WPF%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署记录</title>
    <link href="http://bootree.cn/2024/05/12/Hexo/hexo%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
    <id>http://bootree.cn/2024/05/12/Hexo/hexo%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</id>
    <published>2024-05-12T09:17:14.000Z</published>
    <updated>2024-05-26T16:46:21.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo部署记录"><a href="#Hexo部署记录" class="headerlink" title="Hexo部署记录"></a>Hexo部署记录</h2><div class="note info flat"><p>当前部署方式均来源于网络，当前记录只作为记录参考，自行食用</p></div><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><ul><li>访问<a href="https://vercel.com/">Vercel</a>，点击<code>Sign up</code>通过<code>Github</code>注册账号</li><li>注册完成后，点击<code>New Project</code>，选择<code>Import Git Repository</code></li><li>在<code>Import Git Repository</code>中，选择<code>hexo</code>仓库，点击<code>Import</code></li><li>在<code>Configure Project</code>页，填写相关信息点击<code>Deploy</code>等待完成配置</li><li>在控制面板点击项目，即可查看网站</li><li>项目配置完成后，在<code>Settings</code>中，找到<code>Domains</code>，点击<code>Add a domain</code></li><li>输入自定义域名，点击<code>Add</code>等待完成配置</li><li>根据提示，在<code>DNS</code>中添加域名解析解析，等待完成配置<br><img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240512173735.png" alt="自定义域名配置"></li></ul><h3 id="自定义OSS存储图片"><a href="#自定义OSS存储图片" class="headerlink" title="自定义OSS存储图片"></a>自定义OSS存储图片</h3><ul><li>阿里云购买对象存储服务，创建存储空间<br>  <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240512180353.png" alt="OSS存储配置"></li><li>进入<code>对象存储OSS</code>控制台，点击<code>Bucket列表</code></li><li>创建<code>Bucket</code>，填写基本信息（其中<code>读写权限改为公共读</code>）</li><li>点击头像选择<code>访问控制</code>，进入<code>RAM访问控制</code></li><li>点击<code>用户</code>，输入基本信息（勾选<code>OpenAPI</code>调用访问 启用AccessKey ID和AccessKey Secret）</li><li>用户首页点击<code>添加权限</code>，选择添加权限<br>  <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240512181202.png" alt="添加权限"></li><li>点击用户名进入<code>用户详情页</code>，点击<code>创建AccessKey</code>得到<code>AccessKey ID和AccessKey Secret</code></li><li>访问<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，下载并安装PicGo</li><li>进入<code>PicGo</code>应用，进行图床设置<br>  <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240512182037.png" alt="图床设置"></li><li>可进行测试上传，在阿里云对象存储OSS控制台可以看到上传的图片，点击可看到上传的图片信息，在浏览器访问图片链接会触发下载，解决方案是需要配置自定义域名 <a href="https://help.aliyun.com/zh/oss/user-guide/how-to-ensure-an-object-is-previewed-when-you-access-the-object?spm=a2c4g.11186623.2.19.19681a214ISjKj">常见问题</a></li><li>进入<code>Bucket</code>详情页，侧边栏选择<code>Bucket配置</code>下的<code>域名管理</code></li><li>输入绑定域名例如<code>static.bootree.cn</code>，会自动生成域名解析记录<br>  <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240512191034.png" alt="阿里云域名解析记录配置"></li><li>通过<a href="https://help.aliyun.com/zh/oss/user-guide/map-custom-domain-names-5?spm=a2c4g.11186623.0.i2#4b2d958079f12">长期URL</a>访问图片<br>  <img src="https://cnlicm-blog-image.oss-cn-shenzhen.aliyuncs.com/img/20240512191755.png" alt="图片"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo部署记录&quot;&gt;&lt;a href=&quot;#Hexo部署记录&quot; class=&quot;headerlink&quot; title=&quot;Hexo部署记录&quot;&gt;&lt;/a&gt;Hexo部署记录&lt;/h2&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;当前部署方式均来源于网络，当前记录只</summary>
      
    
    
    
    <category term="Hexo" scheme="http://bootree.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://bootree.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly主题标签外挂语法</title>
    <link href="http://bootree.cn/2024/05/12/Hexo/Butterfly%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82%E8%AF%AD%E6%B3%95/"/>
    <id>http://bootree.cn/2024/05/12/Hexo/Butterfly%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82%E8%AF%AD%E6%B3%95/</id>
    <published>2024-05-12T01:55:15.000Z</published>
    <updated>2024-07-30T12:37:56.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="標籤外掛（Tag-Plugins）"><a href="#標籤外掛（Tag-Plugins）" class="headerlink" title="標籤外掛（Tag Plugins）"></a>標籤外掛（Tag Plugins）</h2><div class="note warning flat"><p>  以下内容节选自官网教程，详情可见 <a class="btn-beautify green larger" href="https://butterfly.js.org/posts/4aa8abbe/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p></div><div class="note info flat"><p>標籤外掛是Hexo獨有的功能，並不是標準的Markdown格式。</p><p>以下的寫法，只適用於Butterfly主題，用在其它主題上不會有效果，甚至可能會報錯。使用前請留意</p></div><div class="note warning flat"><p>標籤外掛雖然能為主題帶來一些額外的功能和UI方面的強化，但是，標籤外掛也有明顯的限制，使用時請留意。</p></div><h3 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h3><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">通用設置</button><button type="button" class="tab " data-href="note-2">用法 1</button><button type="button" class="tab " data-href="note-3">用法 2（自定義 icon）</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><p>移植於next主題，並進行修改。</p><p>修改 <code>主題配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>icons</code>和<code>light_bg_offset</code>只對<em>方法一</em>生效</p><p>Note 標籤外掛有兩種用法</p></div><div class="tab-item-content" id="note-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名稱</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可選】標識，不同的標識有不同的配色<br>（ default &#x2F; primary &#x2F; success &#x2F; info &#x2F; warning &#x2F; danger ）</td></tr><tr><td>no-icon</td><td>【可選】不顯示 icon</td></tr><tr><td>style</td><td>【可選】可以覆蓋配置中的 style <br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table><blockquote><p>simple</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默認 提示塊標籤</p></div><div class="note default simple"><p>default 提示塊標籤</p></div><div class="note primary simple"><p>primary 提示塊標籤</p></div><div class="note success simple"><p>success 提示塊標籤</p></div><div class="note info simple"><p>info 提示塊標籤</p></div><div class="note warning simple"><p>warning 提示塊標籤</p></div><div class="note danger simple"><p>danger 提示塊標籤</p></div><blockquote><p>modern</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note modern"><p>默認 提示塊標籤</p></div><div class="note default modern"><p>default 提示塊標籤</p></div><div class="note primary modern"><p>primary 提示塊標籤</p></div><div class="note success modern"><p>success 提示塊標籤</p></div><div class="note info modern"><p>info 提示塊標籤</p></div><div class="note warning modern"><p>warning 提示塊標籤</p></div><div class="note danger modern"><p>danger 提示塊標籤</p></div><blockquote><p>flat</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note flat"><p>默認 提示塊標籤</p></div><div class="note default flat"><p>default 提示塊標籤</p></div><div class="note primary flat"><p>primary 提示塊標籤</p></div><div class="note success flat"><p>success 提示塊標籤</p></div><div class="note info flat"><p>info 提示塊標籤</p></div><div class="note warning flat"><p>warning 提示塊標籤</p></div><div class="note danger flat"><p>danger 提示塊標籤</p></div><blockquote><p>disabled</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note disabled"><p>默認 提示塊標籤</p></div><div class="note default disabled"><p>default 提示塊標籤</p></div><div class="note primary disabled"><p>primary 提示塊標籤</p></div><div class="note success disabled"><p>success 提示塊標籤</p></div><div class="note info disabled"><p>info 提示塊標籤</p></div><div class="note warning disabled"><p>warning 提示塊標籤</p></div><div class="note danger disabled"><p>danger 提示塊標籤</p></div><blockquote><p>no-icon</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>默認 提示塊標籤</p></div><div class="note default no-icon flat"><p>default 提示塊標籤</p></div><div class="note primary no-icon flat"><p>primary 提示塊標籤</p></div><div class="note success no-icon flat"><p>success 提示塊標籤</p></div><div class="note info no-icon flat"><p>info 提示塊標籤</p></div><div class="note warning no-icon flat"><p>warning 提示塊標籤</p></div><div class="note danger no-icon flat"><p>danger 提示塊標籤</p></div></div><div class="tab-item-content" id="note-3"><blockquote><p>3.2.0 以上版本支</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名稱</th><th>用法</th></tr></thead><tbody><tr><td>color</td><td>【可選】顔色 <br>(default &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green)</td></tr><tr><td>icon</td><td>【可選】可配置自定義 icon (只支持 fontawesome 圖標, 也可以配置 no-icon )</td></tr><tr><td>style</td><td>【可選】可以覆蓋配置中的 style<br/>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table><blockquote><p>simple</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了....</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>modern</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了....</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>flat</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了....</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>disabled</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了....</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心開車 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>這是三片呢？還是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石頭布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最討厭的瀏覽器</p></div><blockquote><p>no-icon</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;</span><br><span class="line">小心開車 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;</span><br><span class="line">這是三片呢？還是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;</span><br><span class="line">你是刷 Visa 還是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;</span><br><span class="line">剪刀石頭布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;</span><br><span class="line">前端最討厭的瀏覽器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>你是刷 Visa 還是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了....</p></div><div class="note pink no-icon flat"><p>小心開車 安全至上</p></div><div class="note red no-icon flat"><p>這是三片呢？還是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 還是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石頭布</p></div><div class="note green no-icon flat"><p>前端最討厭的瀏覽器</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="Gallery相冊圖庫"><a href="#Gallery相冊圖庫" class="headerlink" title="Gallery相冊圖庫"></a>Gallery相冊圖庫</h3><blockquote><p>2.2.0以上提供</p></blockquote><p>一個圖庫集合。</p><p>寫法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>name：圖庫名字</li><li>description：圖庫描述</li><li>link：連接到對應相冊的地址</li><li>img-url：圖庫封面的地址</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup &#x27;壁紙&#x27; &#x27;收藏的一些壁紙&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;漫威&#x27; &#x27;關於漫威的圖片&#x27; &#x27;/Gallery/marvel&#x27; https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;關於OH MY GIRL的圖片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於OH MY GIRL的圖片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><h3 id="Gallery相冊"><a href="#Gallery相冊" class="headerlink" title="Gallery相冊"></a>Gallery相冊</h3><blockquote><p>2.0.0 以上提供</p></blockquote><p>區別於舊版的Gallery相冊,新的 Gallery 相冊會自動根據圖片長度進行排版，書寫也更加方便，與 markdown 格式一樣。可根據需要插入到相應的 md。</p><div class="tabs" id=""><ul class="nav-tabs"><button type="button" class="tab  active" data-href="-1">本地</button><button type="button" class="tab " data-href="-2">遠程拉取</button></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>寫法:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>lazyload</td><td>【可選】點擊按鈕加載更多圖片，填寫 true&#x2F;false。默認為 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可選】圖片顯示的高度，如果需要一行顯示更多的圖片，可設置更小的數字。默認為 <code>220</code>。</td></tr><tr><td>limit</td><td>【可選】每次加載多少張照片。默認為 <code>10</code>。</td></tr></tbody></table><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,220,10 %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,,10 %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div></div><div class="tab-item-content" id="-2"><p>寫法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,[link],[lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>url</td><td>【必須】 識別詞</td></tr><tr><td>link</td><td>【必須】遠程的 json 鏈接</td></tr><tr><td>lazyload</td><td>【可選】點擊按鈕加載更多圖片，填寫 true&#x2F;false。默認為 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可選】圖片顯示的高度，如果需要一行顯示更多的圖片，可設置更小的數字。默認為 <code>220</code>。</td></tr><tr><td>limit</td><td>【可選】每次加載多少張照片。默認為 <code>10</code>。</td></tr></tbody></table><blockquote><p> 遠程鏈接 Json 的例子</p></blockquote><p>有三個參數，<code>url</code>是必須<strong>存在</strong>的，<code>alt</code> 和 <code>title</code> 可有，也可沒有。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;這是title&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0472.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0472.jpg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0453.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0931.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,https://xxxx.com/sss.json %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,220,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h3><div class="note warning flat"><p>2.2.0以上提供</p><p>請注意，tag-hide內的標簽外掛content內都不建議有h1 - h6 等標題。因為Toc會把隱藏內容標題也顯示出來，而且當滾動屏幕時，如果隱藏內容沒有顯示出來，會導致Toc的滾動出現異常。</p></div><p>如果你想把一些文字、內容隱藏起來，並提供按鈕讓用户點擊顯示。可以使用這個標籤外掛。</p><div class="tabs" id="tag-hide"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tag-hide-1">Inline</button><button type="button" class="tab " data-href="tag-hide-2">Block</button><button type="button" class="tab " data-href="tag-hide-3">Toggle</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><code>inline</code> 在文本里面添加按鈕隱藏內容，只限文字</p><p>( content不能包含英文逗號，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content: 文本內容</p></li><li><p>display: 按鈕顯示的文字(可選)</p></li><li><p>bg: 按鈕的背景顏色(可選)</p></li><li><p>color: 按鈕文字的顏色(可選)</p></li></ul><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪個英文字母最酷？ &#123;% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">門裏站着一個人? &#123;% hideInline 閃 %&#125;</span><br></pre></td></tr></table></figure><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案<br>  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click<br>  </button><span class="hide-content">閃</span></span></p></div><div class="tab-item-content" id="tag-hide-2"><p><code>block</code>獨立的block隱藏內容，可以隱藏很多內容，包括圖片，代碼塊等等</p><p>( display 不能包含英文逗號，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本內容</li><li>display: 按鈕顯示的文字(可選)</li><li>bg: 按鈕的背景顏色(可選)</li><li>color: 按鈕文字的顏色(可選)</li></ul><blockquote><p>Demo</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎麼可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎麼可能有答案</p></div></div></div><div class="tab-item-content" id="tag-hide-3"><blockquote><p>2.3.0以上支持</p></blockquote><p>如果你需要展示的內容太多，可以把它隱藏在收縮框裏，需要時再把它展開。</p><p>( display 不能包含英文逗號，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安裝方法 %&#125;</span><br><span class="line">在你的博客根目錄裏</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安裝比較新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">Butterfly安裝方法</summary><div class="toggle-content"><p>在你的博客根目錄裏</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>如果想要安裝比較新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p></div></details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><p>使用mermaid標籤可以繪製Flowchart（流程圖）、Sequence diagram（時序圖 ）、Class Diagram（類別圖）、State Diagram（狀態圖）、Gantt（甘特圖）和Pie Chart（圓形圖），具體可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文檔</a></p><p>修改 <code>主題配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mermaid</span></span><br><span class="line"><span class="comment"># see https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>寫法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">內容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://jsd.012700.xyz/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-mermaid.png"></p><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>移植於next主題</p><p>使用方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><blockquote><p>Demo 1 - 預設選擇第一個【默認】</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><blockquote><p>Demo 2 - 預設選擇tabs</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><blockquote><p>Demo 3 - 沒有預設值</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><blockquote><p>Demo 4 - 自定義Tab名 + 只有icon + icon和Tab名</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一個Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字為第一個Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有圖標 沒有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸彈@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一個Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸彈</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字為第一個Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有圖標 沒有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><blockquote><p>3.0以上適用</p></blockquote><p>使用方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 鏈接</span><br><span class="line">[text]        : 按鈕文字</span><br><span class="line">[icon]        : [可選] 圖標</span><br><span class="line">[color]       : [可選] 按鈕背景顔色(默認style時）</span><br><span class="line"><span class="code">                      按鈕字體和邊框顔色(outline時)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可選] 按鈕樣式 默認實心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可選] 按鈕佈局 默認為line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可選] 按鈕大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify block" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block center larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block right outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p><strong>more than one button in center</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h3 id="inlineImg"><a href="#inlineImg" class="headerlink" title="inlineImg"></a>inlineImg</h3><p>主題中的圖片都是默認以<code>塊級元素</code>顯示，如果你想以<code>內聯元素</code>顯示，可以使用這個標簽外掛。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src]      :    圖片鏈接</span><br><span class="line">[height]   ：   圖片高度限制【可選】</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你看我長得漂亮不</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png</span>)</span><br><span class="line"></span><br><span class="line">我覺得很漂亮 &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.012700.xyz/gh/jerryc127/CDN@m2/img/hexo-theme-butterfly-docs-inlineimg.png" alt="image-20210319001204045"></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><div class="note warning flat"><p>由於 hexo 的渲染限制， 在段落開頭使用 label 標籤外掛會出現一些問題。例如：連續開頭使用 label 標籤外掛的段落無法換行</p><p>建議 <strong>不要</strong> 在段落開頭使用 label 標籤外掛</p></div><p>高亮所需的文字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>text</td><td>文字</td></tr><tr><td>color</td><td>【可選】背景顏色，默認為 <code>default</code><br />default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td></tr></tbody></table><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</span><br><span class="line">宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</p><p>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><blockquote><p>4.0.0 以上支持</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>title</td><td>標題&#x2F;時間線</td></tr><tr><td>color</td><td>timeline 顏色<br />default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green</td></tr></tbody></table><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,red %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,purple %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,orange %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,green %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><blockquote><p>4.1.0 支持</p></blockquote><p>可在任何界面插入類似友情鏈接列表效果</p><p>內容格式與友情鏈接界面一樣，支持 yml 格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 友情鏈接</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 那些人，那些事</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: JerryC</span></span><br><span class="line"><span class="emphasis">      link: https://jerryc.me/</span></span><br><span class="line"><span class="emphasis">      avatar: https://jerryc.me/img/avatar.png</span></span><br><span class="line"><span class="emphasis">      descr: 今日事,今日畢</span></span><br><span class="line"><span class="emphasis">    - name: Hexo</span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-tw/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、簡單且強大的網誌框架</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 網站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推薦的網站</span></span><br><span class="line"><span class="emphasis">  link_</span>list:</span><br><span class="line"><span class="bullet">    -</span> name: Youtube</span><br><span class="line"><span class="code">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="code">      descr: 視頻網站</span></span><br><span class="line"><span class="code">    - name: Weibo</span></span><br><span class="line"><span class="code">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="code">      descr: 中國最大社交分享平台</span></span><br><span class="line"><span class="code">    - name: Twitter</span></span><br><span class="line"><span class="code">      link: https://twitter.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="code">      descr: 社交分享平台</span></span><br><span class="line"><span class="code">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://jsd.012700.xyz/gh/jerryc127/CDN@m2/img/hexo-theme-butterfly-docs-flink-demo.png"></p><h3 id="abcjs-樂譜"><a href="#abcjs-樂譜" class="headerlink" title="abcjs 樂譜"></a>abcjs 樂譜</h3><p>在頁面上渲染樂譜</p><p>修改 <code>主題配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abcjs (樂譜渲染)</span></span><br><span class="line"><span class="comment"># See https://github.com/paulrosen/abcjs</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="attr">abcjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>寫法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% score %&#125;</span><br><span class="line">樂譜代碼</span><br><span class="line">&#123;% endscore %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% score %&#125;</span><br><span class="line">X:1</span><br><span class="line">T:alternate heads</span><br><span class="line">M:C</span><br><span class="line">L:1/8</span><br><span class="line">U:n=!style=normal!</span><br><span class="line">K:C treble style=rhythm</span><br><span class="line">&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]</span><br><span class="line">%%text This translates to:</span><br><span class="line">[<span class="string">M:C</span>][<span class="symbol">K:style=normal</span>]</span><br><span class="line">[<span class="string">A,EAce</span>][<span class="symbol">A,EAce</span>][<span class="string">A,EAce</span>][<span class="symbol">A,EAce</span>] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]</span><br><span class="line">GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|</span><br><span class="line">[K: style=x]</span><br><span class="line">C/A,/ C/C/E C/zz2|</span><br><span class="line">w:Rock-y did-nt like that</span><br><span class="line">&#123;% endscore %&#125;</span><br></pre></td></tr></table></figure><div class="abc-music-sheet">X:1T:alternate headsM:CL:1/8U:n=!style=normal!K:C treble style=rhythm&quot;Am&quot; BBBB B2 B&gt;B | &quot;Dm&quot; B2 B/B/B &quot;C&quot; B4 |&quot;Am&quot; B2 nGnB B2 nGnA | &quot;Dm&quot; nDB/B/ nDB/B/ &quot;C&quot; nCB/B/ nCB/B/ |B8| B0 B0 B0 B0 |]%%text This translates to:[M:C][K:style=normal][A,EAce][A,EAce][A,EAce][A,EAce] [A,EAce]2 [A,EAce]&gt;[A,EAce] |[DAdf]2 [DAdf]/[DAdf]/[DAdf] [CEGce]4 |[A,EAce]2 GA [A,EAce] GA |D[DAdf]/[DAdf]/ D[DAdf]/[DAdf]/ C [CEGce]/[CEGce]/ C[CEGce]/[CEGce]/ |[CEGce]8 | [CEGce]2 [CEGce]2 [CEGce]2 [CEGce]2 |]GAB2 !style=harmonic![gb]4|GAB2 [K: style=harmonic]gbgb|[K: style=x]C/A,/ C/C/E C/zz2|w:Rock-y did-nt like that</div><h3 id="series-系列文章"><a href="#series-系列文章" class="headerlink" title="series 系列文章"></a>series 系列文章</h3><p>在頁面上顯示系列文章</p><p>修改 <code>主題配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series:</span></span><br><span class="line">   <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">orderBy:</span> <span class="string">&#x27;title&#x27;</span> <span class="comment"># Order by title or date</span></span><br><span class="line">   <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">   <span class="attr">number:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>寫法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% series %&#125;</span><br><span class="line">&#123;% series [series name] %&#125;</span><br></pre></td></tr></table></figure><p>在文章的 <code>front-matter</code> 上添加參數 series，並給與一個標識</p><p>使用此標簽外掛，會把相同標識的文章以列表的形式展示</p><p>如果不寫 series 標識，則默認為你使用此標簽外掛所在的文章的 series 標識</p><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% series markdown %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.012700.xyz/butterfly/2023/10/butterfly-series.png"></p>]]></content>
    
    
    <summary type="html">节选自官网教程</summary>
    
    
    
    <category term="Hexo" scheme="http://bootree.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://bootree.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
